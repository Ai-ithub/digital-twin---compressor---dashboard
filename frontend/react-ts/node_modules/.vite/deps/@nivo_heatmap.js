import {
  require_jsx_runtime
} from "./chunk-VIJJHCPD.js";
import {
  ascending_default,
  band,
  basisClosed_default,
  basisOpen_default,
  basis_default,
  bundle_default,
  cardinalClosed_default,
  cardinalOpen_default,
  cardinal_default,
  catmullRomClosed_default,
  catmullRomOpen_default,
  catmullRom_default,
  cubehelix,
  cubehelixLong,
  descending_default,
  diverging,
  diverging_default,
  expand_default,
  insideOut_default,
  linear,
  linearClosed_default,
  linear_default,
  monotoneX,
  monotoneY,
  natural_default,
  none_default,
  none_default2,
  ordinal,
  quantize,
  require_SetCache,
  require_Stack,
  require_arrayFilter,
  require_arrayIncludes,
  require_arrayIncludesWith,
  require_arrayMap,
  require_assignValue,
  require_baseAssignValue,
  require_baseEach,
  require_baseFor,
  require_baseGet,
  require_baseGetTag,
  require_baseIteratee,
  require_baseRest,
  require_baseUnary,
  require_baseUniq,
  require_cacheHas,
  require_castPath,
  require_cloneBuffer,
  require_cloneTypedArray,
  require_copyArray,
  require_copyObject,
  require_eq,
  require_flatRest,
  require_get,
  require_hasIn,
  require_initCloneObject,
  require_isArguments,
  require_isArray,
  require_isArrayLike,
  require_isBuffer,
  require_isEqual,
  require_isFunction,
  require_isIndex,
  require_isIterateeCall,
  require_isNumber,
  require_isObject,
  require_isObjectLike,
  require_isPlainObject,
  require_isString,
  require_isTypedArray,
  require_keysIn,
  require_last,
  require_nodeUtil,
  require_omit,
  require_sortBy,
  require_toKey,
  require_uniqBy,
  reverse_default,
  rgb,
  rgbBasis,
  sequential,
  silhouette_default,
  stepAfter,
  stepBefore,
  step_default,
  string_default,
  wiggle_default
} from "./chunk-4LQOJNGM.js";
import {
  require_prop_types
} from "./chunk-D2PAWERW.js";
import {
  require_react_dom
} from "./chunk-VSBEWL6W.js";
import {
  require_react
} from "./chunk-MOJUAYT3.js";
import {
  __commonJS,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/lodash/_assignMergeValue.js
var require_assignMergeValue = __commonJS({
  "node_modules/lodash/_assignMergeValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignMergeValue;
  }
});

// node_modules/lodash/isArrayLikeObject.js
var require_isArrayLikeObject = __commonJS({
  "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    module.exports = isArrayLikeObject;
  }
});

// node_modules/lodash/_safeGet.js
var require_safeGet = __commonJS({
  "node_modules/lodash/_safeGet.js"(exports, module) {
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    module.exports = safeGet;
  }
});

// node_modules/lodash/toPlainObject.js
var require_toPlainObject = __commonJS({
  "node_modules/lodash/toPlainObject.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    module.exports = toPlainObject;
  }
});

// node_modules/lodash/_baseMergeDeep.js
var require_baseMergeDeep = __commonJS({
  "node_modules/lodash/_baseMergeDeep.js"(exports, module) {
    var assignMergeValue = require_assignMergeValue();
    var cloneBuffer = require_cloneBuffer();
    var cloneTypedArray = require_cloneTypedArray();
    var copyArray = require_copyArray();
    var initCloneObject = require_initCloneObject();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLikeObject = require_isArrayLikeObject();
    var isBuffer = require_isBuffer();
    var isFunction = require_isFunction();
    var isObject = require_isObject();
    var isPlainObject = require_isPlainObject();
    var isTypedArray = require_isTypedArray();
    var safeGet = require_safeGet();
    var toPlainObject = require_toPlainObject();
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    module.exports = baseMergeDeep;
  }
});

// node_modules/lodash/_baseMerge.js
var require_baseMerge = __commonJS({
  "node_modules/lodash/_baseMerge.js"(exports, module) {
    var Stack = require_Stack();
    var assignMergeValue = require_assignMergeValue();
    var baseFor = require_baseFor();
    var baseMergeDeep = require_baseMergeDeep();
    var isObject = require_isObject();
    var keysIn = require_keysIn();
    var safeGet = require_safeGet();
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    module.exports = baseMerge;
  }
});

// node_modules/lodash/_createAssigner.js
var require_createAssigner = __commonJS({
  "node_modules/lodash/_createAssigner.js"(exports, module) {
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index3 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index3 < length) {
          var source = sources[index3];
          if (source) {
            assigner(object, source, index3, customizer);
          }
        }
        return object;
      });
    }
    module.exports = createAssigner;
  }
});

// node_modules/lodash/merge.js
var require_merge = __commonJS({
  "node_modules/lodash/merge.js"(exports, module) {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var merge3 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    module.exports = merge3;
  }
});

// node_modules/lodash/_baseSet.js
var require_baseSet = __commonJS({
  "node_modules/lodash/_baseSet.js"(exports, module) {
    var assignValue = require_assignValue();
    var castPath = require_castPath();
    var isIndex = require_isIndex();
    var isObject = require_isObject();
    var toKey = require_toKey();
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);
      var index3 = -1, length = path.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index3 < length) {
        var key = toKey(path[index3]), newValue = value;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index3 != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject(objValue) ? objValue : isIndex(path[index3 + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    module.exports = baseSet;
  }
});

// node_modules/lodash/set.js
var require_set = __commonJS({
  "node_modules/lodash/set.js"(exports, module) {
    var baseSet = require_baseSet();
    function set3(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }
    module.exports = set3;
  }
});

// node_modules/lodash/_baseDifference.js
var require_baseDifference = __commonJS({
  "node_modules/lodash/_baseDifference.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var arrayMap = require_arrayMap();
    var baseUnary = require_baseUnary();
    var cacheHas = require_cacheHas();
    var LARGE_ARRAY_SIZE = 200;
    function baseDifference(array3, values, iteratee, comparator) {
      var index3 = -1, includes = arrayIncludes, isCommon = true, length = array3.length, result = [], valuesLength = values.length;
      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
        while (++index3 < length) {
          var value = array3[index3], computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseDifference;
  }
});

// node_modules/lodash/without.js
var require_without = __commonJS({
  "node_modules/lodash/without.js"(exports, module) {
    var baseDifference = require_baseDifference();
    var baseRest = require_baseRest();
    var isArrayLikeObject = require_isArrayLikeObject();
    var without = baseRest(function(array3, values) {
      return isArrayLikeObject(array3) ? baseDifference(array3, values) : [];
    });
    module.exports = without;
  }
});

// node_modules/lodash/_basePickBy.js
var require_basePickBy = __commonJS({
  "node_modules/lodash/_basePickBy.js"(exports, module) {
    var baseGet = require_baseGet();
    var baseSet = require_baseSet();
    var castPath = require_castPath();
    function basePickBy(object, paths, predicate) {
      var index3 = -1, length = paths.length, result = {};
      while (++index3 < length) {
        var path = paths[index3], value = baseGet(object, path);
        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }
    module.exports = basePickBy;
  }
});

// node_modules/lodash/_basePick.js
var require_basePick = __commonJS({
  "node_modules/lodash/_basePick.js"(exports, module) {
    var basePickBy = require_basePickBy();
    var hasIn = require_hasIn();
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }
    module.exports = basePick;
  }
});

// node_modules/lodash/pick.js
var require_pick = __commonJS({
  "node_modules/lodash/pick.js"(exports, module) {
    var basePick = require_basePick();
    var flatRest = require_flatRest();
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });
    module.exports = pick;
  }
});

// node_modules/lodash/uniq.js
var require_uniq = __commonJS({
  "node_modules/lodash/uniq.js"(exports, module) {
    var baseUniq = require_baseUniq();
    function uniq(array3) {
      return array3 && array3.length ? baseUniq(array3) : [];
    }
    module.exports = uniq;
  }
});

// node_modules/lodash/_baseIsDate.js
var require_baseIsDate = __commonJS({
  "node_modules/lodash/_baseIsDate.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var dateTag = "[object Date]";
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }
    module.exports = baseIsDate;
  }
});

// node_modules/lodash/isDate.js
var require_isDate = __commonJS({
  "node_modules/lodash/isDate.js"(exports, module) {
    var baseIsDate = require_baseIsDate();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsDate = nodeUtil && nodeUtil.isDate;
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
    module.exports = isDate;
  }
});

// node_modules/lodash/_baseFilter.js
var require_baseFilter = __commonJS({
  "node_modules/lodash/_baseFilter.js"(exports, module) {
    var baseEach = require_baseEach();
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index3, collection2) {
        if (predicate(value, index3, collection2)) {
          result.push(value);
        }
      });
      return result;
    }
    module.exports = baseFilter;
  }
});

// node_modules/lodash/filter.js
var require_filter = __commonJS({
  "node_modules/lodash/filter.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var baseFilter = require_baseFilter();
    var baseIteratee = require_baseIteratee();
    var isArray = require_isArray();
    function filter3(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, baseIteratee(predicate, 3));
    }
    module.exports = filter3;
  }
});

// node_modules/@nivo/heatmap/dist/nivo-heatmap.es.js
var import_react21 = __toESM(require_react());

// node_modules/@nivo/core/dist/nivo-core.es.js
var import_react16 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@nivo/tooltip/dist/nivo-tooltip.es.js
var import_react15 = __toESM(require_react());

// node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs
var updateQueue = makeQueue();
var raf = (fn2) => schedule(fn2, updateQueue);
var writeQueue = makeQueue();
raf.write = (fn2) => schedule(fn2, writeQueue);
var onStartQueue = makeQueue();
raf.onStart = (fn2) => schedule(fn2, onStartQueue);
var onFrameQueue = makeQueue();
raf.onFrame = (fn2) => schedule(fn2, onFrameQueue);
var onFinishQueue = makeQueue();
raf.onFinish = (fn2) => schedule(fn2, onFinishQueue);
var timeouts = [];
raf.setTimeout = (handler, ms) => {
  const time2 = raf.now() + ms;
  const cancel = () => {
    const i6 = timeouts.findIndex((t8) => t8.cancel == cancel);
    if (~i6)
      timeouts.splice(i6, 1);
    pendingCount -= ~i6 ? 1 : 0;
  };
  const timeout = { time: time2, handler, cancel };
  timeouts.splice(findTimeout(time2), 0, timeout);
  pendingCount += 1;
  start();
  return timeout;
};
var findTimeout = (time2) => ~(~timeouts.findIndex((t8) => t8.time > time2) || ~timeouts.length);
raf.cancel = (fn2) => {
  onStartQueue.delete(fn2);
  onFrameQueue.delete(fn2);
  onFinishQueue.delete(fn2);
  updateQueue.delete(fn2);
  writeQueue.delete(fn2);
};
raf.sync = (fn2) => {
  sync = true;
  raf.batchedUpdates(fn2);
  sync = false;
};
raf.throttle = (fn2) => {
  let lastArgs;
  function queuedFn() {
    try {
      fn2(...lastArgs);
    } finally {
      lastArgs = null;
    }
  }
  function throttled(...args) {
    lastArgs = args;
    raf.onStart(queuedFn);
  }
  throttled.handler = fn2;
  throttled.cancel = () => {
    onStartQueue.delete(queuedFn);
    lastArgs = null;
  };
  return throttled;
};
var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : (
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  () => {
  }
);
raf.use = (impl) => nativeRaf = impl;
raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
raf.batchedUpdates = (fn2) => fn2();
raf.catch = console.error;
raf.frameLoop = "always";
raf.advance = () => {
  if (raf.frameLoop !== "demand") {
    console.warn(
      "Cannot call the manual advancement of rafz whilst frameLoop is not set as demand"
    );
  } else {
    update();
  }
};
var ts = -1;
var pendingCount = 0;
var sync = false;
function schedule(fn2, queue) {
  if (sync) {
    queue.delete(fn2);
    fn2(0);
  } else {
    queue.add(fn2);
    start();
  }
}
function start() {
  if (ts < 0) {
    ts = 0;
    if (raf.frameLoop !== "demand") {
      nativeRaf(loop);
    }
  }
}
function stop() {
  ts = -1;
}
function loop() {
  if (~ts) {
    nativeRaf(loop);
    raf.batchedUpdates(update);
  }
}
function update() {
  const prevTs = ts;
  ts = raf.now();
  const count3 = findTimeout(ts);
  if (count3) {
    eachSafely(timeouts.splice(0, count3), (t8) => t8.handler());
    pendingCount -= count3;
  }
  if (!pendingCount) {
    stop();
    return;
  }
  onStartQueue.flush();
  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
  onFrameQueue.flush();
  writeQueue.flush();
  onFinishQueue.flush();
}
function makeQueue() {
  let next = /* @__PURE__ */ new Set();
  let current = next;
  return {
    add(fn2) {
      pendingCount += current == next && !next.has(fn2) ? 1 : 0;
      next.add(fn2);
    },
    delete(fn2) {
      pendingCount -= current == next && next.has(fn2) ? 1 : 0;
      return next.delete(fn2);
    },
    flush(arg) {
      if (current.size) {
        next = /* @__PURE__ */ new Set();
        pendingCount -= current.size;
        eachSafely(current, (fn2) => fn2(arg) && next.add(fn2));
        pendingCount += next.size;
        current = next;
      }
    }
  };
}
function eachSafely(values, each2) {
  values.forEach((value) => {
    try {
      each2(value);
    } catch (e11) {
      raf.catch(e11);
    }
  });
}

// node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_react3 = __toESM(require_react(), 1);
var import_react4 = __toESM(require_react(), 1);
var import_react5 = __toESM(require_react(), 1);
var import_react6 = __toESM(require_react(), 1);
var import_react7 = __toESM(require_react(), 1);
var import_react8 = __toESM(require_react(), 1);
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var globals_exports = {};
__export(globals_exports, {
  assign: () => assign,
  colors: () => colors,
  createStringInterpolator: () => createStringInterpolator,
  skipAnimation: () => skipAnimation,
  to: () => to,
  willAdvance: () => willAdvance
});
function noop() {
}
var defineHidden = (obj, key, value) => Object.defineProperty(obj, key, { value, writable: true, configurable: true });
var is = {
  arr: Array.isArray,
  obj: (a5) => !!a5 && a5.constructor.name === "Object",
  fun: (a5) => typeof a5 === "function",
  str: (a5) => typeof a5 === "string",
  num: (a5) => typeof a5 === "number",
  und: (a5) => a5 === void 0
};
function isEqual(a5, b5) {
  if (is.arr(a5)) {
    if (!is.arr(b5) || a5.length !== b5.length)
      return false;
    for (let i6 = 0; i6 < a5.length; i6++) {
      if (a5[i6] !== b5[i6])
        return false;
    }
    return true;
  }
  return a5 === b5;
}
var each = (obj, fn2) => obj.forEach(fn2);
function eachProp(obj, fn2, ctx2) {
  if (is.arr(obj)) {
    for (let i6 = 0; i6 < obj.length; i6++) {
      fn2.call(ctx2, obj[i6], `${i6}`);
    }
    return;
  }
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      fn2.call(ctx2, obj[key], key);
    }
  }
}
var toArray = (a5) => is.und(a5) ? [] : is.arr(a5) ? a5 : [a5];
function flush(queue, iterator) {
  if (queue.size) {
    const items = Array.from(queue);
    queue.clear();
    each(items, iterator);
  }
}
var flushCalls = (queue, ...args) => flush(queue, (fn2) => fn2(...args));
var isSSR = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var createStringInterpolator;
var to;
var colors = null;
var skipAnimation = false;
var willAdvance = noop;
var assign = (globals) => {
  if (globals.to)
    to = globals.to;
  if (globals.now)
    raf.now = globals.now;
  if (globals.colors !== void 0)
    colors = globals.colors;
  if (globals.skipAnimation != null)
    skipAnimation = globals.skipAnimation;
  if (globals.createStringInterpolator)
    createStringInterpolator = globals.createStringInterpolator;
  if (globals.requestAnimationFrame)
    raf.use(globals.requestAnimationFrame);
  if (globals.batchedUpdates)
    raf.batchedUpdates = globals.batchedUpdates;
  if (globals.willAdvance)
    willAdvance = globals.willAdvance;
  if (globals.frameLoop)
    raf.frameLoop = globals.frameLoop;
};
var startQueue = /* @__PURE__ */ new Set();
var currentFrame = [];
var prevFrame = [];
var priority = 0;
var frameLoop = {
  get idle() {
    return !startQueue.size && !currentFrame.length;
  },
  /** Advance the given animation on every frame until idle. */
  start(animation) {
    if (priority > animation.priority) {
      startQueue.add(animation);
      raf.onStart(flushStartQueue);
    } else {
      startSafely(animation);
      raf(advance);
    }
  },
  /** Advance all animations by the given time. */
  advance,
  /** Call this when an animation's priority changes. */
  sort(animation) {
    if (priority) {
      raf.onFrame(() => frameLoop.sort(animation));
    } else {
      const prevIndex = currentFrame.indexOf(animation);
      if (~prevIndex) {
        currentFrame.splice(prevIndex, 1);
        startUnsafely(animation);
      }
    }
  },
  /**
   * Clear all animations. For testing purposes.
   *
   * ☠️ Never call this from within the frameloop.
   */
  clear() {
    currentFrame = [];
    startQueue.clear();
  }
};
function flushStartQueue() {
  startQueue.forEach(startSafely);
  startQueue.clear();
  raf(advance);
}
function startSafely(animation) {
  if (!currentFrame.includes(animation))
    startUnsafely(animation);
}
function startUnsafely(animation) {
  currentFrame.splice(
    findIndex(currentFrame, (other) => other.priority > animation.priority),
    0,
    animation
  );
}
function advance(dt2) {
  const nextFrame = prevFrame;
  for (let i6 = 0; i6 < currentFrame.length; i6++) {
    const animation = currentFrame[i6];
    priority = animation.priority;
    if (!animation.idle) {
      willAdvance(animation);
      animation.advance(dt2);
      if (!animation.idle) {
        nextFrame.push(animation);
      }
    }
  }
  priority = 0;
  prevFrame = currentFrame;
  prevFrame.length = 0;
  currentFrame = nextFrame;
  return currentFrame.length > 0;
}
function findIndex(arr, test) {
  const index3 = arr.findIndex(test);
  return index3 < 0 ? arr.length : index3;
}
var clamp = (min3, max3, v5) => Math.min(Math.max(v5, min3), max3);
var colors2 = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...parts) {
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb2 = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
var rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla = new RegExp(
  "hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)
);
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor(color) {
  let match;
  if (typeof color === "number") {
    return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;
  }
  if (match = hex6.exec(color))
    return parseInt(match[1] + "ff", 16) >>> 0;
  if (colors && colors[color] !== void 0) {
    return colors[color];
  }
  if (match = rgb2.exec(color)) {
    return (parse255(match[1]) << 24 | // r
    parse255(match[2]) << 16 | // g
    parse255(match[3]) << 8 | // b
    255) >>> // a
    0;
  }
  if (match = rgba.exec(color)) {
    return (parse255(match[1]) << 24 | // r
    parse255(match[2]) << 16 | // g
    parse255(match[3]) << 8 | // b
    parse1(match[4])) >>> // a
    0;
  }
  if (match = hex3.exec(color)) {
    return parseInt(
      match[1] + match[1] + // r
      match[2] + match[2] + // g
      match[3] + match[3] + // b
      "ff",
      // a
      16
    ) >>> 0;
  }
  if (match = hex8.exec(color))
    return parseInt(match[1], 16) >>> 0;
  if (match = hex4.exec(color)) {
    return parseInt(
      match[1] + match[1] + // r
      match[2] + match[2] + // g
      match[3] + match[3] + // b
      match[4] + match[4],
      // a
      16
    ) >>> 0;
  }
  if (match = hsl.exec(color)) {
    return (hslToRgb(
      parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3])
      // l
    ) | 255) >>> // a
    0;
  }
  if (match = hsla.exec(color)) {
    return (hslToRgb(
      parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3])
      // l
    ) | parse1(match[4])) >>> // a
    0;
  }
  return null;
}
function hue2rgb(p5, q3, t8) {
  if (t8 < 0)
    t8 += 1;
  if (t8 > 1)
    t8 -= 1;
  if (t8 < 1 / 6)
    return p5 + (q3 - p5) * 6 * t8;
  if (t8 < 1 / 2)
    return q3;
  if (t8 < 2 / 3)
    return p5 + (q3 - p5) * (2 / 3 - t8) * 6;
  return p5;
}
function hslToRgb(h2, s3, l4) {
  const q3 = l4 < 0.5 ? l4 * (1 + s3) : l4 + s3 - l4 * s3;
  const p5 = 2 * l4 - q3;
  const r6 = hue2rgb(p5, q3, h2 + 1 / 3);
  const g5 = hue2rgb(p5, q3, h2);
  const b5 = hue2rgb(p5, q3, h2 - 1 / 3);
  return Math.round(r6 * 255) << 24 | Math.round(g5 * 255) << 16 | Math.round(b5 * 255) << 8;
}
function parse255(str) {
  const int = parseInt(str, 10);
  if (int < 0)
    return 0;
  if (int > 255)
    return 255;
  return int;
}
function parse360(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = parseFloat(str);
  if (num < 0)
    return 0;
  if (num > 1)
    return 255;
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = parseFloat(str);
  if (int < 0)
    return 0;
  if (int > 100)
    return 1;
  return int / 100;
}
function colorToRgba(input) {
  let int32Color = normalizeColor(input);
  if (int32Color === null)
    return input;
  int32Color = int32Color || 0;
  const r6 = (int32Color & 4278190080) >>> 24;
  const g5 = (int32Color & 16711680) >>> 16;
  const b5 = (int32Color & 65280) >>> 8;
  const a5 = (int32Color & 255) / 255;
  return `rgba(${r6}, ${g5}, ${b5}, ${a5})`;
}
var createInterpolator = (range, output, extrapolate) => {
  if (is.fun(range)) {
    return range;
  }
  if (is.arr(range)) {
    return createInterpolator({
      range,
      output,
      extrapolate
    });
  }
  if (is.str(range.output[0])) {
    return createStringInterpolator(range);
  }
  const config2 = range;
  const outputRange = config2.output;
  const inputRange = config2.range || [0, 1];
  const extrapolateLeft = config2.extrapolateLeft || config2.extrapolate || "extend";
  const extrapolateRight = config2.extrapolateRight || config2.extrapolate || "extend";
  const easing = config2.easing || ((t8) => t8);
  return (input) => {
    const range2 = findRange(input, inputRange);
    return interpolate(
      input,
      inputRange[range2],
      inputRange[range2 + 1],
      outputRange[range2],
      outputRange[range2 + 1],
      easing,
      extrapolateLeft,
      extrapolateRight,
      config2.map
    );
  };
};
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map7) {
  let result = map7 ? map7(input) : input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity")
      return result;
    else if (extrapolateLeft === "clamp")
      result = inputMin;
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity")
      return result;
    else if (extrapolateRight === "clamp")
      result = inputMax;
  }
  if (outputMin === outputMax)
    return outputMin;
  if (inputMin === inputMax)
    return input <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity)
    result = -result;
  else if (inputMax === Infinity)
    result = result - inputMin;
  else
    result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  if (outputMin === -Infinity)
    result = -result;
  else if (outputMax === Infinity)
    result = result + outputMin;
  else
    result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  for (var i6 = 1; i6 < inputRange.length - 1; ++i6)
    if (inputRange[i6] >= input)
      break;
  return i6 - 1;
}
var steps = (steps2, direction = "end") => (progress2) => {
  progress2 = direction === "end" ? Math.min(progress2, 0.999) : Math.max(progress2, 1e-3);
  const expanded = progress2 * steps2;
  const rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
  return clamp(0, 1, rounded / steps2);
};
var c1 = 1.70158;
var c2 = c1 * 1.525;
var c3 = c1 + 1;
var c4 = 2 * Math.PI / 3;
var c5 = 2 * Math.PI / 4.5;
var bounceOut = (x3) => {
  const n1 = 7.5625;
  const d1 = 2.75;
  if (x3 < 1 / d1) {
    return n1 * x3 * x3;
  } else if (x3 < 2 / d1) {
    return n1 * (x3 -= 1.5 / d1) * x3 + 0.75;
  } else if (x3 < 2.5 / d1) {
    return n1 * (x3 -= 2.25 / d1) * x3 + 0.9375;
  } else {
    return n1 * (x3 -= 2.625 / d1) * x3 + 0.984375;
  }
};
var easings = {
  linear: (x3) => x3,
  easeInQuad: (x3) => x3 * x3,
  easeOutQuad: (x3) => 1 - (1 - x3) * (1 - x3),
  easeInOutQuad: (x3) => x3 < 0.5 ? 2 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 2) / 2,
  easeInCubic: (x3) => x3 * x3 * x3,
  easeOutCubic: (x3) => 1 - Math.pow(1 - x3, 3),
  easeInOutCubic: (x3) => x3 < 0.5 ? 4 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 3) / 2,
  easeInQuart: (x3) => x3 * x3 * x3 * x3,
  easeOutQuart: (x3) => 1 - Math.pow(1 - x3, 4),
  easeInOutQuart: (x3) => x3 < 0.5 ? 8 * x3 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 4) / 2,
  easeInQuint: (x3) => x3 * x3 * x3 * x3 * x3,
  easeOutQuint: (x3) => 1 - Math.pow(1 - x3, 5),
  easeInOutQuint: (x3) => x3 < 0.5 ? 16 * x3 * x3 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 5) / 2,
  easeInSine: (x3) => 1 - Math.cos(x3 * Math.PI / 2),
  easeOutSine: (x3) => Math.sin(x3 * Math.PI / 2),
  easeInOutSine: (x3) => -(Math.cos(Math.PI * x3) - 1) / 2,
  easeInExpo: (x3) => x3 === 0 ? 0 : Math.pow(2, 10 * x3 - 10),
  easeOutExpo: (x3) => x3 === 1 ? 1 : 1 - Math.pow(2, -10 * x3),
  easeInOutExpo: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : x3 < 0.5 ? Math.pow(2, 20 * x3 - 10) / 2 : (2 - Math.pow(2, -20 * x3 + 10)) / 2,
  easeInCirc: (x3) => 1 - Math.sqrt(1 - Math.pow(x3, 2)),
  easeOutCirc: (x3) => Math.sqrt(1 - Math.pow(x3 - 1, 2)),
  easeInOutCirc: (x3) => x3 < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x3, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x3 + 2, 2)) + 1) / 2,
  easeInBack: (x3) => c3 * x3 * x3 * x3 - c1 * x3 * x3,
  easeOutBack: (x3) => 1 + c3 * Math.pow(x3 - 1, 3) + c1 * Math.pow(x3 - 1, 2),
  easeInOutBack: (x3) => x3 < 0.5 ? Math.pow(2 * x3, 2) * ((c2 + 1) * 2 * x3 - c2) / 2 : (Math.pow(2 * x3 - 2, 2) * ((c2 + 1) * (x3 * 2 - 2) + c2) + 2) / 2,
  easeInElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : -Math.pow(2, 10 * x3 - 10) * Math.sin((x3 * 10 - 10.75) * c4),
  easeOutElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : Math.pow(2, -10 * x3) * Math.sin((x3 * 10 - 0.75) * c4) + 1,
  easeInOutElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : x3 < 0.5 ? -(Math.pow(2, 20 * x3 - 10) * Math.sin((20 * x3 - 11.125) * c5)) / 2 : Math.pow(2, -20 * x3 + 10) * Math.sin((20 * x3 - 11.125) * c5) / 2 + 1,
  easeInBounce: (x3) => 1 - bounceOut(1 - x3),
  easeOutBounce: bounceOut,
  easeInOutBounce: (x3) => x3 < 0.5 ? (1 - bounceOut(1 - 2 * x3)) / 2 : (1 + bounceOut(2 * x3 - 1)) / 2,
  steps
};
var $get = Symbol.for("FluidValue.get");
var $observers = Symbol.for("FluidValue.observers");
var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
var getFluidObservers = (target) => target[$observers] || null;
function callFluidObserver(observer2, event) {
  if (observer2.eventObserved) {
    observer2.eventObserved(event);
  } else {
    observer2(event);
  }
}
function callFluidObservers(target, event) {
  const observers = target[$observers];
  if (observers) {
    observers.forEach((observer2) => {
      callFluidObserver(observer2, event);
    });
  }
}
var FluidValue = class {
  constructor(get) {
    if (!get && !(get = this.get)) {
      throw Error("Unknown getter");
    }
    setFluidGetter(this, get);
  }
};
var setFluidGetter = (target, get) => setHidden(target, $get, get);
function addFluidObserver(target, observer2) {
  if (target[$get]) {
    let observers = target[$observers];
    if (!observers) {
      setHidden(target, $observers, observers = /* @__PURE__ */ new Set());
    }
    if (!observers.has(observer2)) {
      observers.add(observer2);
      if (target.observerAdded) {
        target.observerAdded(observers.size, observer2);
      }
    }
  }
  return observer2;
}
function removeFluidObserver(target, observer2) {
  const observers = target[$observers];
  if (observers && observers.has(observer2)) {
    const count3 = observers.size - 1;
    if (count3) {
      observers.delete(observer2);
    } else {
      target[$observers] = null;
    }
    if (target.observerRemoved) {
      target.observerRemoved(count3, observer2);
    }
  }
}
var setHidden = (target, key, value) => Object.defineProperty(target, key, {
  value,
  writable: true,
  configurable: true
});
var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
var variableToRgba = (input) => {
  const [token, fallback] = parseCSSVariable(input);
  if (!token || isSSR()) {
    return input;
  }
  const value = window.getComputedStyle(document.documentElement).getPropertyValue(token);
  if (value) {
    return value.trim();
  } else if (fallback && fallback.startsWith("--")) {
    const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
    if (value2) {
      return value2;
    } else {
      return input;
    }
  } else if (fallback && cssVariableRegex.test(fallback)) {
    return variableToRgba(fallback);
  } else if (fallback) {
    return fallback;
  }
  return input;
};
var parseCSSVariable = (current) => {
  const match = cssVariableRegex.exec(current);
  if (!match)
    return [,];
  const [, token, fallback] = match;
  return [token, fallback];
};
var namedColorRegex;
var rgbaRound = (_2, p1, p22, p32, p42) => `rgba(${Math.round(p1)}, ${Math.round(p22)}, ${Math.round(p32)}, ${p42})`;
var createStringInterpolator2 = (config2) => {
  if (!namedColorRegex)
    namedColorRegex = colors ? (
      // match color names, ignore partial matches
      new RegExp(`(${Object.keys(colors).join("|")})(?!\\w)`, "g")
    ) : (
      // never match
      /^\b$/
    );
  const output = config2.output.map((value) => {
    return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);
  });
  const keyframes = output.map((value) => value.match(numberRegex).map(Number));
  const outputRanges = keyframes[0].map(
    (_2, i6) => keyframes.map((values) => {
      if (!(i6 in values)) {
        throw Error('The arity of each "output" value must be equal');
      }
      return values[i6];
    })
  );
  const interpolators = outputRanges.map(
    (output2) => createInterpolator({ ...config2, output: output2 })
  );
  return (input) => {
    var _a;
    const missingUnit = !unitRegex.test(output[0]) && ((_a = output.find((value) => unitRegex.test(value))) == null ? void 0 : _a.replace(numberRegex, ""));
    let i6 = 0;
    return output[0].replace(
      numberRegex,
      () => `${interpolators[i6++](input)}${missingUnit || ""}`
    ).replace(rgbaRegex, rgbaRound);
  };
};
var prefix = "react-spring: ";
var once = (fn2) => {
  const func = fn2;
  let called = false;
  if (typeof func != "function") {
    throw new TypeError(`${prefix}once requires a function parameter`);
  }
  return (...args) => {
    if (!called) {
      func(...args);
      called = true;
    }
  };
};
var warnInterpolate = once(console.warn);
function deprecateInterpolate() {
  warnInterpolate(
    `${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`
  );
}
var warnDirectCall = once(console.warn);
function deprecateDirectCall() {
  warnDirectCall(
    `${prefix}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`
  );
}
function isAnimatedString(value) {
  return is.str(value) && (value[0] == "#" || /\d/.test(value) || // Do not identify a CSS variable as an AnimatedString if its SSR
  !isSSR() && cssVariableRegex.test(value) || value in (colors || {}));
}
var useIsomorphicLayoutEffect = isSSR() ? import_react4.useEffect : import_react4.useLayoutEffect;
var useIsMounted = () => {
  const isMounted = (0, import_react3.useRef)(false);
  useIsomorphicLayoutEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};
function useForceUpdate() {
  const update3 = (0, import_react2.useState)()[1];
  const isMounted = useIsMounted();
  return () => {
    if (isMounted.current) {
      update3(Math.random());
    }
  };
}
function useMemoOne(getResult, inputs) {
  const [initial] = (0, import_react5.useState)(
    () => ({
      inputs,
      result: getResult()
    })
  );
  const committed = (0, import_react5.useRef)();
  const prevCache = committed.current;
  let cache = prevCache;
  if (cache) {
    const useCache = Boolean(
      inputs && cache.inputs && areInputsEqual(inputs, cache.inputs)
    );
    if (!useCache) {
      cache = {
        inputs,
        result: getResult()
      };
    }
  } else {
    cache = initial;
  }
  (0, import_react5.useEffect)(() => {
    committed.current = cache;
    if (prevCache == initial) {
      initial.inputs = initial.result = void 0;
    }
  }, [cache]);
  return cache.result;
}
function areInputsEqual(next, prev) {
  if (next.length !== prev.length) {
    return false;
  }
  for (let i6 = 0; i6 < next.length; i6++) {
    if (next[i6] !== prev[i6]) {
      return false;
    }
  }
  return true;
}
var useOnce = (effect) => (0, import_react6.useEffect)(effect, emptyDeps);
var emptyDeps = [];
function usePrev(value) {
  const prevRef = (0, import_react7.useRef)();
  (0, import_react7.useEffect)(() => {
    prevRef.current = value;
  });
  return prevRef.current;
}

// node_modules/@react-spring/core/dist/react-spring_core.modern.mjs
var import_react10 = __toESM(require_react(), 1);

// node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs
var React = __toESM(require_react(), 1);
var import_react9 = __toESM(require_react(), 1);
var $node = Symbol.for("Animated:node");
var isAnimated = (value) => !!value && value[$node] === value;
var getAnimated = (owner) => owner && owner[$node];
var setAnimated = (owner, node) => defineHidden(owner, $node, node);
var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
var Animated = class {
  constructor() {
    setAnimated(this, this);
  }
  /** Get every `AnimatedValue` used by this node. */
  getPayload() {
    return this.payload || [];
  }
};
var AnimatedValue = class extends Animated {
  constructor(_value) {
    super();
    this._value = _value;
    this.done = true;
    this.durationProgress = 0;
    if (is.num(this._value)) {
      this.lastPosition = this._value;
    }
  }
  /** @internal */
  static create(value) {
    return new AnimatedValue(value);
  }
  getPayload() {
    return [this];
  }
  getValue() {
    return this._value;
  }
  setValue(value, step) {
    if (is.num(value)) {
      this.lastPosition = value;
      if (step) {
        value = Math.round(value / step) * step;
        if (this.done) {
          this.lastPosition = value;
        }
      }
    }
    if (this._value === value) {
      return false;
    }
    this._value = value;
    return true;
  }
  reset() {
    const { done } = this;
    this.done = false;
    if (is.num(this._value)) {
      this.elapsedTime = 0;
      this.durationProgress = 0;
      this.lastPosition = this._value;
      if (done)
        this.lastVelocity = null;
      this.v0 = null;
    }
  }
};
var AnimatedString = class extends AnimatedValue {
  constructor(value) {
    super(0);
    this._string = null;
    this._toString = createInterpolator({
      output: [value, value]
    });
  }
  /** @internal */
  static create(value) {
    return new AnimatedString(value);
  }
  getValue() {
    const value = this._string;
    return value == null ? this._string = this._toString(this._value) : value;
  }
  setValue(value) {
    if (is.str(value)) {
      if (value == this._string) {
        return false;
      }
      this._string = value;
      this._value = 1;
    } else if (super.setValue(value)) {
      this._string = null;
    } else {
      return false;
    }
    return true;
  }
  reset(goal) {
    if (goal) {
      this._toString = createInterpolator({
        output: [this.getValue(), goal]
      });
    }
    this._value = 0;
    super.reset();
  }
};
var TreeContext = { dependencies: null };
var AnimatedObject = class extends Animated {
  constructor(source) {
    super();
    this.source = source;
    this.setValue(source);
  }
  getValue(animated2) {
    const values = {};
    eachProp(this.source, (source, key) => {
      if (isAnimated(source)) {
        values[key] = source.getValue(animated2);
      } else if (hasFluidValue(source)) {
        values[key] = getFluidValue(source);
      } else if (!animated2) {
        values[key] = source;
      }
    });
    return values;
  }
  /** Replace the raw object data */
  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }
  reset() {
    if (this.payload) {
      each(this.payload, (node) => node.reset());
    }
  }
  /** Create a payload set. */
  _makePayload(source) {
    if (source) {
      const payload = /* @__PURE__ */ new Set();
      eachProp(source, this._addToPayload, payload);
      return Array.from(payload);
    }
  }
  /** Add to a payload set. */
  _addToPayload(source) {
    if (TreeContext.dependencies && hasFluidValue(source)) {
      TreeContext.dependencies.add(source);
    }
    const payload = getPayload(source);
    if (payload) {
      each(payload, (node) => this.add(node));
    }
  }
};
var AnimatedArray = class extends AnimatedObject {
  constructor(source) {
    super(source);
  }
  /** @internal */
  static create(source) {
    return new AnimatedArray(source);
  }
  getValue() {
    return this.source.map((node) => node.getValue());
  }
  setValue(source) {
    const payload = this.getPayload();
    if (source.length == payload.length) {
      return payload.map((node, i6) => node.setValue(source[i6])).some(Boolean);
    }
    super.setValue(source.map(makeAnimated));
    return true;
  }
};
function makeAnimated(value) {
  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;
  return nodeType.create(value);
}
function getAnimatedType(value) {
  const parentNode = getAnimated(value);
  return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;
}
var withAnimated = (Component, host2) => {
  const hasInstance = (
    // Function components must use "forwardRef" to avoid being
    // re-rendered on every animation frame.
    !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent
  );
  return (0, import_react9.forwardRef)((givenProps, givenRef) => {
    const instanceRef = (0, import_react9.useRef)(null);
    const ref = hasInstance && // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, import_react9.useCallback)(
      (value) => {
        instanceRef.current = updateRef(givenRef, value);
      },
      [givenRef]
    );
    const [props, deps] = getAnimatedState(givenProps, host2);
    const forceUpdate = useForceUpdate();
    const callback = () => {
      const instance = instanceRef.current;
      if (hasInstance && !instance) {
        return;
      }
      const didUpdate = instance ? host2.applyAnimatedValues(instance, props.getValue(true)) : false;
      if (didUpdate === false) {
        forceUpdate();
      }
    };
    const observer = new PropsObserver(callback, deps);
    const observerRef = (0, import_react9.useRef)();
    useIsomorphicLayoutEffect(() => {
      observerRef.current = observer;
      each(deps, (dep) => addFluidObserver(dep, observer));
      return () => {
        if (observerRef.current) {
          each(
            observerRef.current.deps,
            (dep) => removeFluidObserver(dep, observerRef.current)
          );
          raf.cancel(observerRef.current.update);
        }
      };
    });
    (0, import_react9.useEffect)(callback, []);
    useOnce(() => () => {
      const observer2 = observerRef.current;
      each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
    });
    const usedProps = host2.getComponentProps(props.getValue());
    return React.createElement(Component, { ...usedProps, ref });
  });
};
var PropsObserver = class {
  constructor(update3, deps) {
    this.update = update3;
    this.deps = deps;
  }
  eventObserved(event) {
    if (event.type == "change") {
      raf.write(this.update);
    }
  }
};
function getAnimatedState(props, host2) {
  const dependencies = /* @__PURE__ */ new Set();
  TreeContext.dependencies = dependencies;
  if (props.style)
    props = {
      ...props,
      style: host2.createAnimatedStyle(props.style)
    };
  props = new AnimatedObject(props);
  TreeContext.dependencies = null;
  return [props, dependencies];
}
function updateRef(ref, value) {
  if (ref) {
    if (is.fun(ref))
      ref(value);
    else
      ref.current = value;
  }
  return value;
}
var cacheKey = Symbol.for("AnimatedComponent");
var createHost = (components, {
  applyAnimatedValues: applyAnimatedValues2 = () => false,
  createAnimatedStyle = (style) => new AnimatedObject(style),
  getComponentProps = (props) => props
} = {}) => {
  const hostConfig = {
    applyAnimatedValues: applyAnimatedValues2,
    createAnimatedStyle,
    getComponentProps
  };
  const animated2 = (Component) => {
    const displayName = getDisplayName(Component) || "Anonymous";
    if (is.str(Component)) {
      Component = animated2[Component] || (animated2[Component] = withAnimated(Component, hostConfig));
    } else {
      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));
    }
    Component.displayName = `Animated(${displayName})`;
    return Component;
  };
  eachProp(components, (Component, key) => {
    if (is.arr(components)) {
      key = getDisplayName(Component);
    }
    animated2[key] = animated2(Component);
  });
  return {
    animated: animated2
  };
};
var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;

// node_modules/@react-spring/core/dist/react-spring_core.modern.mjs
var React2 = __toESM(require_react(), 1);
var import_react11 = __toESM(require_react(), 1);
var import_react12 = __toESM(require_react(), 1);
var React22 = __toESM(require_react(), 1);
var import_react13 = __toESM(require_react(), 1);
var import_react14 = __toESM(require_react(), 1);
function callProp(value, ...args) {
  return is.fun(value) ? value(...args) : value;
}
var matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));
var resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;
var getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;
var noopTransform = (value) => value;
var getDefaultProps = (props, transform = noopTransform) => {
  let keys = DEFAULT_PROPS;
  if (props.default && props.default !== true) {
    props = props.default;
    keys = Object.keys(props);
  }
  const defaults2 = {};
  for (const key of keys) {
    const value = transform(props[key], key);
    if (!is.und(value)) {
      defaults2[key] = value;
    }
  }
  return defaults2;
};
var DEFAULT_PROPS = [
  "config",
  "onProps",
  "onStart",
  "onChange",
  "onPause",
  "onResume",
  "onRest"
];
var RESERVED_PROPS = {
  config: 1,
  from: 1,
  to: 1,
  ref: 1,
  loop: 1,
  reset: 1,
  pause: 1,
  cancel: 1,
  reverse: 1,
  immediate: 1,
  default: 1,
  delay: 1,
  onProps: 1,
  onStart: 1,
  onChange: 1,
  onPause: 1,
  onResume: 1,
  onRest: 1,
  onResolve: 1,
  // Transition props
  items: 1,
  trail: 1,
  sort: 1,
  expires: 1,
  initial: 1,
  enter: 1,
  update: 1,
  leave: 1,
  children: 1,
  onDestroyed: 1,
  // Internal props
  keys: 1,
  callId: 1,
  parentId: 1
};
function getForwardProps(props) {
  const forward = {};
  let count3 = 0;
  eachProp(props, (value, prop) => {
    if (!RESERVED_PROPS[prop]) {
      forward[prop] = value;
      count3++;
    }
  });
  if (count3) {
    return forward;
  }
}
function inferTo(props) {
  const to22 = getForwardProps(props);
  if (to22) {
    const out = { to: to22 };
    eachProp(props, (val, key) => key in to22 || (out[key] = val));
    return out;
  }
  return { ...props };
}
function computeGoal(value) {
  value = getFluidValue(value);
  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? globals_exports.createStringInterpolator({
    range: [0, 1],
    output: [value, value]
  })(1) : value;
}
function hasProps(props) {
  for (const _2 in props)
    return true;
  return false;
}
function isAsyncTo(to22) {
  return is.fun(to22) || is.arr(to22) && is.obj(to22[0]);
}
function detachRefs(ctrl, ref) {
  var _a;
  (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);
  ref == null ? void 0 : ref.delete(ctrl);
}
function replaceRef(ctrl, ref) {
  var _a;
  if (ref && ctrl.ref !== ref) {
    (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);
    ref.add(ctrl);
    ctrl.ref = ref;
  }
}
var config = {
  default: { tension: 170, friction: 26 },
  gentle: { tension: 120, friction: 14 },
  wobbly: { tension: 180, friction: 12 },
  stiff: { tension: 210, friction: 20 },
  slow: { tension: 280, friction: 60 },
  molasses: { tension: 280, friction: 120 }
};
var defaults = {
  ...config.default,
  mass: 1,
  damping: 1,
  easing: easings.linear,
  clamp: false
};
var AnimationConfig = class {
  constructor() {
    this.velocity = 0;
    Object.assign(this, defaults);
  }
};
function mergeConfig(config2, newConfig, defaultConfig) {
  if (defaultConfig) {
    defaultConfig = { ...defaultConfig };
    sanitizeConfig(defaultConfig, newConfig);
    newConfig = { ...defaultConfig, ...newConfig };
  }
  sanitizeConfig(config2, newConfig);
  Object.assign(config2, newConfig);
  for (const key in defaults) {
    if (config2[key] == null) {
      config2[key] = defaults[key];
    }
  }
  let { frequency, damping } = config2;
  const { mass } = config2;
  if (!is.und(frequency)) {
    if (frequency < 0.01)
      frequency = 0.01;
    if (damping < 0)
      damping = 0;
    config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
    config2.friction = 4 * Math.PI * damping * mass / frequency;
  }
  return config2;
}
function sanitizeConfig(config2, props) {
  if (!is.und(props.decay)) {
    config2.duration = void 0;
  } else {
    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
      config2.duration = void 0;
      config2.decay = void 0;
    }
    if (isTensionConfig) {
      config2.frequency = void 0;
    }
  }
}
var emptyArray = [];
var Animation = class {
  constructor() {
    this.changed = false;
    this.values = emptyArray;
    this.toValues = null;
    this.fromValues = emptyArray;
    this.config = new AnimationConfig();
    this.immediate = false;
  }
};
function scheduleProps(callId, { key, props, defaultProps, state, actions }) {
  return new Promise((resolve, reject) => {
    let delay;
    let timeout;
    let cancel = matchProp(props.cancel ?? (defaultProps == null ? void 0 : defaultProps.cancel), key);
    if (cancel) {
      onStart();
    } else {
      if (!is.und(props.pause)) {
        state.paused = matchProp(props.pause, key);
      }
      let pause = defaultProps == null ? void 0 : defaultProps.pause;
      if (pause !== true) {
        pause = state.paused || matchProp(pause, key);
      }
      delay = callProp(props.delay || 0, key);
      if (pause) {
        state.resumeQueue.add(onResume);
        actions.pause();
      } else {
        actions.resume();
        onResume();
      }
    }
    function onPause() {
      state.resumeQueue.add(onResume);
      state.timeouts.delete(timeout);
      timeout.cancel();
      delay = timeout.time - raf.now();
    }
    function onResume() {
      if (delay > 0 && !globals_exports.skipAnimation) {
        state.delayed = true;
        timeout = raf.setTimeout(onStart, delay);
        state.pauseQueue.add(onPause);
        state.timeouts.add(timeout);
      } else {
        onStart();
      }
    }
    function onStart() {
      if (state.delayed) {
        state.delayed = false;
      }
      state.pauseQueue.delete(onPause);
      state.timeouts.delete(timeout);
      if (callId <= (state.cancelId || 0)) {
        cancel = true;
      }
      try {
        actions.start({ ...props, callId, cancel }, resolve);
      } catch (err) {
        reject(err);
      }
    }
  });
}
var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(
  target.get(),
  results.every((result) => result.finished)
);
var getNoopResult = (value) => ({
  value,
  noop: true,
  finished: true,
  cancelled: false
});
var getFinishedResult = (value, finished, cancelled = false) => ({
  value,
  finished,
  cancelled
});
var getCancelledResult = (value) => ({
  value,
  cancelled: true,
  finished: false
});
function runAsync(to22, props, state, target) {
  const { callId, parentId, onRest } = props;
  const { asyncTo: prevTo, promise: prevPromise } = state;
  if (!parentId && to22 === prevTo && !props.reset) {
    return prevPromise;
  }
  return state.promise = (async () => {
    state.asyncId = callId;
    state.asyncTo = to22;
    const defaultProps = getDefaultProps(
      props,
      (value, key) => (
        // The `onRest` prop is only called when the `runAsync` promise is resolved.
        key === "onRest" ? void 0 : value
      )
    );
    let preventBail;
    let bail;
    const bailPromise = new Promise(
      (resolve, reject) => (preventBail = resolve, bail = reject)
    );
    const bailIfEnded = (bailSignal) => {
      const bailResult = (
        // The `cancel` prop or `stop` method was used.
        callId <= (state.cancelId || 0) && getCancelledResult(target) || // The async `to` prop was replaced.
        callId !== state.asyncId && getFinishedResult(target, false)
      );
      if (bailResult) {
        bailSignal.result = bailResult;
        bail(bailSignal);
        throw bailSignal;
      }
    };
    const animate = (arg1, arg2) => {
      const bailSignal = new BailSignal();
      const skipAnimationSignal = new SkipAnimationSignal();
      return (async () => {
        if (globals_exports.skipAnimation) {
          stopAsync(state);
          skipAnimationSignal.result = getFinishedResult(target, false);
          bail(skipAnimationSignal);
          throw skipAnimationSignal;
        }
        bailIfEnded(bailSignal);
        const props2 = is.obj(arg1) ? { ...arg1 } : { ...arg2, to: arg1 };
        props2.parentId = callId;
        eachProp(defaultProps, (value, key) => {
          if (is.und(props2[key])) {
            props2[key] = value;
          }
        });
        const result2 = await target.start(props2);
        bailIfEnded(bailSignal);
        if (state.paused) {
          await new Promise((resume) => {
            state.resumeQueue.add(resume);
          });
        }
        return result2;
      })();
    };
    let result;
    if (globals_exports.skipAnimation) {
      stopAsync(state);
      return getFinishedResult(target, false);
    }
    try {
      let animating;
      if (is.arr(to22)) {
        animating = (async (queue) => {
          for (const props2 of queue) {
            await animate(props2);
          }
        })(to22);
      } else {
        animating = Promise.resolve(to22(animate, target.stop.bind(target)));
      }
      await Promise.all([animating.then(preventBail), bailPromise]);
      result = getFinishedResult(target.get(), true, false);
    } catch (err) {
      if (err instanceof BailSignal) {
        result = err.result;
      } else if (err instanceof SkipAnimationSignal) {
        result = err.result;
      } else {
        throw err;
      }
    } finally {
      if (callId == state.asyncId) {
        state.asyncId = parentId;
        state.asyncTo = parentId ? prevTo : void 0;
        state.promise = parentId ? prevPromise : void 0;
      }
    }
    if (is.fun(onRest)) {
      raf.batchedUpdates(() => {
        onRest(result, target, target.item);
      });
    }
    return result;
  })();
}
function stopAsync(state, cancelId) {
  flush(state.timeouts, (t8) => t8.cancel());
  state.pauseQueue.clear();
  state.resumeQueue.clear();
  state.asyncId = state.asyncTo = state.promise = void 0;
  if (cancelId)
    state.cancelId = cancelId;
}
var BailSignal = class extends Error {
  constructor() {
    super(
      "An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise."
    );
  }
};
var SkipAnimationSignal = class extends Error {
  constructor() {
    super("SkipAnimationSignal");
  }
};
var isFrameValue = (value) => value instanceof FrameValue;
var nextId = 1;
var FrameValue = class extends FluidValue {
  constructor() {
    super(...arguments);
    this.id = nextId++;
    this._priority = 0;
  }
  get priority() {
    return this._priority;
  }
  set priority(priority2) {
    if (this._priority != priority2) {
      this._priority = priority2;
      this._onPriorityChange(priority2);
    }
  }
  /** Get the current value */
  get() {
    const node = getAnimated(this);
    return node && node.getValue();
  }
  /** Create a spring that maps our value to another value */
  to(...args) {
    return globals_exports.to(this, args);
  }
  /** @deprecated Use the `to` method instead. */
  interpolate(...args) {
    deprecateInterpolate();
    return globals_exports.to(this, args);
  }
  toJSON() {
    return this.get();
  }
  observerAdded(count3) {
    if (count3 == 1)
      this._attach();
  }
  observerRemoved(count3) {
    if (count3 == 0)
      this._detach();
  }
  /** Called when the first child is added. */
  _attach() {
  }
  /** Called when the last child is removed. */
  _detach() {
  }
  /** Tell our children about our new value */
  _onChange(value, idle = false) {
    callFluidObservers(this, {
      type: "change",
      parent: this,
      value,
      idle
    });
  }
  /** Tell our children about our new priority */
  _onPriorityChange(priority2) {
    if (!this.idle) {
      frameLoop.sort(this);
    }
    callFluidObservers(this, {
      type: "priority",
      parent: this,
      priority: priority2
    });
  }
};
var $P = Symbol.for("SpringPhase");
var HAS_ANIMATED = 1;
var IS_ANIMATING = 2;
var IS_PAUSED = 4;
var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
var setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
var SpringValue = class extends FrameValue {
  constructor(arg1, arg2) {
    super();
    this.animation = new Animation();
    this.defaultProps = {};
    this._state = {
      paused: false,
      delayed: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._pendingCalls = /* @__PURE__ */ new Set();
    this._lastCallId = 0;
    this._lastToId = 0;
    this._memoizedDuration = 0;
    if (!is.und(arg1) || !is.und(arg2)) {
      const props = is.obj(arg1) ? { ...arg1 } : { ...arg2, from: arg1 };
      if (is.und(props.default)) {
        props.default = true;
      }
      this.start(props);
    }
  }
  /** Equals true when not advancing on each frame. */
  get idle() {
    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
  }
  get goal() {
    return getFluidValue(this.animation.to);
  }
  get velocity() {
    const node = getAnimated(this);
    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
  }
  /**
   * When true, this value has been animated at least once.
   */
  get hasAnimated() {
    return hasAnimated(this);
  }
  /**
   * When true, this value has an unfinished animation,
   * which is either active or paused.
   */
  get isAnimating() {
    return isAnimating(this);
  }
  /**
   * When true, all current and future animations are paused.
   */
  get isPaused() {
    return isPaused(this);
  }
  /**
   *
   *
   */
  get isDelayed() {
    return this._state.delayed;
  }
  /** Advance the current animation by a number of milliseconds */
  advance(dt2) {
    let idle = true;
    let changed = false;
    const anim = this.animation;
    let { toValues } = anim;
    const { config: config2 } = anim;
    const payload = getPayload(anim.to);
    if (!payload && hasFluidValue(anim.to)) {
      toValues = toArray(getFluidValue(anim.to));
    }
    anim.values.forEach((node2, i6) => {
      if (node2.done)
        return;
      const to22 = (
        // Animated strings always go from 0 to 1.
        node2.constructor == AnimatedString ? 1 : payload ? payload[i6].lastPosition : toValues[i6]
      );
      let finished = anim.immediate;
      let position = to22;
      if (!finished) {
        position = node2.lastPosition;
        if (config2.tension <= 0) {
          node2.done = true;
          return;
        }
        let elapsed = node2.elapsedTime += dt2;
        const from = anim.fromValues[i6];
        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config2.velocity) ? config2.velocity[i6] : config2.velocity;
        let velocity;
        const precision = config2.precision || (from == to22 ? 5e-3 : Math.min(1, Math.abs(to22 - from) * 1e-3));
        if (!is.und(config2.duration)) {
          let p5 = 1;
          if (config2.duration > 0) {
            if (this._memoizedDuration !== config2.duration) {
              this._memoizedDuration = config2.duration;
              if (node2.durationProgress > 0) {
                node2.elapsedTime = config2.duration * node2.durationProgress;
                elapsed = node2.elapsedTime += dt2;
              }
            }
            p5 = (config2.progress || 0) + elapsed / this._memoizedDuration;
            p5 = p5 > 1 ? 1 : p5 < 0 ? 0 : p5;
            node2.durationProgress = p5;
          }
          position = from + config2.easing(p5) * (to22 - from);
          velocity = (position - node2.lastPosition) / dt2;
          finished = p5 == 1;
        } else if (config2.decay) {
          const decay = config2.decay === true ? 0.998 : config2.decay;
          const e11 = Math.exp(-(1 - decay) * elapsed);
          position = from + v0 / (1 - decay) * (1 - e11);
          finished = Math.abs(node2.lastPosition - position) <= precision;
          velocity = v0 * e11;
        } else {
          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
          const restVelocity = config2.restVelocity || precision / 10;
          const bounceFactor = config2.clamp ? 0 : config2.bounce;
          const canBounce = !is.und(bounceFactor);
          const isGrowing = from == to22 ? node2.v0 > 0 : from < to22;
          let isMoving;
          let isBouncing = false;
          const step = 1;
          const numSteps = Math.ceil(dt2 / step);
          for (let n7 = 0; n7 < numSteps; ++n7) {
            isMoving = Math.abs(velocity) > restVelocity;
            if (!isMoving) {
              finished = Math.abs(to22 - position) <= precision;
              if (finished) {
                break;
              }
            }
            if (canBounce) {
              isBouncing = position == to22 || position > to22 == isGrowing;
              if (isBouncing) {
                velocity = -velocity * bounceFactor;
                position = to22;
              }
            }
            const springForce = -config2.tension * 1e-6 * (position - to22);
            const dampingForce = -config2.friction * 1e-3 * velocity;
            const acceleration = (springForce + dampingForce) / config2.mass;
            velocity = velocity + acceleration * step;
            position = position + velocity * step;
          }
        }
        node2.lastVelocity = velocity;
        if (Number.isNaN(position)) {
          console.warn(`Got NaN while animating:`, this);
          finished = true;
        }
      }
      if (payload && !payload[i6].done) {
        finished = false;
      }
      if (finished) {
        node2.done = true;
      } else {
        idle = false;
      }
      if (node2.setValue(position, config2.round)) {
        changed = true;
      }
    });
    const node = getAnimated(this);
    const currVal = node.getValue();
    if (idle) {
      const finalVal = getFluidValue(anim.to);
      if ((currVal !== finalVal || changed) && !config2.decay) {
        node.setValue(finalVal);
        this._onChange(finalVal);
      } else if (changed && config2.decay) {
        this._onChange(currVal);
      }
      this._stop();
    } else if (changed) {
      this._onChange(currVal);
    }
  }
  /** Set the current value, while stopping the current animation */
  set(value) {
    raf.batchedUpdates(() => {
      this._stop();
      this._focus(value);
      this._set(value);
    });
    return this;
  }
  /**
   * Freeze the active animation in time, as well as any updates merged
   * before `resume` is called.
   */
  pause() {
    this._update({ pause: true });
  }
  /** Resume the animation if paused. */
  resume() {
    this._update({ pause: false });
  }
  /** Skip to the end of the current animation. */
  finish() {
    if (isAnimating(this)) {
      const { to: to22, config: config2 } = this.animation;
      raf.batchedUpdates(() => {
        this._onStart();
        if (!config2.decay) {
          this._set(to22, false);
        }
        this._stop();
      });
    }
    return this;
  }
  /** Push props into the pending queue. */
  update(props) {
    const queue = this.queue || (this.queue = []);
    queue.push(props);
    return this;
  }
  start(to22, arg2) {
    let queue;
    if (!is.und(to22)) {
      queue = [is.obj(to22) ? to22 : { ...arg2, to: to22 }];
    } else {
      queue = this.queue || [];
      this.queue = [];
    }
    return Promise.all(
      queue.map((props) => {
        const up = this._update(props);
        return up;
      })
    ).then((results) => getCombinedResult(this, results));
  }
  /**
   * Stop the current animation, and cancel any delayed updates.
   *
   * Pass `true` to call `onRest` with `cancelled: true`.
   */
  stop(cancel) {
    const { to: to22 } = this.animation;
    this._focus(this.get());
    stopAsync(this._state, cancel && this._lastCallId);
    raf.batchedUpdates(() => this._stop(to22, cancel));
    return this;
  }
  /** Restart the animation. */
  reset() {
    this._update({ reset: true });
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      this._start();
    } else if (event.type == "priority") {
      this.priority = event.priority + 1;
    }
  }
  /**
   * Parse the `to` and `from` range from the given `props` object.
   *
   * This also ensures the initial value is available to animated components
   * during the render phase.
   */
  _prepareNode(props) {
    const key = this.key || "";
    let { to: to22, from } = props;
    to22 = is.obj(to22) ? to22[key] : to22;
    if (to22 == null || isAsyncTo(to22)) {
      to22 = void 0;
    }
    from = is.obj(from) ? from[key] : from;
    if (from == null) {
      from = void 0;
    }
    const range = { to: to22, from };
    if (!hasAnimated(this)) {
      if (props.reverse)
        [to22, from] = [from, to22];
      from = getFluidValue(from);
      if (!is.und(from)) {
        this._set(from);
      } else if (!getAnimated(this)) {
        this._set(to22);
      }
    }
    return range;
  }
  /** Every update is processed by this method before merging. */
  _update({ ...props }, isLoop) {
    const { key, defaultProps } = this;
    if (props.default)
      Object.assign(
        defaultProps,
        getDefaultProps(
          props,
          (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value
        )
      );
    mergeActiveFn(this, props, "onProps");
    sendEvent(this, "onProps", props, this);
    const range = this._prepareNode(props);
    if (Object.isFrozen(this)) {
      throw Error(
        "Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?"
      );
    }
    const state = this._state;
    return scheduleProps(++this._lastCallId, {
      key,
      props,
      defaultProps,
      state,
      actions: {
        pause: () => {
          if (!isPaused(this)) {
            setPausedBit(this, true);
            flushCalls(state.pauseQueue);
            sendEvent(
              this,
              "onPause",
              getFinishedResult(this, checkFinished(this, this.animation.to)),
              this
            );
          }
        },
        resume: () => {
          if (isPaused(this)) {
            setPausedBit(this, false);
            if (isAnimating(this)) {
              this._resume();
            }
            flushCalls(state.resumeQueue);
            sendEvent(
              this,
              "onResume",
              getFinishedResult(this, checkFinished(this, this.animation.to)),
              this
            );
          }
        },
        start: this._merge.bind(this, range)
      }
    }).then((result) => {
      if (props.loop && result.finished && !(isLoop && result.noop)) {
        const nextProps = createLoopUpdate(props);
        if (nextProps) {
          return this._update(nextProps, true);
        }
      }
      return result;
    });
  }
  /** Merge props into the current animation */
  _merge(range, props, resolve) {
    if (props.cancel) {
      this.stop(true);
      return resolve(getCancelledResult(this));
    }
    const hasToProp = !is.und(range.to);
    const hasFromProp = !is.und(range.from);
    if (hasToProp || hasFromProp) {
      if (props.callId > this._lastToId) {
        this._lastToId = props.callId;
      } else {
        return resolve(getCancelledResult(this));
      }
    }
    const { key, defaultProps, animation: anim } = this;
    const { to: prevTo, from: prevFrom } = anim;
    let { to: to22 = prevTo, from = prevFrom } = range;
    if (hasFromProp && !hasToProp && (!props.default || is.und(to22))) {
      to22 = from;
    }
    if (props.reverse)
      [to22, from] = [from, to22];
    const hasFromChanged = !isEqual(from, prevFrom);
    if (hasFromChanged) {
      anim.from = from;
    }
    from = getFluidValue(from);
    const hasToChanged = !isEqual(to22, prevTo);
    if (hasToChanged) {
      this._focus(to22);
    }
    const hasAsyncTo = isAsyncTo(props.to);
    const { config: config2 } = anim;
    const { decay, velocity } = config2;
    if (hasToProp || hasFromProp) {
      config2.velocity = 0;
    }
    if (props.config && !hasAsyncTo) {
      mergeConfig(
        config2,
        callProp(props.config, key),
        // Avoid calling the same "config" prop twice.
        props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0
      );
    }
    let node = getAnimated(this);
    if (!node || is.und(to22)) {
      return resolve(getFinishedResult(this, true));
    }
    const reset = (
      // When `reset` is undefined, the `from` prop implies `reset: true`,
      // except for declarative updates. When `reset` is defined, there
      // must exist a value to animate from.
      is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key)
    );
    const value = reset ? from : this.get();
    const goal = computeGoal(to22);
    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));
    if (hasToChanged) {
      const nodeType = getAnimatedType(to22);
      if (nodeType !== node.constructor) {
        if (immediate) {
          node = this._set(goal);
        } else
          throw Error(
            `Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`
          );
      }
    }
    const goalType = node.constructor;
    let started = hasFluidValue(to22);
    let finished = false;
    if (!started) {
      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
      if (hasToChanged || hasValueChanged) {
        finished = isEqual(computeGoal(value), goal);
        started = !finished;
      }
      if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config2.decay, decay) || !isEqual(config2.velocity, velocity)) {
        started = true;
      }
    }
    if (finished && isAnimating(this)) {
      if (anim.changed && !reset) {
        started = true;
      } else if (!started) {
        this._stop(prevTo);
      }
    }
    if (!hasAsyncTo) {
      if (started || hasFluidValue(prevTo)) {
        anim.values = node.getPayload();
        anim.toValues = hasFluidValue(to22) ? null : goalType == AnimatedString ? [1] : toArray(goal);
      }
      if (anim.immediate != immediate) {
        anim.immediate = immediate;
        if (!immediate && !reset) {
          this._set(prevTo);
        }
      }
      if (started) {
        const { onRest } = anim;
        each(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));
        const result = getFinishedResult(this, checkFinished(this, prevTo));
        flushCalls(this._pendingCalls, result);
        this._pendingCalls.add(resolve);
        if (anim.changed)
          raf.batchedUpdates(() => {
            var _a;
            anim.changed = !reset;
            onRest == null ? void 0 : onRest(result, this);
            if (reset) {
              callProp(defaultProps.onRest, result);
            } else {
              (_a = anim.onStart) == null ? void 0 : _a.call(anim, result, this);
            }
          });
      }
    }
    if (reset) {
      this._set(value);
    }
    if (hasAsyncTo) {
      resolve(runAsync(props.to, props, this._state, this));
    } else if (started) {
      this._start();
    } else if (isAnimating(this) && !hasToChanged) {
      this._pendingCalls.add(resolve);
    } else {
      resolve(getNoopResult(value));
    }
  }
  /** Update the `animation.to` value, which might be a `FluidValue` */
  _focus(value) {
    const anim = this.animation;
    if (value !== anim.to) {
      if (getFluidObservers(this)) {
        this._detach();
      }
      anim.to = value;
      if (getFluidObservers(this)) {
        this._attach();
      }
    }
  }
  _attach() {
    let priority2 = 0;
    const { to: to22 } = this.animation;
    if (hasFluidValue(to22)) {
      addFluidObserver(to22, this);
      if (isFrameValue(to22)) {
        priority2 = to22.priority + 1;
      }
    }
    this.priority = priority2;
  }
  _detach() {
    const { to: to22 } = this.animation;
    if (hasFluidValue(to22)) {
      removeFluidObserver(to22, this);
    }
  }
  /**
   * Update the current value from outside the frameloop,
   * and return the `Animated` node.
   */
  _set(arg, idle = true) {
    const value = getFluidValue(arg);
    if (!is.und(value)) {
      const oldNode = getAnimated(this);
      if (!oldNode || !isEqual(value, oldNode.getValue())) {
        const nodeType = getAnimatedType(value);
        if (!oldNode || oldNode.constructor != nodeType) {
          setAnimated(this, nodeType.create(value));
        } else {
          oldNode.setValue(value);
        }
        if (oldNode) {
          raf.batchedUpdates(() => {
            this._onChange(value, idle);
          });
        }
      }
    }
    return getAnimated(this);
  }
  _onStart() {
    const anim = this.animation;
    if (!anim.changed) {
      anim.changed = true;
      sendEvent(
        this,
        "onStart",
        getFinishedResult(this, checkFinished(this, anim.to)),
        this
      );
    }
  }
  _onChange(value, idle) {
    if (!idle) {
      this._onStart();
      callProp(this.animation.onChange, value, this);
    }
    callProp(this.defaultProps.onChange, value, this);
    super._onChange(value, idle);
  }
  // This method resets the animation state (even if already animating) to
  // ensure the latest from/to range is used, and it also ensures this spring
  // is added to the frameloop.
  _start() {
    const anim = this.animation;
    getAnimated(this).reset(getFluidValue(anim.to));
    if (!anim.immediate) {
      anim.fromValues = anim.values.map((node) => node.lastPosition);
    }
    if (!isAnimating(this)) {
      setActiveBit(this, true);
      if (!isPaused(this)) {
        this._resume();
      }
    }
  }
  _resume() {
    if (globals_exports.skipAnimation) {
      this.finish();
    } else {
      frameLoop.start(this);
    }
  }
  /**
   * Exit the frameloop and notify `onRest` listeners.
   *
   * Always wrap `_stop` calls with `batchedUpdates`.
   */
  _stop(goal, cancel) {
    if (isAnimating(this)) {
      setActiveBit(this, false);
      const anim = this.animation;
      each(anim.values, (node) => {
        node.done = true;
      });
      if (anim.toValues) {
        anim.onChange = anim.onPause = anim.onResume = void 0;
      }
      callFluidObservers(this, {
        type: "idle",
        parent: this
      });
      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal ?? anim.to));
      flushCalls(this._pendingCalls, result);
      if (anim.changed) {
        anim.changed = false;
        sendEvent(this, "onRest", result, this);
      }
    }
  }
};
function checkFinished(target, to22) {
  const goal = computeGoal(to22);
  const value = computeGoal(target.get());
  return isEqual(value, goal);
}
function createLoopUpdate(props, loop2 = props.loop, to22 = props.to) {
  const loopRet = callProp(loop2);
  if (loopRet) {
    const overrides = loopRet !== true && inferTo(loopRet);
    const reverse3 = (overrides || props).reverse;
    const reset = !overrides || overrides.reset;
    return createUpdate({
      ...props,
      loop: loop2,
      // Avoid updating default props when looping.
      default: false,
      // Never loop the `pause` prop.
      pause: void 0,
      // For the "reverse" prop to loop as expected, the "to" prop
      // must be undefined. The "reverse" prop is ignored when the
      // "to" prop is an array or function.
      to: !reverse3 || isAsyncTo(to22) ? to22 : void 0,
      // Ignore the "from" prop except on reset.
      from: reset ? props.from : void 0,
      reset,
      // The "loop" prop can return a "useSpring" props object to
      // override any of the original props.
      ...overrides
    });
  }
}
function createUpdate(props) {
  const { to: to22, from } = props = inferTo(props);
  const keys = /* @__PURE__ */ new Set();
  if (is.obj(to22))
    findDefined(to22, keys);
  if (is.obj(from))
    findDefined(from, keys);
  props.keys = keys.size ? Array.from(keys) : null;
  return props;
}
function declareUpdate(props) {
  const update22 = createUpdate(props);
  if (is.und(update22.default)) {
    update22.default = getDefaultProps(update22);
  }
  return update22;
}
function findDefined(values, keys) {
  eachProp(values, (value, key) => value != null && keys.add(key));
}
var ACTIVE_EVENTS = [
  "onStart",
  "onRest",
  "onChange",
  "onPause",
  "onResume"
];
function mergeActiveFn(target, props, type) {
  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;
}
function sendEvent(target, type, ...args) {
  var _a, _b, _c, _d;
  (_b = (_a = target.animation)[type]) == null ? void 0 : _b.call(_a, ...args);
  (_d = (_c = target.defaultProps)[type]) == null ? void 0 : _d.call(_c, ...args);
}
var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
var nextId2 = 1;
var Controller = class {
  constructor(props, flush3) {
    this.id = nextId2++;
    this.springs = {};
    this.queue = [];
    this._lastAsyncId = 0;
    this._active = /* @__PURE__ */ new Set();
    this._changed = /* @__PURE__ */ new Set();
    this._started = false;
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._events = {
      onStart: /* @__PURE__ */ new Map(),
      onChange: /* @__PURE__ */ new Map(),
      onRest: /* @__PURE__ */ new Map()
    };
    this._onFrame = this._onFrame.bind(this);
    if (flush3) {
      this._flush = flush3;
    }
    if (props) {
      this.start({ default: true, ...props });
    }
  }
  /**
   * Equals `true` when no spring values are in the frameloop, and
   * no async animation is currently active.
   */
  get idle() {
    return !this._state.asyncTo && Object.values(this.springs).every((spring) => {
      return spring.idle && !spring.isDelayed && !spring.isPaused;
    });
  }
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
  }
  /** Get the current values of our springs */
  get() {
    const values = {};
    this.each((spring, key) => values[key] = spring.get());
    return values;
  }
  /** Set the current values without animating. */
  set(values) {
    for (const key in values) {
      const value = values[key];
      if (!is.und(value)) {
        this.springs[key].set(value);
      }
    }
  }
  /** Push an update onto the queue of each value. */
  update(props) {
    if (props) {
      this.queue.push(createUpdate(props));
    }
    return this;
  }
  /**
   * Start the queued animations for every spring, and resolve the returned
   * promise once all queued animations have finished or been cancelled.
   *
   * When you pass a queue (instead of nothing), that queue is used instead of
   * the queued animations added with the `update` method, which are left alone.
   */
  start(props) {
    let { queue } = this;
    if (props) {
      queue = toArray(props).map(createUpdate);
    } else {
      this.queue = [];
    }
    if (this._flush) {
      return this._flush(this, queue);
    }
    prepareKeys(this, queue);
    return flushUpdateQueue(this, queue);
  }
  /** @internal */
  stop(arg, keys) {
    if (arg !== !!arg) {
      keys = arg;
    }
    if (keys) {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].stop(!!arg));
    } else {
      stopAsync(this._state, this._lastAsyncId);
      this.each((spring) => spring.stop(!!arg));
    }
    return this;
  }
  /** Freeze the active animation in time */
  pause(keys) {
    if (is.und(keys)) {
      this.start({ pause: true });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].pause());
    }
    return this;
  }
  /** Resume the animation if paused. */
  resume(keys) {
    if (is.und(keys)) {
      this.start({ pause: false });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].resume());
    }
    return this;
  }
  /** Call a function once per spring value */
  each(iterator) {
    eachProp(this.springs, iterator);
  }
  /** @internal Called at the end of every animation frame */
  _onFrame() {
    const { onStart, onChange, onRest } = this._events;
    const active = this._active.size > 0;
    const changed = this._changed.size > 0;
    if (active && !this._started || changed && !this._started) {
      this._started = true;
      flush(onStart, ([onStart2, result]) => {
        result.value = this.get();
        onStart2(result, this, this._item);
      });
    }
    const idle = !active && this._started;
    const values = changed || idle && onRest.size ? this.get() : null;
    if (changed && onChange.size) {
      flush(onChange, ([onChange2, result]) => {
        result.value = values;
        onChange2(result, this, this._item);
      });
    }
    if (idle) {
      this._started = false;
      flush(onRest, ([onRest2, result]) => {
        result.value = values;
        onRest2(result, this, this._item);
      });
    }
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      this._changed.add(event.parent);
      if (!event.idle) {
        this._active.add(event.parent);
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else
      return;
    raf.onFrame(this._onFrame);
  }
};
function flushUpdateQueue(ctrl, queue) {
  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then(
    (results) => getCombinedResult(ctrl, results)
  );
}
async function flushUpdate(ctrl, props, isLoop) {
  const { keys, to: to22, from, loop: loop2, onRest, onResolve } = props;
  const defaults2 = is.obj(props.default) && props.default;
  if (loop2) {
    props.loop = false;
  }
  if (to22 === false)
    props.to = null;
  if (from === false)
    props.from = null;
  const asyncTo = is.arr(to22) || is.fun(to22) ? to22 : void 0;
  if (asyncTo) {
    props.to = void 0;
    props.onRest = void 0;
    if (defaults2) {
      defaults2.onRest = void 0;
    }
  } else {
    each(BATCHED_EVENTS, (key) => {
      const handler = props[key];
      if (is.fun(handler)) {
        const queue = ctrl["_events"][key];
        props[key] = ({ finished, cancelled }) => {
          const result2 = queue.get(handler);
          if (result2) {
            if (!finished)
              result2.finished = false;
            if (cancelled)
              result2.cancelled = true;
          } else {
            queue.set(handler, {
              value: null,
              finished: finished || false,
              cancelled: cancelled || false
            });
          }
        };
        if (defaults2) {
          defaults2[key] = props[key];
        }
      }
    });
  }
  const state = ctrl["_state"];
  if (props.pause === !state.paused) {
    state.paused = props.pause;
    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
  } else if (state.paused) {
    props.pause = true;
  }
  const promises = (keys || Object.keys(ctrl.springs)).map(
    (key) => ctrl.springs[key].start(props)
  );
  const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
  if (asyncTo || cancel && state.asyncId) {
    promises.push(
      scheduleProps(++ctrl["_lastAsyncId"], {
        props,
        state,
        actions: {
          pause: noop,
          resume: noop,
          start(props2, resolve) {
            if (cancel) {
              stopAsync(state, ctrl["_lastAsyncId"]);
              resolve(getCancelledResult(ctrl));
            } else {
              props2.onRest = onRest;
              resolve(
                runAsync(
                  asyncTo,
                  props2,
                  state,
                  ctrl
                )
              );
            }
          }
        }
      })
    );
  }
  if (state.paused) {
    await new Promise((resume) => {
      state.resumeQueue.add(resume);
    });
  }
  const result = getCombinedResult(ctrl, await Promise.all(promises));
  if (loop2 && result.finished && !(isLoop && result.noop)) {
    const nextProps = createLoopUpdate(props, loop2, to22);
    if (nextProps) {
      prepareKeys(ctrl, [nextProps]);
      return flushUpdate(ctrl, nextProps, true);
    }
  }
  if (onResolve) {
    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
  }
  return result;
}
function getSprings(ctrl, props) {
  const springs = { ...ctrl.springs };
  if (props) {
    each(toArray(props), (props2) => {
      if (is.und(props2.keys)) {
        props2 = createUpdate(props2);
      }
      if (!is.obj(props2.to)) {
        props2 = { ...props2, to: void 0 };
      }
      prepareSprings(springs, props2, (key) => {
        return createSpring(key);
      });
    });
  }
  setSprings(ctrl, springs);
  return springs;
}
function setSprings(ctrl, springs) {
  eachProp(springs, (spring, key) => {
    if (!ctrl.springs[key]) {
      ctrl.springs[key] = spring;
      addFluidObserver(spring, ctrl);
    }
  });
}
function createSpring(key, observer) {
  const spring = new SpringValue();
  spring.key = key;
  if (observer) {
    addFluidObserver(spring, observer);
  }
  return spring;
}
function prepareSprings(springs, props, create) {
  if (props.keys) {
    each(props.keys, (key) => {
      const spring = springs[key] || (springs[key] = create(key));
      spring["_prepareNode"](props);
    });
  }
}
function prepareKeys(ctrl, queue) {
  each(queue, (props) => {
    prepareSprings(ctrl.springs, props, (key) => {
      return createSpring(key, ctrl);
    });
  });
}
var SpringContext = ({
  children,
  ...props
}) => {
  const inherited = (0, import_react11.useContext)(ctx);
  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
  props = useMemoOne(() => ({ pause, immediate }), [pause, immediate]);
  const { Provider } = ctx;
  return React2.createElement(Provider, { value: props }, children);
};
var ctx = makeContext(SpringContext, {});
SpringContext.Provider = ctx.Provider;
SpringContext.Consumer = ctx.Consumer;
function makeContext(target, init) {
  Object.assign(target, React2.createContext(init));
  target.Provider._context = target;
  target.Consumer._context = target;
  return target;
}
var SpringRef = () => {
  const current = [];
  const SpringRef2 = function(props) {
    deprecateDirectCall();
    const results = [];
    each(current, (ctrl, i6) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update22 = _getProps(props, ctrl, i6);
        if (update22) {
          results.push(ctrl.start(update22));
        }
      }
    });
    return results;
  };
  SpringRef2.current = current;
  SpringRef2.add = function(ctrl) {
    if (!current.includes(ctrl)) {
      current.push(ctrl);
    }
  };
  SpringRef2.delete = function(ctrl) {
    const i6 = current.indexOf(ctrl);
    if (~i6)
      current.splice(i6, 1);
  };
  SpringRef2.pause = function() {
    each(current, (ctrl) => ctrl.pause(...arguments));
    return this;
  };
  SpringRef2.resume = function() {
    each(current, (ctrl) => ctrl.resume(...arguments));
    return this;
  };
  SpringRef2.set = function(values) {
    each(current, (ctrl, i6) => {
      const update22 = is.fun(values) ? values(i6, ctrl) : values;
      if (update22) {
        ctrl.set(update22);
      }
    });
  };
  SpringRef2.start = function(props) {
    const results = [];
    each(current, (ctrl, i6) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update22 = this._getProps(props, ctrl, i6);
        if (update22) {
          results.push(ctrl.start(update22));
        }
      }
    });
    return results;
  };
  SpringRef2.stop = function() {
    each(current, (ctrl) => ctrl.stop(...arguments));
    return this;
  };
  SpringRef2.update = function(props) {
    each(current, (ctrl, i6) => ctrl.update(this._getProps(props, ctrl, i6)));
    return this;
  };
  const _getProps = function(arg, ctrl, index3) {
    return is.fun(arg) ? arg(index3, ctrl) : arg;
  };
  SpringRef2._getProps = _getProps;
  return SpringRef2;
};
function useSprings(length, props, deps) {
  const propsFn = is.fun(props) && props;
  if (propsFn && !deps)
    deps = [];
  const ref = (0, import_react10.useMemo)(
    () => propsFn || arguments.length == 3 ? SpringRef() : void 0,
    []
  );
  const layoutId = (0, import_react10.useRef)(0);
  const forceUpdate = useForceUpdate();
  const state = (0, import_react10.useMemo)(
    () => ({
      ctrls: [],
      queue: [],
      flush(ctrl, updates2) {
        const springs2 = getSprings(ctrl, updates2);
        const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);
        return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {
          setSprings(ctrl, springs2);
          state.queue.push(() => {
            resolve(flushUpdateQueue(ctrl, updates2));
          });
          forceUpdate();
        });
      }
    }),
    []
  );
  const ctrls = (0, import_react10.useRef)([...state.ctrls]);
  const updates = [];
  const prevLength = usePrev(length) || 0;
  (0, import_react10.useMemo)(() => {
    each(ctrls.current.slice(length, prevLength), (ctrl) => {
      detachRefs(ctrl, ref);
      ctrl.stop(true);
    });
    ctrls.current.length = length;
    declareUpdates(prevLength, length);
  }, [length]);
  (0, import_react10.useMemo)(() => {
    declareUpdates(0, Math.min(prevLength, length));
  }, deps);
  function declareUpdates(startIndex, endIndex) {
    for (let i6 = startIndex; i6 < endIndex; i6++) {
      const ctrl = ctrls.current[i6] || (ctrls.current[i6] = new Controller(null, state.flush));
      const update22 = propsFn ? propsFn(i6, ctrl) : props[i6];
      if (update22) {
        updates[i6] = declareUpdate(update22);
      }
    }
  }
  const springs = ctrls.current.map((ctrl, i6) => getSprings(ctrl, updates[i6]));
  const context = (0, import_react10.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useIsomorphicLayoutEffect(() => {
    layoutId.current++;
    state.ctrls = ctrls.current;
    const { queue } = state;
    if (queue.length) {
      state.queue = [];
      each(queue, (cb) => cb());
    }
    each(ctrls.current, (ctrl, i6) => {
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext) {
        ctrl.start({ default: context });
      }
      const update22 = updates[i6];
      if (update22) {
        replaceRef(ctrl, update22.ref);
        if (ctrl.ref) {
          ctrl.queue.push(update22);
        } else {
          ctrl.start(update22);
        }
      }
    });
  });
  useOnce(() => () => {
    each(state.ctrls, (ctrl) => ctrl.stop(true));
  });
  const values = springs.map((x3) => ({ ...x3 }));
  return ref ? [values, ref] : values;
}
function useSpring(props, deps) {
  const isFn = is.fun(props);
  const [[values], ref] = useSprings(
    1,
    isFn ? props : [props],
    isFn ? deps || [] : deps
  );
  return isFn || arguments.length == 2 ? [values, ref] : values;
}
function useTransition(data, props, deps) {
  const propsFn = is.fun(props) && props;
  const {
    reset,
    sort: sort3,
    trail = 0,
    expires = true,
    exitBeforeEnter = false,
    onDestroyed,
    ref: propsRef,
    config: propsConfig
  } = propsFn ? propsFn() : props;
  const ref = (0, import_react13.useMemo)(
    () => propsFn || arguments.length == 3 ? SpringRef() : void 0,
    []
  );
  const items = toArray(data);
  const transitions = [];
  const usedTransitions = (0, import_react13.useRef)(null);
  const prevTransitions = reset ? null : usedTransitions.current;
  useIsomorphicLayoutEffect(() => {
    usedTransitions.current = transitions;
  });
  useOnce(() => {
    each(transitions, (t8) => {
      ref == null ? void 0 : ref.add(t8.ctrl);
      t8.ctrl.ref = ref;
    });
    return () => {
      each(usedTransitions.current, (t8) => {
        if (t8.expired) {
          clearTimeout(t8.expirationId);
        }
        detachRefs(t8.ctrl, ref);
        t8.ctrl.stop(true);
      });
    };
  });
  const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);
  const expired = reset && usedTransitions.current || [];
  useIsomorphicLayoutEffect(
    () => each(expired, ({ ctrl, item, key }) => {
      detachRefs(ctrl, ref);
      callProp(onDestroyed, item, key);
    })
  );
  const reused = [];
  if (prevTransitions)
    each(prevTransitions, (t8, i6) => {
      if (t8.expired) {
        clearTimeout(t8.expirationId);
        expired.push(t8);
      } else {
        i6 = reused[i6] = keys.indexOf(t8.key);
        if (~i6)
          transitions[i6] = t8;
      }
    });
  each(items, (item, i6) => {
    if (!transitions[i6]) {
      transitions[i6] = {
        key: keys[i6],
        item,
        phase: "mount",
        ctrl: new Controller()
      };
      transitions[i6].ctrl.item = item;
    }
  });
  if (reused.length) {
    let i6 = -1;
    const { leave } = propsFn ? propsFn() : props;
    each(reused, (keyIndex, prevIndex) => {
      const t8 = prevTransitions[prevIndex];
      if (~keyIndex) {
        i6 = transitions.indexOf(t8);
        transitions[i6] = { ...t8, item: items[keyIndex] };
      } else if (leave) {
        transitions.splice(++i6, 0, t8);
      }
    });
  }
  if (is.fun(sort3)) {
    transitions.sort((a5, b5) => sort3(a5.item, b5.item));
  }
  let delay = -trail;
  const forceUpdate = useForceUpdate();
  const defaultProps = getDefaultProps(props);
  const changes = /* @__PURE__ */ new Map();
  const exitingTransitions = (0, import_react13.useRef)(/* @__PURE__ */ new Map());
  const forceChange = (0, import_react13.useRef)(false);
  each(transitions, (t8, i6) => {
    const key = t8.key;
    const prevPhase = t8.phase;
    const p5 = propsFn ? propsFn() : props;
    let to22;
    let phase;
    const propsDelay = callProp(p5.delay || 0, key);
    if (prevPhase == "mount") {
      to22 = p5.enter;
      phase = "enter";
    } else {
      const isLeave = keys.indexOf(key) < 0;
      if (prevPhase != "leave") {
        if (isLeave) {
          to22 = p5.leave;
          phase = "leave";
        } else if (to22 = p5.update) {
          phase = "update";
        } else
          return;
      } else if (!isLeave) {
        to22 = p5.enter;
        phase = "enter";
      } else
        return;
    }
    to22 = callProp(to22, t8.item, i6);
    to22 = is.obj(to22) ? inferTo(to22) : { to: to22 };
    if (!to22.config) {
      const config2 = propsConfig || defaultProps.config;
      to22.config = callProp(config2, t8.item, i6, phase);
    }
    delay += trail;
    const payload = {
      ...defaultProps,
      // we need to add our props.delay value you here.
      delay: propsDelay + delay,
      ref: propsRef,
      immediate: p5.immediate,
      // This prevents implied resets.
      reset: false,
      // Merge any phase-specific props.
      ...to22
    };
    if (phase == "enter" && is.und(payload.from)) {
      const p22 = propsFn ? propsFn() : props;
      const from = is.und(p22.initial) || prevTransitions ? p22.from : p22.initial;
      payload.from = callProp(from, t8.item, i6);
    }
    const { onResolve } = payload;
    payload.onResolve = (result) => {
      callProp(onResolve, result);
      const transitions2 = usedTransitions.current;
      const t22 = transitions2.find((t32) => t32.key === key);
      if (!t22)
        return;
      if (result.cancelled && t22.phase != "update") {
        return;
      }
      if (t22.ctrl.idle) {
        const idle = transitions2.every((t32) => t32.ctrl.idle);
        if (t22.phase == "leave") {
          const expiry = callProp(expires, t22.item);
          if (expiry !== false) {
            const expiryMs = expiry === true ? 0 : expiry;
            t22.expired = true;
            if (!idle && expiryMs > 0) {
              if (expiryMs <= 2147483647)
                t22.expirationId = setTimeout(forceUpdate, expiryMs);
              return;
            }
          }
        }
        if (idle && transitions2.some((t32) => t32.expired)) {
          exitingTransitions.current.delete(t22);
          if (exitBeforeEnter) {
            forceChange.current = true;
          }
          forceUpdate();
        }
      }
    };
    const springs = getSprings(t8.ctrl, payload);
    if (phase === "leave" && exitBeforeEnter) {
      exitingTransitions.current.set(t8, { phase, springs, payload });
    } else {
      changes.set(t8, { phase, springs, payload });
    }
  });
  const context = (0, import_react13.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useIsomorphicLayoutEffect(() => {
    if (hasContext) {
      each(transitions, (t8) => {
        t8.ctrl.start({ default: context });
      });
    }
  }, [context]);
  each(changes, (_2, t8) => {
    if (exitingTransitions.current.size) {
      const ind = transitions.findIndex((state) => state.key === t8.key);
      transitions.splice(ind, 1);
    }
  });
  useIsomorphicLayoutEffect(
    () => {
      each(
        exitingTransitions.current.size ? exitingTransitions.current : changes,
        ({ phase, payload }, t8) => {
          const { ctrl } = t8;
          t8.phase = phase;
          ref == null ? void 0 : ref.add(ctrl);
          if (hasContext && phase == "enter") {
            ctrl.start({ default: context });
          }
          if (payload) {
            replaceRef(ctrl, payload.ref);
            if ((ctrl.ref || ref) && !forceChange.current) {
              ctrl.update(payload);
            } else {
              ctrl.start(payload);
              if (forceChange.current) {
                forceChange.current = false;
              }
            }
          }
        }
      );
    },
    reset ? void 0 : deps
  );
  const renderTransitions = (render) => React22.createElement(React22.Fragment, null, transitions.map((t8, i6) => {
    const { springs } = changes.get(t8) || t8.ctrl;
    const elem = render({ ...springs }, t8.item, t8, i6);
    return elem && elem.type ? React22.createElement(
      elem.type,
      {
        ...elem.props,
        key: is.str(t8.key) || is.num(t8.key) ? t8.key : t8.ctrl.id,
        ref: elem.ref
      }
    ) : elem;
  }));
  return ref ? [renderTransitions, ref] : renderTransitions;
}
var nextKey = 1;
function getKeys(items, { key, keys = key }, prevTransitions) {
  if (keys === null) {
    const reused = /* @__PURE__ */ new Set();
    return items.map((item) => {
      const t8 = prevTransitions && prevTransitions.find(
        (t22) => t22.item === item && t22.phase !== "leave" && !reused.has(t22)
      );
      if (t8) {
        reused.add(t8);
        return t8.key;
      }
      return nextKey++;
    });
  }
  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);
}
var Interpolation = class extends FrameValue {
  constructor(source, args) {
    super();
    this.source = source;
    this.idle = true;
    this._active = /* @__PURE__ */ new Set();
    this.calc = createInterpolator(...args);
    const value = this._get();
    const nodeType = getAnimatedType(value);
    setAnimated(this, nodeType.create(value));
  }
  advance(_dt) {
    const value = this._get();
    const oldValue = this.get();
    if (!isEqual(value, oldValue)) {
      getAnimated(this).setValue(value);
      this._onChange(value, this.idle);
    }
    if (!this.idle && checkIdle(this._active)) {
      becomeIdle(this);
    }
  }
  _get() {
    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));
    return this.calc(...inputs);
  }
  _start() {
    if (this.idle && !checkIdle(this._active)) {
      this.idle = false;
      each(getPayload(this), (node) => {
        node.done = false;
      });
      if (globals_exports.skipAnimation) {
        raf.batchedUpdates(() => this.advance());
        becomeIdle(this);
      } else {
        frameLoop.start(this);
      }
    }
  }
  // Observe our sources only when we're observed.
  _attach() {
    let priority2 = 1;
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        addFluidObserver(source, this);
      }
      if (isFrameValue(source)) {
        if (!source.idle) {
          this._active.add(source);
        }
        priority2 = Math.max(priority2, source.priority + 1);
      }
    });
    this.priority = priority2;
    this._start();
  }
  // Stop observing our sources once we have no observers.
  _detach() {
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        removeFluidObserver(source, this);
      }
    });
    this._active.clear();
    becomeIdle(this);
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      if (event.idle) {
        this.advance();
      } else {
        this._active.add(event.parent);
        this._start();
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else if (event.type == "priority") {
      this.priority = toArray(this.source).reduce(
        (highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1),
        0
      );
    }
  }
};
function isIdle(source) {
  return source.idle !== false;
}
function checkIdle(active) {
  return !active.size || Array.from(active).every(isIdle);
}
function becomeIdle(self) {
  if (!self.idle) {
    self.idle = true;
    each(getPayload(self), (node) => {
      node.done = true;
    });
    callFluidObservers(self, {
      type: "idle",
      parent: self
    });
  }
}
var to2 = (source, ...args) => new Interpolation(source, args);
globals_exports.assign({
  createStringInterpolator: createStringInterpolator2,
  to: (source, args) => new Interpolation(source, args)
});
var update2 = frameLoop.advance;

// node_modules/@react-spring/web/dist/react-spring_web.modern.mjs
var import_react_dom = __toESM(require_react_dom(), 1);
var isCustomPropRE = /^--/;
function dangerousStyleValue(name, value) {
  if (value == null || typeof value === "boolean" || value === "")
    return "";
  if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))
    return value + "px";
  return ("" + value).trim();
}
var attributeCache = {};
function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const {
    className,
    style,
    children,
    scrollTop,
    scrollLeft,
    viewBox,
    ...attributes
  } = props;
  const values = Object.values(attributes);
  const names = Object.keys(attributes).map(
    (name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(
      /([A-Z])/g,
      // Attributes are written in dash case
      (n7) => "-" + n7.toLowerCase()
    ))
  );
  if (children !== void 0) {
    instance.textContent = children;
  }
  for (const name in style) {
    if (style.hasOwnProperty(name)) {
      const value = dangerousStyleValue(name, style[name]);
      if (isCustomPropRE.test(name)) {
        instance.style.setProperty(name, value);
      } else {
        instance.style[name] = value;
      }
    }
  }
  names.forEach((name, i6) => {
    instance.setAttribute(name, values[i6]);
  });
  if (className !== void 0) {
    instance.className = className;
  }
  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
  if (viewBox !== void 0) {
    instance.setAttribute("viewBox", viewBox);
  }
}
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix2, key) => prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
var prefixes = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes.forEach((prefix2) => acc[prefixKey(prefix2, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;
var addUnit = (value, unit) => is.num(value) && value !== 0 ? value + unit : value;
var isValueIdentity = (value, id) => is.arr(value) ? value.every((v5) => isValueIdentity(v5, id)) : is.num(value) ? value === id : parseFloat(value) === id;
var AnimatedStyle = class extends AnimatedObject {
  constructor({ x: x3, y: y4, z: z6, ...style }) {
    const inputs = [];
    const transforms = [];
    if (x3 || y4 || z6) {
      inputs.push([x3 || 0, y4 || 0, z6 || 0]);
      transforms.push((xyz) => [
        `translate3d(${xyz.map((v5) => addUnit(v5, "px")).join(",")})`,
        // prettier-ignore
        isValueIdentity(xyz, 0)
      ]);
    }
    eachProp(style, (value, key) => {
      if (key === "transform") {
        inputs.push([value || ""]);
        transforms.push((transform) => [transform, transform === ""]);
      } else if (domTransforms.test(key)) {
        delete style[key];
        if (is.und(value))
          return;
        const unit = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
        inputs.push(toArray(value));
        transforms.push(
          key === "rotate3d" ? ([x22, y22, z22, deg]) => [
            `rotate3d(${x22},${y22},${z22},${addUnit(deg, unit)})`,
            isValueIdentity(deg, 0)
          ] : (input) => [
            `${key}(${input.map((v5) => addUnit(v5, unit)).join(",")})`,
            isValueIdentity(input, key.startsWith("scale") ? 1 : 0)
          ]
        );
      }
    });
    if (inputs.length) {
      style.transform = new FluidTransform(inputs, transforms);
    }
    super(style);
  }
};
var FluidTransform = class extends FluidValue {
  constructor(inputs, transforms) {
    super();
    this.inputs = inputs;
    this.transforms = transforms;
    this._value = null;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform = "";
    let identity = true;
    each(this.inputs, (input, i6) => {
      const arg1 = getFluidValue(input[0]);
      const [t8, id] = this.transforms[i6](
        is.arr(arg1) ? arg1 : input.map(getFluidValue)
      );
      transform += " " + t8;
      identity = identity && id;
    });
    return identity ? "none" : transform;
  }
  // Start observing our inputs once we have an observer.
  observerAdded(count3) {
    if (count3 == 1)
      each(
        this.inputs,
        (input) => each(
          input,
          (value) => hasFluidValue(value) && addFluidObserver(value, this)
        )
      );
  }
  // Stop observing our inputs once we have no observers.
  observerRemoved(count3) {
    if (count3 == 0)
      each(
        this.inputs,
        (input) => each(
          input,
          (value) => hasFluidValue(value) && removeFluidObserver(value, this)
        )
      );
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers(this, event);
  }
};
var primitives = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
globals_exports.assign({
  batchedUpdates: import_react_dom.unstable_batchedUpdates,
  createStringInterpolator: createStringInterpolator2,
  colors: colors2
});
var host = createHost(primitives, {
  applyAnimatedValues,
  createAnimatedStyle: (style) => new AnimatedStyle(style),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props
});
var animated = host.animated;

// node_modules/@nivo/tooltip/dist/nivo-tooltip.es.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
function v() {
  return v = Object.assign ? Object.assign.bind() : function(t8) {
    for (var i6 = 1; i6 < arguments.length; i6++) {
      var o5 = arguments[i6];
      for (var n7 in o5) Object.prototype.hasOwnProperty.call(o5, n7) && (t8[n7] = o5[n7]);
    }
    return t8;
  }, v.apply(this, arguments);
}
var x = { pointerEvents: "none", position: "absolute", zIndex: 10, top: 0, left: 0 };
var m = function(t8, i6) {
  return "translate(" + t8 + "px, " + i6 + "px)";
};
var b = (0, import_react15.memo)(function(t8) {
  var o5, n7 = t8.position, r6 = t8.anchor, e11 = t8.children, l4 = zt(), d3 = Ur(), y4 = d3.animate, f2 = d3.config, b5 = kt(), g5 = b5[0], w4 = b5[1], T4 = (0, import_react15.useRef)(false), C6 = void 0, E4 = false, P4 = w4.width > 0 && w4.height > 0, j5 = Math.round(n7[0]), N3 = Math.round(n7[1]);
  P4 && ("top" === r6 ? (j5 -= w4.width / 2, N3 -= w4.height + 14) : "right" === r6 ? (j5 += 14, N3 -= w4.height / 2) : "bottom" === r6 ? (j5 -= w4.width / 2, N3 += 14) : "left" === r6 ? (j5 -= w4.width + 14, N3 -= w4.height / 2) : "center" === r6 && (j5 -= w4.width / 2, N3 -= w4.height / 2), C6 = { transform: m(j5, N3) }, T4.current || (E4 = true), T4.current = [j5, N3]);
  var O5 = useSpring({ to: C6, config: f2, immediate: !y4 || E4 }), V3 = v({}, x, l4.tooltip.wrapper, { transform: null != (o5 = O5.transform) ? o5 : m(j5, N3), opacity: O5.transform ? 1 : 0 });
  return (0, import_jsx_runtime.jsx)(animated.div, { ref: g5, style: V3, children: e11 });
});
b.displayName = "TooltipWrapper";
var g = (0, import_react15.memo)(function(t8) {
  var i6 = t8.size, o5 = void 0 === i6 ? 12 : i6, n7 = t8.color, r6 = t8.style;
  return (0, import_jsx_runtime.jsx)("span", { style: v({ display: "block", width: o5, height: o5, background: n7 }, void 0 === r6 ? {} : r6) });
});
var w = (0, import_react15.memo)(function(t8) {
  var i6, o5 = t8.id, n7 = t8.value, r6 = t8.format, e11 = t8.enableChip, l4 = void 0 !== e11 && e11, a5 = t8.color, c9 = t8.renderContent, h2 = zt(), u2 = Ot(r6);
  if ("function" == typeof c9) i6 = c9();
  else {
    var f2 = n7;
    void 0 !== u2 && void 0 !== f2 && (f2 = u2(f2)), i6 = (0, import_jsx_runtime.jsxs)("div", { style: h2.tooltip.basic, children: [l4 && (0, import_jsx_runtime.jsx)(g, { color: a5, style: h2.tooltip.chip }), void 0 !== f2 ? (0, import_jsx_runtime.jsxs)("span", { children: [o5, ": ", (0, import_jsx_runtime.jsx)("strong", { children: "" + f2 })] }) : o5] });
  }
  return (0, import_jsx_runtime.jsx)("div", { style: h2.tooltip.container, children: i6 });
});
var T = { width: "100%", borderCollapse: "collapse" };
var C = (0, import_react15.memo)(function(t8) {
  var i6, o5 = t8.title, n7 = t8.rows, r6 = void 0 === n7 ? [] : n7, e11 = t8.renderContent, l4 = zt();
  return r6.length ? (i6 = "function" == typeof e11 ? e11() : (0, import_jsx_runtime.jsxs)("div", { children: [o5 && o5, (0, import_jsx_runtime.jsx)("table", { style: v({}, T, l4.tooltip.table), children: (0, import_jsx_runtime.jsx)("tbody", { children: r6.map(function(t9, i7) {
    return (0, import_jsx_runtime.jsx)("tr", { children: t9.map(function(t10, i8) {
      return (0, import_jsx_runtime.jsx)("td", { style: l4.tooltip.tableCell, children: t10 }, i8);
    }) }, i7);
  }) }) })] }), (0, import_jsx_runtime.jsx)("div", { style: l4.tooltip.container, children: i6 })) : null;
});
C.displayName = "TableTooltip";
var E = (0, import_react15.memo)(function(t8) {
  var i6 = t8.x0, n7 = t8.x1, r6 = t8.y0, e11 = t8.y1, l4 = zt(), u2 = Ur(), d3 = u2.animate, y4 = u2.config, f2 = (0, import_react15.useMemo)(function() {
    return v({}, l4.crosshair.line, { pointerEvents: "none" });
  }, [l4.crosshair.line]), x3 = useSpring({ x1: i6, x2: n7, y1: r6, y2: e11, config: y4, immediate: !d3 });
  return (0, import_jsx_runtime.jsx)(animated.line, v({}, x3, { fill: "none", style: f2 }));
});
E.displayName = "CrosshairLine";
var P = (0, import_react15.memo)(function(t8) {
  var i6, o5, n7 = t8.width, r6 = t8.height, e11 = t8.type, l4 = t8.x, a5 = t8.y;
  return "cross" === e11 ? (i6 = { x0: l4, x1: l4, y0: 0, y1: r6 }, o5 = { x0: 0, x1: n7, y0: a5, y1: a5 }) : "top-left" === e11 ? (i6 = { x0: l4, x1: l4, y0: 0, y1: a5 }, o5 = { x0: 0, x1: l4, y0: a5, y1: a5 }) : "top" === e11 ? i6 = { x0: l4, x1: l4, y0: 0, y1: a5 } : "top-right" === e11 ? (i6 = { x0: l4, x1: l4, y0: 0, y1: a5 }, o5 = { x0: l4, x1: n7, y0: a5, y1: a5 }) : "right" === e11 ? o5 = { x0: l4, x1: n7, y0: a5, y1: a5 } : "bottom-right" === e11 ? (i6 = { x0: l4, x1: l4, y0: a5, y1: r6 }, o5 = { x0: l4, x1: n7, y0: a5, y1: a5 }) : "bottom" === e11 ? i6 = { x0: l4, x1: l4, y0: a5, y1: r6 } : "bottom-left" === e11 ? (i6 = { x0: l4, x1: l4, y0: a5, y1: r6 }, o5 = { x0: 0, x1: l4, y0: a5, y1: a5 }) : "left" === e11 ? o5 = { x0: 0, x1: l4, y0: a5, y1: a5 } : "x" === e11 ? i6 = { x0: l4, x1: l4, y0: 0, y1: r6 } : "y" === e11 && (o5 = { x0: 0, x1: n7, y0: a5, y1: a5 }), (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [i6 && (0, import_jsx_runtime.jsx)(E, { x0: i6.x0, x1: i6.x1, y0: i6.y0, y1: i6.y1 }), o5 && (0, import_jsx_runtime.jsx)(E, { x0: o5.x0, x1: o5.x1, y0: o5.y0, y1: o5.y1 })] });
});
P.displayName = "Crosshair";
var j = (0, import_react15.createContext)({ showTooltipAt: function() {
}, showTooltipFromEvent: function() {
}, hideTooltip: function() {
} });
var N = { isVisible: false, position: [null, null], content: null, anchor: null };
var O = (0, import_react15.createContext)(N);
var V = function(t8) {
  var i6 = (0, import_react15.useState)(N), n7 = i6[0], l4 = i6[1], a5 = (0, import_react15.useCallback)(function(t9, i7, o5) {
    var n8 = i7[0], r6 = i7[1];
    void 0 === o5 && (o5 = "top"), l4({ isVisible: true, position: [n8, r6], anchor: o5, content: t9 });
  }, [l4]), c9 = (0, import_react15.useCallback)(function(i7, o5, n8) {
    void 0 === n8 && (n8 = "top");
    var r6 = t8.current.getBoundingClientRect(), e11 = t8.current.offsetWidth, a6 = e11 === r6.width ? 1 : e11 / r6.width, c10 = "touches" in o5 ? o5.touches[0] : o5, s4 = c10.clientX, h2 = c10.clientY, u2 = (s4 - r6.left) * a6, d3 = (h2 - r6.top) * a6;
    "left" !== n8 && "right" !== n8 || (n8 = u2 < r6.width / 2 ? "right" : "left"), l4({ isVisible: true, position: [u2, d3], anchor: n8, content: i7 });
  }, [t8, l4]), s3 = (0, import_react15.useCallback)(function() {
    l4(N);
  }, [l4]);
  return { actions: (0, import_react15.useMemo)(function() {
    return { showTooltipAt: a5, showTooltipFromEvent: c9, hideTooltip: s3 };
  }, [a5, c9, s3]), state: n7 };
};
var k = function() {
  var t8 = (0, import_react15.useContext)(j);
  if (void 0 === t8) throw new Error("useTooltip must be used within a TooltipProvider");
  return t8;
};
var z = function() {
  var t8 = (0, import_react15.useContext)(O);
  if (void 0 === t8) throw new Error("useTooltipState must be used within a TooltipProvider");
  return t8;
};
var A = function(t8) {
  return t8.isVisible;
};
var F = function() {
  var t8 = z();
  return A(t8) ? (0, import_jsx_runtime.jsx)(b, { position: t8.position, anchor: t8.anchor, children: t8.content }) : null;
};
var M = function(t8) {
  var i6 = t8.container, o5 = t8.children, n7 = V(i6), r6 = n7.actions, e11 = n7.state;
  return (0, import_jsx_runtime.jsx)(j.Provider, { value: r6, children: (0, import_jsx_runtime.jsx)(O.Provider, { value: e11, children: o5 }) });
};

// node_modules/@nivo/core/dist/nivo-core.es.js
var import_merge2 = __toESM(require_merge());
var import_get = __toESM(require_get());
var import_set2 = __toESM(require_set());
var import_isString = __toESM(require_isString());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_last = __toESM(require_last());
var import_isArray = __toESM(require_isArray());

// node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n7 = specifier.length / 6 | 0, colors3 = new Array(n7), i6 = 0;
  while (i6 < n7) colors3[i6] = "#" + specifier.slice(i6 * 6, ++i6 * 6);
  return colors3;
}

// node_modules/d3-scale-chromatic/src/categorical/category10.js
var category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

// node_modules/d3-scale-chromatic/src/categorical/Accent.js
var Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

// node_modules/d3-scale-chromatic/src/categorical/Dark2.js
var Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

// node_modules/d3-scale-chromatic/src/categorical/observable10.js
var observable10_default = colors_default("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0");

// node_modules/d3-scale-chromatic/src/categorical/Paired.js
var Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

// node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
var Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

// node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
var Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

// node_modules/d3-scale-chromatic/src/categorical/Set1.js
var Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

// node_modules/d3-scale-chromatic/src/categorical/Set2.js
var Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

// node_modules/d3-scale-chromatic/src/categorical/Set3.js
var Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

// node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
var Tableau10_default = colors_default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

// node_modules/d3-scale-chromatic/src/ramp.js
var ramp_default = (scheme28) => rgbBasis(scheme28[scheme28.length - 1]);

// node_modules/d3-scale-chromatic/src/diverging/BrBG.js
var scheme = new Array(3).concat(
  "d8b365f5f5f55ab4ac",
  "a6611adfc27d80cdc1018571",
  "a6611adfc27df5f5f580cdc1018571",
  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
).map(colors_default);
var BrBG_default = ramp_default(scheme);

// node_modules/d3-scale-chromatic/src/diverging/PRGn.js
var scheme2 = new Array(3).concat(
  "af8dc3f7f7f77fbf7b",
  "7b3294c2a5cfa6dba0008837",
  "7b3294c2a5cff7f7f7a6dba0008837",
  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
).map(colors_default);
var PRGn_default = ramp_default(scheme2);

// node_modules/d3-scale-chromatic/src/diverging/PiYG.js
var scheme3 = new Array(3).concat(
  "e9a3c9f7f7f7a1d76a",
  "d01c8bf1b6dab8e1864dac26",
  "d01c8bf1b6daf7f7f7b8e1864dac26",
  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
).map(colors_default);
var PiYG_default = ramp_default(scheme3);

// node_modules/d3-scale-chromatic/src/diverging/PuOr.js
var scheme4 = new Array(3).concat(
  "998ec3f7f7f7f1a340",
  "5e3c99b2abd2fdb863e66101",
  "5e3c99b2abd2f7f7f7fdb863e66101",
  "542788998ec3d8daebfee0b6f1a340b35806",
  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
).map(colors_default);
var PuOr_default = ramp_default(scheme4);

// node_modules/d3-scale-chromatic/src/diverging/RdBu.js
var scheme5 = new Array(3).concat(
  "ef8a62f7f7f767a9cf",
  "ca0020f4a58292c5de0571b0",
  "ca0020f4a582f7f7f792c5de0571b0",
  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
).map(colors_default);
var RdBu_default = ramp_default(scheme5);

// node_modules/d3-scale-chromatic/src/diverging/RdGy.js
var scheme6 = new Array(3).concat(
  "ef8a62ffffff999999",
  "ca0020f4a582bababa404040",
  "ca0020f4a582ffffffbababa404040",
  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
).map(colors_default);
var RdGy_default = ramp_default(scheme6);

// node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
var scheme7 = new Array(3).concat(
  "fc8d59ffffbf91bfdb",
  "d7191cfdae61abd9e92c7bb6",
  "d7191cfdae61ffffbfabd9e92c7bb6",
  "d73027fc8d59fee090e0f3f891bfdb4575b4",
  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
).map(colors_default);
var RdYlBu_default = ramp_default(scheme7);

// node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
var scheme8 = new Array(3).concat(
  "fc8d59ffffbf91cf60",
  "d7191cfdae61a6d96a1a9641",
  "d7191cfdae61ffffbfa6d96a1a9641",
  "d73027fc8d59fee08bd9ef8b91cf601a9850",
  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
).map(colors_default);
var RdYlGn_default = ramp_default(scheme8);

// node_modules/d3-scale-chromatic/src/diverging/Spectral.js
var scheme9 = new Array(3).concat(
  "fc8d59ffffbf99d594",
  "d7191cfdae61abdda42b83ba",
  "d7191cfdae61ffffbfabdda42b83ba",
  "d53e4ffc8d59fee08be6f59899d5943288bd",
  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
).map(colors_default);
var Spectral_default = ramp_default(scheme9);

// node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
var scheme10 = new Array(3).concat(
  "e5f5f999d8c92ca25f",
  "edf8fbb2e2e266c2a4238b45",
  "edf8fbb2e2e266c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
).map(colors_default);
var BuGn_default = ramp_default(scheme10);

// node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
var scheme11 = new Array(3).concat(
  "e0ecf49ebcda8856a7",
  "edf8fbb3cde38c96c688419d",
  "edf8fbb3cde38c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
).map(colors_default);
var BuPu_default = ramp_default(scheme11);

// node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
var scheme12 = new Array(3).concat(
  "e0f3dba8ddb543a2ca",
  "f0f9e8bae4bc7bccc42b8cbe",
  "f0f9e8bae4bc7bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
).map(colors_default);
var GnBu_default = ramp_default(scheme12);

// node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
var scheme13 = new Array(3).concat(
  "fee8c8fdbb84e34a33",
  "fef0d9fdcc8afc8d59d7301f",
  "fef0d9fdcc8afc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
).map(colors_default);
var OrRd_default = ramp_default(scheme13);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
var scheme14 = new Array(3).concat(
  "ece2f0a6bddb1c9099",
  "f6eff7bdc9e167a9cf02818a",
  "f6eff7bdc9e167a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
).map(colors_default);
var PuBuGn_default = ramp_default(scheme14);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
var scheme15 = new Array(3).concat(
  "ece7f2a6bddb2b8cbe",
  "f1eef6bdc9e174a9cf0570b0",
  "f1eef6bdc9e174a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
).map(colors_default);
var PuBu_default = ramp_default(scheme15);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
var scheme16 = new Array(3).concat(
  "e7e1efc994c7dd1c77",
  "f1eef6d7b5d8df65b0ce1256",
  "f1eef6d7b5d8df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
).map(colors_default);
var PuRd_default = ramp_default(scheme16);

// node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
var scheme17 = new Array(3).concat(
  "fde0ddfa9fb5c51b8a",
  "feebe2fbb4b9f768a1ae017e",
  "feebe2fbb4b9f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
).map(colors_default);
var RdPu_default = ramp_default(scheme17);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
var scheme18 = new Array(3).concat(
  "edf8b17fcdbb2c7fb8",
  "ffffcca1dab441b6c4225ea8",
  "ffffcca1dab441b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
).map(colors_default);
var YlGnBu_default = ramp_default(scheme18);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
var scheme19 = new Array(3).concat(
  "f7fcb9addd8e31a354",
  "ffffccc2e69978c679238443",
  "ffffccc2e69978c67931a354006837",
  "ffffccd9f0a3addd8e78c67931a354006837",
  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
).map(colors_default);
var YlGn_default = ramp_default(scheme19);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
var scheme20 = new Array(3).concat(
  "fff7bcfec44fd95f0e",
  "ffffd4fed98efe9929cc4c02",
  "ffffd4fed98efe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
).map(colors_default);
var YlOrBr_default = ramp_default(scheme20);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
var scheme21 = new Array(3).concat(
  "ffeda0feb24cf03b20",
  "ffffb2fecc5cfd8d3ce31a1c",
  "ffffb2fecc5cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
).map(colors_default);
var YlOrRd_default = ramp_default(scheme21);

// node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
var scheme22 = new Array(3).concat(
  "deebf79ecae13182bd",
  "eff3ffbdd7e76baed62171b5",
  "eff3ffbdd7e76baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
).map(colors_default);
var Blues_default = ramp_default(scheme22);

// node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
var scheme23 = new Array(3).concat(
  "e5f5e0a1d99b31a354",
  "edf8e9bae4b374c476238b45",
  "edf8e9bae4b374c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
).map(colors_default);
var Greens_default = ramp_default(scheme23);

// node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
var scheme24 = new Array(3).concat(
  "f0f0f0bdbdbd636363",
  "f7f7f7cccccc969696525252",
  "f7f7f7cccccc969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
).map(colors_default);
var Greys_default = ramp_default(scheme24);

// node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
var scheme25 = new Array(3).concat(
  "efedf5bcbddc756bb1",
  "f2f0f7cbc9e29e9ac86a51a3",
  "f2f0f7cbc9e29e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
).map(colors_default);
var Purples_default = ramp_default(scheme25);

// node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
var scheme26 = new Array(3).concat(
  "fee0d2fc9272de2d26",
  "fee5d9fcae91fb6a4acb181d",
  "fee5d9fcae91fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
).map(colors_default);
var Reds_default = ramp_default(scheme26);

// node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
var scheme27 = new Array(3).concat(
  "fee6cefdae6be6550d",
  "feeddefdbe85fd8d3cd94701",
  "feeddefdbe85fd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
).map(colors_default);
var Oranges_default = ramp_default(scheme27);

// node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js
function cividis_default(t8) {
  t8 = Math.max(0, Math.min(1, t8));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t8 * (35.34 - t8 * (2381.73 - t8 * (6402.7 - t8 * (7024.72 - t8 * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t8 * (170.73 + t8 * (52.82 - t8 * (131.46 - t8 * (176.58 - t8 * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t8 * (442.36 - t8 * (2482.43 - t8 * (6167.24 - t8 * (6614.94 - t8 * 2475.67))))))) + ")";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
var cubehelix_default = cubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));

// node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var c = cubehelix();
function rainbow_default(t8) {
  if (t8 < 0 || t8 > 1) t8 -= Math.floor(t8);
  var ts2 = Math.abs(t8 - 0.5);
  c.h = 360 * t8 - 100;
  c.s = 1.5 - 1.5 * ts2;
  c.l = 0.8 - 0.9 * ts2;
  return c + "";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
var c6 = rgb();
var pi_1_3 = Math.PI / 3;
var pi_2_3 = Math.PI * 2 / 3;
function sinebow_default(t8) {
  var x3;
  t8 = (0.5 - t8) * Math.PI;
  c6.r = 255 * (x3 = Math.sin(t8)) * x3;
  c6.g = 255 * (x3 = Math.sin(t8 + pi_1_3)) * x3;
  c6.b = 255 * (x3 = Math.sin(t8 + pi_2_3)) * x3;
  return c6 + "";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js
function turbo_default(t8) {
  t8 = Math.max(0, Math.min(1, t8));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t8 * (1172.33 - t8 * (10793.56 - t8 * (33300.12 - t8 * (38394.49 - t8 * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t8 * (557.33 + t8 * (1225.33 - t8 * (3574.96 - t8 * (1073.77 + t8 * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t8 * (3211.1 - t8 * (15327.97 - t8 * (27814 - t8 * (22569.18 - t8 * 6838.66))))))) + ")";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
function ramp(range) {
  var n7 = range.length;
  return function(t8) {
    return range[Math.max(0, Math.min(n7 - 1, Math.floor(t8 * n7)))];
  };
}
var viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

// node_modules/@nivo/core/dist/nivo-core.es.js
var import_isFunction = __toESM(require_isFunction());
var import_without = __toESM(require_without());

// node_modules/@nivo/core/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x3) {
  return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
}
function formatDecimalParts(x3, p5) {
  if ((i6 = (x3 = p5 ? x3.toExponential(p5 - 1) : x3.toExponential()).indexOf("e")) < 0) return null;
  var i6, coefficient = x3.slice(0, i6);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x3.slice(i6 + 1)
  ];
}

// node_modules/@nivo/core/node_modules/d3-format/src/exponent.js
function exponent_default(x3) {
  return x3 = formatDecimalParts(Math.abs(x3)), x3 ? x3[1] : NaN;
}

// node_modules/@nivo/core/node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i6 = value.length, t8 = [], j5 = 0, g5 = grouping[0], length = 0;
    while (i6 > 0 && g5 > 0) {
      if (length + g5 + 1 > width) g5 = Math.max(1, width - length);
      t8.push(value.substring(i6 -= g5, i6 + g5));
      if ((length += g5 + 1) > width) break;
      g5 = grouping[j5 = (j5 + 1) % grouping.length];
    }
    return t8.reverse().join(thousands);
  };
}

// node_modules/@nivo/core/node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i6) {
      return numerals[+i6];
    });
  };
}

// node_modules/@nivo/core/node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/@nivo/core/node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s3) {
  out: for (var n7 = s3.length, i6 = 1, i0 = -1, i1; i6 < n7; ++i6) {
    switch (s3[i6]) {
      case ".":
        i0 = i1 = i6;
        break;
      case "0":
        if (i0 === 0) i0 = i6;
        i1 = i6;
        break;
      default:
        if (!+s3[i6]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }
  return i0 > 0 ? s3.slice(0, i0) + s3.slice(i1 + 1) : s3;
}

// node_modules/@nivo/core/node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x3, p5) {
  var d3 = formatDecimalParts(x3, p5);
  if (!d3) return x3 + "";
  var coefficient = d3[0], exponent = d3[1], i6 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n7 = coefficient.length;
  return i6 === n7 ? coefficient : i6 > n7 ? coefficient + new Array(i6 - n7 + 1).join("0") : i6 > 0 ? coefficient.slice(0, i6) + "." + coefficient.slice(i6) : "0." + new Array(1 - i6).join("0") + formatDecimalParts(x3, Math.max(0, p5 + i6 - 1))[0];
}

// node_modules/@nivo/core/node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x3, p5) {
  var d3 = formatDecimalParts(x3, p5);
  if (!d3) return x3 + "";
  var coefficient = d3[0], exponent = d3[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/@nivo/core/node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": function(x3, p5) {
    return (x3 * 100).toFixed(p5);
  },
  "b": function(x3) {
    return Math.round(x3).toString(2);
  },
  "c": function(x3) {
    return x3 + "";
  },
  "d": formatDecimal_default,
  "e": function(x3, p5) {
    return x3.toExponential(p5);
  },
  "f": function(x3, p5) {
    return x3.toFixed(p5);
  },
  "g": function(x3, p5) {
    return x3.toPrecision(p5);
  },
  "o": function(x3) {
    return Math.round(x3).toString(8);
  },
  "p": function(x3, p5) {
    return formatRounded_default(x3 * 100, p5);
  },
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": function(x3) {
    return Math.round(x3).toString(16).toUpperCase();
  },
  "x": function(x3) {
    return Math.round(x3).toString(16);
  }
};

// node_modules/@nivo/core/node_modules/d3-format/src/identity.js
function identity_default(x3) {
  return x3;
}

// node_modules/@nivo/core/node_modules/d3-format/src/locale.js
var map = Array.prototype.map;
var prefixes2 = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale6) {
  var group3 = locale6.grouping === void 0 || locale6.thousands === void 0 ? identity_default : formatGroup_default(map.call(locale6.grouping, Number), locale6.thousands + ""), currencyPrefix = locale6.currency === void 0 ? "" : locale6.currency[0] + "", currencySuffix = locale6.currency === void 0 ? "" : locale6.currency[1] + "", decimal = locale6.decimal === void 0 ? "." : locale6.decimal + "", numerals = locale6.numerals === void 0 ? identity_default : formatNumerals_default(map.call(locale6.numerals, String)), percent = locale6.percent === void 0 ? "%" : locale6.percent + "", minus = locale6.minus === void 0 ? "-" : locale6.minus + "", nan = locale6.nan === void 0 ? "NaN" : locale6.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n") comma = true, type = "g";
    else if (!formatTypes_default[type]) precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "=";
    var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i6, n7, c9;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim) value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;
        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes2[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
        if (maybeSuffix) {
          i6 = -1, n7 = value.length;
          while (++i6 < n7) {
            if (c9 = value.charCodeAt(i6), 48 > c9 || c9 > 57) {
              valueSuffix = (c9 === 46 ? decimal + value.slice(i6 + 1) : value.slice(i6)) + valueSuffix;
              value = value.slice(0, i6);
              break;
            }
          }
        }
      }
      if (comma && !zero) value = group3(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero) value = group3(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix3(specifier, value) {
    var f2 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e11 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k4 = Math.pow(10, -e11), prefix2 = prefixes2[8 + e11 / 3];
    return function(value2) {
      return f2(k4 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix3
  };
}

// node_modules/@nivo/core/node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/@nivo/core/node_modules/d3-time/src/interval.js
var t0 = /* @__PURE__ */ new Date();
var t1 = /* @__PURE__ */ new Date();
function newInterval(floori, offseti, count3, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = function(date) {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start2, stop2, step) {
    var range = [], previous;
    start2 = interval.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop2) || !(step > 0)) return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop2);
    return range;
  };
  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {
          }
        }
        else while (--step >= 0) {
          while (offseti(date, 1), !test(date)) {
          }
        }
      }
    });
  };
  if (count3) {
    interval.count = function(start2, end) {
      t0.setTime(+start2), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count3(t0, t1));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d3) {
        return field(d3) % step === 0;
      } : function(d3) {
        return interval.count(0, d3) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/@nivo/core/node_modules/d3-time/src/millisecond.js
var millisecond = newInterval(function() {
}, function(date, step) {
  date.setTime(+date + step);
}, function(start2, end) {
  return end - start2;
});
millisecond.every = function(k4) {
  k4 = Math.floor(k4);
  if (!isFinite(k4) || !(k4 > 0)) return null;
  if (!(k4 > 1)) return millisecond;
  return newInterval(function(date) {
    date.setTime(Math.floor(date / k4) * k4);
  }, function(date, step) {
    date.setTime(+date + step * k4);
  }, function(start2, end) {
    return (end - start2) / k4;
  });
};
var millisecond_default = millisecond;
var milliseconds = millisecond.range;

// node_modules/@nivo/core/node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// node_modules/@nivo/core/node_modules/d3-time/src/second.js
var second = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond);
}, function(start2, end) {
  return (end - start2) / durationSecond;
}, function(date) {
  return date.getUTCSeconds();
});
var second_default = second;
var seconds = second.range;

// node_modules/@nivo/core/node_modules/d3-time/src/minute.js
var minute = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start2, end) {
  return (end - start2) / durationMinute;
}, function(date) {
  return date.getMinutes();
});
var minute_default = minute;
var minutes = minute.range;

// node_modules/@nivo/core/node_modules/d3-time/src/hour.js
var hour = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start2, end) {
  return (end - start2) / durationHour;
}, function(date) {
  return date.getHours();
});
var hour_default = hour;
var hours = hour.range;

// node_modules/@nivo/core/node_modules/d3-time/src/day.js
var day = newInterval(
  (date) => date.setHours(0, 0, 0, 0),
  (date, step) => date.setDate(date.getDate() + step),
  (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationDay,
  (date) => date.getDate() - 1
);
var day_default = day;
var days = day.range;

// node_modules/@nivo/core/node_modules/d3-time/src/week.js
function weekday(i6) {
  return newInterval(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i6) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start2, end) {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

// node_modules/@nivo/core/node_modules/d3-time/src/month.js
var month = newInterval(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start2, end) {
  return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var month_default = month;
var months = month.range;

// node_modules/@nivo/core/node_modules/d3-time/src/year.js
var year = newInterval(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start2, end) {
  return end.getFullYear() - start2.getFullYear();
}, function(date) {
  return date.getFullYear();
});
year.every = function(k4) {
  return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k4) * k4);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k4);
  });
};
var year_default = year;
var years = year.range;

// node_modules/@nivo/core/node_modules/d3-time/src/utcMinute.js
var utcMinute = newInterval(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start2, end) {
  return (end - start2) / durationMinute;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinute_default = utcMinute;
var utcMinutes = utcMinute.range;

// node_modules/@nivo/core/node_modules/d3-time/src/utcHour.js
var utcHour = newInterval(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start2, end) {
  return (end - start2) / durationHour;
}, function(date) {
  return date.getUTCHours();
});
var utcHour_default = utcHour;
var utcHours = utcHour.range;

// node_modules/@nivo/core/node_modules/d3-time/src/utcDay.js
var utcDay = newInterval(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start2, end) {
  return (end - start2) / durationDay;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDay_default = utcDay;
var utcDays = utcDay.range;

// node_modules/@nivo/core/node_modules/d3-time/src/utcWeek.js
function utcWeekday(i6) {
  return newInterval(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i6) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start2, end) {
    return (end - start2) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// node_modules/@nivo/core/node_modules/d3-time/src/utcMonth.js
var utcMonth = newInterval(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start2, end) {
  return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonth_default = utcMonth;
var utcMonths = utcMonth.range;

// node_modules/@nivo/core/node_modules/d3-time/src/utcYear.js
var utcYear = newInterval(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start2, end) {
  return end.getUTCFullYear() - start2.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});
utcYear.every = function(k4) {
  return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k4) * k4);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k4);
  });
};
var utcYear_default = utcYear;
var utcYears = utcYear.range;

// node_modules/@nivo/core/node_modules/d3-array/src/ascending.js
function ascending_default2(a5, b5) {
  return a5 < b5 ? -1 : a5 > b5 ? 1 : a5 >= b5 ? 0 : NaN;
}

// node_modules/@nivo/core/node_modules/d3-array/src/bisector.js
function bisector_default(f2) {
  let delta = f2;
  let compare = f2;
  if (f2.length === 1) {
    delta = (d3, x3) => f2(d3) - x3;
    compare = ascendingComparator(f2);
  }
  function left(a5, x3, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a5.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a5[mid], x3) < 0) lo = mid + 1;
      else hi = mid;
    }
    return lo;
  }
  function right(a5, x3, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a5.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a5[mid], x3) > 0) hi = mid;
      else lo = mid + 1;
    }
    return lo;
  }
  function center(a5, x3, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a5.length;
    const i6 = left(a5, x3, lo, hi - 1);
    return i6 > lo && delta(a5[i6 - 1], x3) > -delta(a5[i6], x3) ? i6 - 1 : i6;
  }
  return { left, center, right };
}
function ascendingComparator(f2) {
  return (d3, x3) => ascending_default2(f2(d3), x3);
}

// node_modules/@nivo/core/node_modules/d3-array/src/number.js
function number_default(x3) {
  return x3 === null ? NaN : +x3;
}

// node_modules/@nivo/core/node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector_default(ascending_default2);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector_default(number_default).center;

// node_modules/@nivo/core/node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map2 = array.map;

// node_modules/@nivo/core/node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickStep(start2, stop2, count3) {
  var step0 = Math.abs(stop2 - start2) / Math.max(0, count3), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10) step1 *= 10;
  else if (error >= e5) step1 *= 5;
  else if (error >= e2) step1 *= 2;
  return stop2 < start2 ? -step1 : step1;
}

// node_modules/@nivo/core/node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random) {
  return function shuffle(array3, i0 = 0, i1 = array3.length) {
    let m4 = i1 - (i0 = +i0);
    while (m4) {
      const i6 = random() * m4-- | 0, t8 = array3[m4 + i0];
      array3[m4 + i0] = array3[i6 + i0];
      array3[i6 + i0] = t8;
    }
    return array3;
  };
}

// node_modules/@nivo/core/node_modules/d3-time/src/ticks.js
function ticker(year4, month4, week, day4, hour4, minute4) {
  const tickIntervals = [
    [second_default, 1, durationSecond],
    [second_default, 5, 5 * durationSecond],
    [second_default, 15, 15 * durationSecond],
    [second_default, 30, 30 * durationSecond],
    [minute4, 1, durationMinute],
    [minute4, 5, 5 * durationMinute],
    [minute4, 15, 15 * durationMinute],
    [minute4, 30, 30 * durationMinute],
    [hour4, 1, durationHour],
    [hour4, 3, 3 * durationHour],
    [hour4, 6, 6 * durationHour],
    [hour4, 12, 12 * durationHour],
    [day4, 1, durationDay],
    [day4, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month4, 1, durationMonth],
    [month4, 3, 3 * durationMonth],
    [year4, 1, durationYear]
  ];
  function ticks(start2, stop2, count3) {
    const reverse3 = stop2 < start2;
    if (reverse3) [start2, stop2] = [stop2, start2];
    const interval = count3 && typeof count3.range === "function" ? count3 : tickInterval(start2, stop2, count3);
    const ticks2 = interval ? interval.range(start2, +stop2 + 1) : [];
    return reverse3 ? ticks2.reverse() : ticks2;
  }
  function tickInterval(start2, stop2, count3) {
    const target = Math.abs(stop2 - start2) / count3;
    const i6 = bisector_default(([, , step2]) => step2).right(tickIntervals, target);
    if (i6 === tickIntervals.length) return year4.every(tickStep(start2 / durationYear, stop2 / durationYear, count3));
    if (i6 === 0) return millisecond_default.every(Math.max(tickStep(start2, stop2, count3), 1));
    const [t8, step] = tickIntervals[target / tickIntervals[i6 - 1][2] < tickIntervals[i6][2] / target ? i6 - 1 : i6];
    return t8.every(step);
  }
  return [ticks, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default);
var [timeTicks, timeTickInterval] = ticker(year_default, month_default, sunday, day_default, hour_default, minute_default);

// node_modules/@nivo/core/node_modules/d3-time-format/src/locale.js
function localDate(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date = new Date(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
    date.setFullYear(d3.y);
    return date;
  }
  return new Date(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
}
function utcDate(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date = new Date(Date.UTC(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
    date.setUTCFullYear(d3.y);
    return date;
  }
  return new Date(Date.UTC(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
}
function newDate(y4, m4, d3) {
  return { y: y4, m: m4, d: d3, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale6) {
  var locale_dateTime = locale6.dateTime, locale_date = locale6.date, locale_time = locale6.time, locale_periods = locale6.periods, locale_weekdays = locale6.days, locale_shortWeekdays = locale6.shortDays, locale_months = locale6.months, locale_shortMonths = locale6.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i6 = -1, j5 = 0, n7 = specifier.length, c9, pad4, format3;
      if (!(date instanceof Date)) date = /* @__PURE__ */ new Date(+date);
      while (++i6 < n7) {
        if (specifier.charCodeAt(i6) === 37) {
          string.push(specifier.slice(j5, i6));
          if ((pad4 = pads[c9 = specifier.charAt(++i6)]) != null) c9 = specifier.charAt(++i6);
          else pad4 = c9 === "e" ? " " : "0";
          if (format3 = formats2[c9]) c9 = format3(date, pad4);
          string.push(c9);
          j5 = i6 + 1;
        }
      }
      string.push(specifier.slice(j5, i6));
      return string.join("");
    };
  }
  function newParse(specifier, Z2) {
    return function(string) {
      var d3 = newDate(1900, void 0, 1), i6 = parseSpecifier(d3, specifier, string += "", 0), week, day4;
      if (i6 != string.length) return null;
      if ("Q" in d3) return new Date(d3.Q);
      if ("s" in d3) return new Date(d3.s * 1e3 + ("L" in d3 ? d3.L : 0));
      if (Z2 && !("Z" in d3)) d3.Z = 0;
      if ("p" in d3) d3.H = d3.H % 12 + d3.p * 12;
      if (d3.m === void 0) d3.m = "q" in d3 ? d3.q : 0;
      if ("V" in d3) {
        if (d3.V < 1 || d3.V > 53) return null;
        if (!("w" in d3)) d3.w = 1;
        if ("Z" in d3) {
          week = utcDate(newDate(d3.y, 0, 1)), day4 = week.getUTCDay();
          week = day4 > 4 || day4 === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay_default.offset(week, (d3.V - 1) * 7);
          d3.y = week.getUTCFullYear();
          d3.m = week.getUTCMonth();
          d3.d = week.getUTCDate() + (d3.w + 6) % 7;
        } else {
          week = localDate(newDate(d3.y, 0, 1)), day4 = week.getDay();
          week = day4 > 4 || day4 === 0 ? monday.ceil(week) : monday(week);
          week = day_default.offset(week, (d3.V - 1) * 7);
          d3.y = week.getFullYear();
          d3.m = week.getMonth();
          d3.d = week.getDate() + (d3.w + 6) % 7;
        }
      } else if ("W" in d3 || "U" in d3) {
        if (!("w" in d3)) d3.w = "u" in d3 ? d3.u % 7 : "W" in d3 ? 1 : 0;
        day4 = "Z" in d3 ? utcDate(newDate(d3.y, 0, 1)).getUTCDay() : localDate(newDate(d3.y, 0, 1)).getDay();
        d3.m = 0;
        d3.d = "W" in d3 ? (d3.w + 6) % 7 + d3.W * 7 - (day4 + 5) % 7 : d3.w + d3.U * 7 - (day4 + 6) % 7;
      }
      if ("Z" in d3) {
        d3.H += d3.Z / 100 | 0;
        d3.M += d3.Z % 100;
        return utcDate(d3);
      }
      return localDate(d3);
    };
  }
  function parseSpecifier(d3, specifier, string, j5) {
    var i6 = 0, n7 = specifier.length, m4 = string.length, c9, parse;
    while (i6 < n7) {
      if (j5 >= m4) return -1;
      c9 = specifier.charCodeAt(i6++);
      if (c9 === 37) {
        c9 = specifier.charAt(i6++);
        parse = parses[c9 in pads ? specifier.charAt(i6++) : c9];
        if (!parse || (j5 = parse(d3, string, j5)) < 0) return -1;
      } else if (c9 != string.charCodeAt(j5++)) {
        return -1;
      }
    }
    return j5;
  }
  function parsePeriod(d3, string, i6) {
    var n7 = periodRe.exec(string.slice(i6));
    return n7 ? (d3.p = periodLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseShortWeekday(d3, string, i6) {
    var n7 = shortWeekdayRe.exec(string.slice(i6));
    return n7 ? (d3.w = shortWeekdayLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseWeekday(d3, string, i6) {
    var n7 = weekdayRe.exec(string.slice(i6));
    return n7 ? (d3.w = weekdayLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseShortMonth(d3, string, i6) {
    var n7 = shortMonthRe.exec(string.slice(i6));
    return n7 ? (d3.m = shortMonthLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseMonth(d3, string, i6) {
    var n7 = monthRe.exec(string.slice(i6));
    return n7 ? (d3.m = monthLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseLocaleDateTime(d3, string, i6) {
    return parseSpecifier(d3, locale_dateTime, string, i6);
  }
  function parseLocaleDate(d3, string, i6) {
    return parseSpecifier(d3, locale_date, string, i6);
  }
  function parseLocaleTime(d3, string, i6) {
    return parseSpecifier(d3, locale_time, string, i6);
  }
  function formatShortWeekday(d3) {
    return locale_shortWeekdays[d3.getDay()];
  }
  function formatWeekday(d3) {
    return locale_weekdays[d3.getDay()];
  }
  function formatShortMonth(d3) {
    return locale_shortMonths[d3.getMonth()];
  }
  function formatMonth(d3) {
    return locale_months[d3.getMonth()];
  }
  function formatPeriod(d3) {
    return locale_periods[+(d3.getHours() >= 12)];
  }
  function formatQuarter(d3) {
    return 1 + ~~(d3.getMonth() / 3);
  }
  function formatUTCShortWeekday(d3) {
    return locale_shortWeekdays[d3.getUTCDay()];
  }
  function formatUTCWeekday(d3) {
    return locale_weekdays[d3.getUTCDay()];
  }
  function formatUTCShortMonth(d3) {
    return locale_shortMonths[d3.getUTCMonth()];
  }
  function formatUTCMonth(d3) {
    return locale_months[d3.getUTCMonth()];
  }
  function formatUTCPeriod(d3) {
    return locale_periods[+(d3.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d3) {
    return 1 + ~~(d3.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f2 = newFormat(specifier += "", formats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    parse: function(specifier) {
      var p5 = newParse(specifier += "", false);
      p5.toString = function() {
        return specifier;
      };
      return p5;
    },
    utcFormat: function(specifier) {
      var f2 = newFormat(specifier += "", utcFormats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    utcParse: function(specifier) {
      var p5 = newParse(specifier += "", true);
      p5.toString = function() {
        return specifier;
      };
      return p5;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s3) {
  return s3.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i6) => [name.toLowerCase(), i6]));
}
function parseWeekdayNumberSunday(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 1));
  return n7 ? (d3.w = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekdayNumberMonday(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 1));
  return n7 ? (d3.u = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekNumberSunday(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.U = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekNumberISO(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.V = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekNumberMonday(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.W = +n7[0], i6 + n7[0].length) : -1;
}
function parseFullYear(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 4));
  return n7 ? (d3.y = +n7[0], i6 + n7[0].length) : -1;
}
function parseYear(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.y = +n7[0] + (+n7[0] > 68 ? 1900 : 2e3), i6 + n7[0].length) : -1;
}
function parseZone(d3, string, i6) {
  var n7 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i6, i6 + 6));
  return n7 ? (d3.Z = n7[1] ? 0 : -(n7[2] + (n7[3] || "00")), i6 + n7[0].length) : -1;
}
function parseQuarter(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 1));
  return n7 ? (d3.q = n7[0] * 3 - 3, i6 + n7[0].length) : -1;
}
function parseMonthNumber(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.m = n7[0] - 1, i6 + n7[0].length) : -1;
}
function parseDayOfMonth(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.d = +n7[0], i6 + n7[0].length) : -1;
}
function parseDayOfYear(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 3));
  return n7 ? (d3.m = 0, d3.d = +n7[0], i6 + n7[0].length) : -1;
}
function parseHour24(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.H = +n7[0], i6 + n7[0].length) : -1;
}
function parseMinutes(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.M = +n7[0], i6 + n7[0].length) : -1;
}
function parseSeconds(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.S = +n7[0], i6 + n7[0].length) : -1;
}
function parseMilliseconds(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 3));
  return n7 ? (d3.L = +n7[0], i6 + n7[0].length) : -1;
}
function parseMicroseconds(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 6));
  return n7 ? (d3.L = Math.floor(n7[0] / 1e3), i6 + n7[0].length) : -1;
}
function parseLiteralPercent(d3, string, i6) {
  var n7 = percentRe.exec(string.slice(i6, i6 + 1));
  return n7 ? i6 + n7[0].length : -1;
}
function parseUnixTimestamp(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6));
  return n7 ? (d3.Q = +n7[0], i6 + n7[0].length) : -1;
}
function parseUnixTimestampSeconds(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6));
  return n7 ? (d3.s = +n7[0], i6 + n7[0].length) : -1;
}
function formatDayOfMonth(d3, p5) {
  return pad(d3.getDate(), p5, 2);
}
function formatHour24(d3, p5) {
  return pad(d3.getHours(), p5, 2);
}
function formatHour12(d3, p5) {
  return pad(d3.getHours() % 12 || 12, p5, 2);
}
function formatDayOfYear(d3, p5) {
  return pad(1 + day_default.count(year_default(d3), d3), p5, 3);
}
function formatMilliseconds(d3, p5) {
  return pad(d3.getMilliseconds(), p5, 3);
}
function formatMicroseconds(d3, p5) {
  return formatMilliseconds(d3, p5) + "000";
}
function formatMonthNumber(d3, p5) {
  return pad(d3.getMonth() + 1, p5, 2);
}
function formatMinutes(d3, p5) {
  return pad(d3.getMinutes(), p5, 2);
}
function formatSeconds(d3, p5) {
  return pad(d3.getSeconds(), p5, 2);
}
function formatWeekdayNumberMonday(d3) {
  var day4 = d3.getDay();
  return day4 === 0 ? 7 : day4;
}
function formatWeekNumberSunday(d3, p5) {
  return pad(sunday.count(year_default(d3) - 1, d3), p5, 2);
}
function dISO(d3) {
  var day4 = d3.getDay();
  return day4 >= 4 || day4 === 0 ? thursday(d3) : thursday.ceil(d3);
}
function formatWeekNumberISO(d3, p5) {
  d3 = dISO(d3);
  return pad(thursday.count(year_default(d3), d3) + (year_default(d3).getDay() === 4), p5, 2);
}
function formatWeekdayNumberSunday(d3) {
  return d3.getDay();
}
function formatWeekNumberMonday(d3, p5) {
  return pad(monday.count(year_default(d3) - 1, d3), p5, 2);
}
function formatYear(d3, p5) {
  return pad(d3.getFullYear() % 100, p5, 2);
}
function formatYearISO(d3, p5) {
  d3 = dISO(d3);
  return pad(d3.getFullYear() % 100, p5, 2);
}
function formatFullYear(d3, p5) {
  return pad(d3.getFullYear() % 1e4, p5, 4);
}
function formatFullYearISO(d3, p5) {
  var day4 = d3.getDay();
  d3 = day4 >= 4 || day4 === 0 ? thursday(d3) : thursday.ceil(d3);
  return pad(d3.getFullYear() % 1e4, p5, 4);
}
function formatZone(d3) {
  var z6 = d3.getTimezoneOffset();
  return (z6 > 0 ? "-" : (z6 *= -1, "+")) + pad(z6 / 60 | 0, "0", 2) + pad(z6 % 60, "0", 2);
}
function formatUTCDayOfMonth(d3, p5) {
  return pad(d3.getUTCDate(), p5, 2);
}
function formatUTCHour24(d3, p5) {
  return pad(d3.getUTCHours(), p5, 2);
}
function formatUTCHour12(d3, p5) {
  return pad(d3.getUTCHours() % 12 || 12, p5, 2);
}
function formatUTCDayOfYear(d3, p5) {
  return pad(1 + utcDay_default.count(utcYear_default(d3), d3), p5, 3);
}
function formatUTCMilliseconds(d3, p5) {
  return pad(d3.getUTCMilliseconds(), p5, 3);
}
function formatUTCMicroseconds(d3, p5) {
  return formatUTCMilliseconds(d3, p5) + "000";
}
function formatUTCMonthNumber(d3, p5) {
  return pad(d3.getUTCMonth() + 1, p5, 2);
}
function formatUTCMinutes(d3, p5) {
  return pad(d3.getUTCMinutes(), p5, 2);
}
function formatUTCSeconds(d3, p5) {
  return pad(d3.getUTCSeconds(), p5, 2);
}
function formatUTCWeekdayNumberMonday(d3) {
  var dow = d3.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d3, p5) {
  return pad(utcSunday.count(utcYear_default(d3) - 1, d3), p5, 2);
}
function UTCdISO(d3) {
  var day4 = d3.getUTCDay();
  return day4 >= 4 || day4 === 0 ? utcThursday(d3) : utcThursday.ceil(d3);
}
function formatUTCWeekNumberISO(d3, p5) {
  d3 = UTCdISO(d3);
  return pad(utcThursday.count(utcYear_default(d3), d3) + (utcYear_default(d3).getUTCDay() === 4), p5, 2);
}
function formatUTCWeekdayNumberSunday(d3) {
  return d3.getUTCDay();
}
function formatUTCWeekNumberMonday(d3, p5) {
  return pad(utcMonday.count(utcYear_default(d3) - 1, d3), p5, 2);
}
function formatUTCYear(d3, p5) {
  return pad(d3.getUTCFullYear() % 100, p5, 2);
}
function formatUTCYearISO(d3, p5) {
  d3 = UTCdISO(d3);
  return pad(d3.getUTCFullYear() % 100, p5, 2);
}
function formatUTCFullYear(d3, p5) {
  return pad(d3.getUTCFullYear() % 1e4, p5, 4);
}
function formatUTCFullYearISO(d3, p5) {
  var day4 = d3.getUTCDay();
  d3 = day4 >= 4 || day4 === 0 ? utcThursday(d3) : utcThursday.ceil(d3);
  return pad(d3.getUTCFullYear() % 1e4, p5, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d3) {
  return +d3;
}
function formatUnixTimestampSeconds(d3) {
  return Math.floor(+d3 / 1e3);
}

// node_modules/@nivo/core/node_modules/d3-time-format/src/defaultLocale.js
var locale2;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale2({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}

// node_modules/@nivo/core/node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date) {
  return date.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

// node_modules/@nivo/core/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

// node_modules/@nivo/core/dist/nivo-core.es.js
var import_isPlainObject = __toESM(require_isPlainObject());
var import_pick = __toESM(require_pick());
var import_isEqual = __toESM(require_isEqual());
var Pr = { background: "transparent", text: { fontFamily: "sans-serif", fontSize: 11, fill: "#333333", outlineWidth: 0, outlineColor: "transparent", outlineOpacity: 1 }, axis: { domain: { line: { stroke: "transparent", strokeWidth: 1 } }, ticks: { line: { stroke: "#777777", strokeWidth: 1 }, text: {} }, legend: { text: { fontSize: 12 } } }, grid: { line: { stroke: "#dddddd", strokeWidth: 1 } }, legends: { hidden: { symbol: { fill: "#333333", opacity: 0.6 }, text: { fill: "#333333", opacity: 0.6 } }, text: {}, ticks: { line: { stroke: "#777777", strokeWidth: 1 }, text: { fontSize: 10 } }, title: { text: {} } }, labels: { text: {} }, markers: { lineColor: "#000000", lineStrokeWidth: 1, text: {} }, dots: { text: {} }, tooltip: { container: { background: "white", color: "inherit", fontSize: "inherit", borderRadius: "2px", boxShadow: "0 1px 2px rgba(0, 0, 0, 0.25)", padding: "5px 9px" }, basic: { whiteSpace: "pre", display: "flex", alignItems: "center" }, chip: { marginRight: 7 }, table: {}, tableCell: { padding: "3px 5px" }, tableCellValue: { fontWeight: "bold" } }, crosshair: { line: { stroke: "#000000", strokeWidth: 1, strokeOpacity: 0.75, strokeDasharray: "6 6" } }, annotations: { text: { fontSize: 13, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, link: { stroke: "#000000", strokeWidth: 1, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, outline: { fill: "none", stroke: "#000000", strokeWidth: 2, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, symbol: { fill: "#000000", outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 } } };
function jr() {
  return jr = Object.assign ? Object.assign.bind() : function(e11) {
    for (var r6 = 1; r6 < arguments.length; r6++) {
      var t8 = arguments[r6];
      for (var n7 in t8) Object.prototype.hasOwnProperty.call(t8, n7) && (e11[n7] = t8[n7]);
    }
    return e11;
  }, jr.apply(this, arguments);
}
function Br(e11, r6) {
  if (null == e11) return {};
  var t8, n7, i6 = {}, o5 = Object.keys(e11);
  for (n7 = 0; n7 < o5.length; n7++) t8 = o5[n7], r6.indexOf(t8) >= 0 || (i6[t8] = e11[t8]);
  return i6;
}
var Gr = ["axis.ticks.text", "axis.legend.text", "legends.title.text", "legends.text", "legends.ticks.text", "legends.title.text", "labels.text", "dots.text", "markers.text", "annotations.text"];
var Lr = function(e11, r6) {
  return jr({}, r6, e11);
};
var Ir = function(e11, r6) {
  var t8 = (0, import_merge2.default)({}, e11, r6);
  return Gr.forEach(function(e12) {
    (0, import_set2.default)(t8, e12, Lr((0, import_get.default)(t8, e12), t8.text));
  }), t8;
};
var Yr = (0, import_react16.createContext)();
var Ar = function(e11) {
  var t8 = e11.children, n7 = e11.animate, i6 = void 0 === n7 || n7, o5 = e11.config, l4 = void 0 === o5 ? "default" : o5, a5 = (0, import_react16.useMemo)(function() {
    var e12 = (0, import_isString.default)(l4) ? config[l4] : l4;
    return { animate: i6, config: e12 };
  }, [i6, l4]);
  return (0, import_jsx_runtime2.jsx)(Yr.Provider, { value: a5, children: t8 });
};
var Er = { animate: import_prop_types.default.bool, motionConfig: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(Object.keys(config)), import_prop_types.default.shape({ mass: import_prop_types.default.number, tension: import_prop_types.default.number, friction: import_prop_types.default.number, clamp: import_prop_types.default.bool, precision: import_prop_types.default.number, velocity: import_prop_types.default.number, duration: import_prop_types.default.number, easing: import_prop_types.default.func })]) };
Ar.propTypes = { children: import_prop_types.default.node.isRequired, animate: Er.animate, config: Er.motionConfig };
var Ur = function() {
  return (0, import_react16.useContext)(Yr);
};
var Fr = function(e11) {
  var t8 = Ur(), o5 = t8.animate, l4 = t8.config, a5 = function(e12) {
    var r6 = (0, import_react16.useRef)();
    return (0, import_react16.useEffect)(function() {
      r6.current = e12;
    }, [e12]), r6.current;
  }(e11), d3 = (0, import_react16.useMemo)(function() {
    return string_default(a5, e11);
  }, [a5, e11]), s3 = useSpring({ from: { value: 0 }, to: { value: 1 }, reset: true, config: l4, immediate: !o5 }).value;
  return to2(s3, d3);
};
var Xr = { nivo: ["#d76445", "#f47560", "#e8c1a0", "#97e3d5", "#61cdbb", "#00b0a7"], BrBG: (0, import_last.default)(scheme), PRGn: (0, import_last.default)(scheme2), PiYG: (0, import_last.default)(scheme3), PuOr: (0, import_last.default)(scheme4), RdBu: (0, import_last.default)(scheme5), RdGy: (0, import_last.default)(scheme6), RdYlBu: (0, import_last.default)(scheme7), RdYlGn: (0, import_last.default)(scheme8), spectral: (0, import_last.default)(scheme9), blues: (0, import_last.default)(scheme22), greens: (0, import_last.default)(scheme23), greys: (0, import_last.default)(scheme24), oranges: (0, import_last.default)(scheme27), purples: (0, import_last.default)(scheme25), reds: (0, import_last.default)(scheme26), BuGn: (0, import_last.default)(scheme10), BuPu: (0, import_last.default)(scheme11), GnBu: (0, import_last.default)(scheme12), OrRd: (0, import_last.default)(scheme13), PuBuGn: (0, import_last.default)(scheme14), PuBu: (0, import_last.default)(scheme15), PuRd: (0, import_last.default)(scheme16), RdPu: (0, import_last.default)(scheme17), YlGnBu: (0, import_last.default)(scheme18), YlGn: (0, import_last.default)(scheme19), YlOrBr: (0, import_last.default)(scheme20), YlOrRd: (0, import_last.default)(scheme21) };
var Nr = Object.keys(Xr);
var Kr = { nivo: ["#e8c1a0", "#f47560", "#f1e15b", "#e8a838", "#61cdbb", "#97e3d5"], category10: category10_default, accent: Accent_default, dark2: Dark2_default, paired: Paired_default, pastel1: Pastel1_default, pastel2: Pastel2_default, set1: Set1_default, set2: Set2_default, set3: Set3_default, brown_blueGreen: (0, import_last.default)(scheme), purpleRed_green: (0, import_last.default)(scheme2), pink_yellowGreen: (0, import_last.default)(scheme3), purple_orange: (0, import_last.default)(scheme4), red_blue: (0, import_last.default)(scheme5), red_grey: (0, import_last.default)(scheme6), red_yellow_blue: (0, import_last.default)(scheme7), red_yellow_green: (0, import_last.default)(scheme8), spectral: (0, import_last.default)(scheme9), blues: (0, import_last.default)(scheme22), greens: (0, import_last.default)(scheme23), greys: (0, import_last.default)(scheme24), oranges: (0, import_last.default)(scheme27), purples: (0, import_last.default)(scheme25), reds: (0, import_last.default)(scheme26), blue_green: (0, import_last.default)(scheme10), blue_purple: (0, import_last.default)(scheme11), green_blue: (0, import_last.default)(scheme12), orange_red: (0, import_last.default)(scheme13), purple_blue_green: (0, import_last.default)(scheme14), purple_blue: (0, import_last.default)(scheme15), purple_red: (0, import_last.default)(scheme16), red_purple: (0, import_last.default)(scheme17), yellow_green_blue: (0, import_last.default)(scheme18), yellow_green: (0, import_last.default)(scheme19), yellow_orange_brown: (0, import_last.default)(scheme20), yellow_orange_red: (0, import_last.default)(scheme21) };
var et = import_prop_types.default.oneOfType([import_prop_types.default.oneOf(Nr), import_prop_types.default.func, import_prop_types.default.arrayOf(import_prop_types.default.string)]);
var rt = { basis: basis_default, basisClosed: basisClosed_default, basisOpen: basisOpen_default, bundle: bundle_default, cardinal: cardinal_default, cardinalClosed: cardinalClosed_default, cardinalOpen: cardinalOpen_default, catmullRom: catmullRom_default, catmullRomClosed: catmullRomClosed_default, catmullRomOpen: catmullRomOpen_default, linear: linear_default, linearClosed: linearClosed_default, monotoneX, monotoneY, natural: natural_default, step: step_default, stepAfter, stepBefore };
var tt = Object.keys(rt);
var nt = tt.filter(function(e11) {
  return e11.endsWith("Closed");
});
var it = (0, import_without.default)(tt, "bundle", "basisClosed", "basisOpen", "cardinalClosed", "cardinalOpen", "catmullRomClosed", "catmullRomOpen", "linearClosed");
var ot = (0, import_without.default)(tt, "bundle", "basisClosed", "basisOpen", "cardinalClosed", "cardinalOpen", "catmullRomClosed", "catmullRomOpen", "linearClosed");
var at = { ascending: ascending_default, descending: descending_default, insideOut: insideOut_default, none: none_default2, reverse: reverse_default };
var dt = Object.keys(at);
var ut = { expand: expand_default, diverging: diverging_default, none: none_default, silhouette: silhouette_default, wiggle: wiggle_default };
var ct = Object.keys(ut);
var pt = import_prop_types.default.shape({ top: import_prop_types.default.number, right: import_prop_types.default.number, bottom: import_prop_types.default.number, left: import_prop_types.default.number }).isRequired;
var ht = ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
var gt = import_prop_types.default.oneOf(ht);
var vt = ordinal(Set3_default);
var _t = { top: 0, right: 0, bottom: 0, left: 0 };
var wt = function(e11, t8, n7) {
  return void 0 === n7 && (n7 = {}), (0, import_react16.useMemo)(function() {
    var r6 = jr({}, _t, n7);
    return { margin: r6, innerWidth: e11 - r6.left - r6.right, innerHeight: t8 - r6.top - r6.bottom, outerWidth: e11, outerHeight: t8 };
  }, [e11, t8, n7.top, n7.right, n7.bottom, n7.left]);
};
var kt = function() {
  var e11 = (0, import_react16.useRef)(null), r6 = (0, import_react16.useState)({ left: 0, top: 0, width: 0, height: 0 }), t8 = r6[0], l4 = r6[1], a5 = (0, import_react16.useState)(function() {
    return "undefined" == typeof ResizeObserver ? null : new ResizeObserver(function(e12) {
      var r7 = e12[0];
      return l4(r7.contentRect);
    });
  })[0];
  return (0, import_react16.useEffect)(function() {
    return e11.current && null !== a5 && a5.observe(e11.current), function() {
      null !== a5 && a5.disconnect();
    };
  }, []), [e11, t8];
};
var Rt = function(e11) {
  return (0, import_react16.useMemo)(function() {
    return Ir(Pr, e11);
  }, [e11]);
};
var xt = function(e11) {
  return "function" == typeof e11 ? e11 : "string" == typeof e11 ? 0 === e11.indexOf("time:") ? timeFormat(e11.slice("5")) : format(e11) : function(e12) {
    return "" + e12;
  };
};
var Ot = function(e11) {
  return (0, import_react16.useMemo)(function() {
    return xt(e11);
  }, [e11]);
};
var qt = (0, import_react16.createContext)();
var Ct = {};
var Wt = function(e11) {
  var r6 = e11.theme, t8 = void 0 === r6 ? Ct : r6, n7 = e11.children, i6 = Rt(t8);
  return (0, import_jsx_runtime2.jsx)(qt.Provider, { value: i6, children: n7 });
};
Wt.propTypes = { children: import_prop_types.default.node.isRequired, theme: import_prop_types.default.object };
var zt = function() {
  return (0, import_react16.useContext)(qt);
};
var Tt = ["outlineWidth", "outlineColor", "outlineOpacity"];
var Mt = function(e11) {
  return e11.outlineWidth, e11.outlineColor, e11.outlineOpacity, Br(e11, Tt);
};
var Pt = function(e11) {
  var r6 = e11.children, t8 = e11.condition, n7 = e11.wrapper;
  return t8 ? (0, import_react16.cloneElement)(n7, {}, r6) : r6;
};
Pt.propTypes = { children: import_prop_types.default.node.isRequired, condition: import_prop_types.default.bool.isRequired, wrapper: import_prop_types.default.element.isRequired };
var jt = { position: "relative" };
var St = function(e11) {
  var r6 = e11.children, t8 = e11.theme, i6 = e11.renderWrapper, o5 = void 0 === i6 || i6, l4 = e11.isInteractive, a5 = void 0 === l4 || l4, d3 = e11.animate, s3 = e11.motionConfig, u2 = (0, import_react16.useRef)(null);
  return (0, import_jsx_runtime2.jsx)(Wt, { theme: t8, children: (0, import_jsx_runtime2.jsx)(Ar, { animate: d3, config: s3, children: (0, import_jsx_runtime2.jsx)(M, { container: u2, children: (0, import_jsx_runtime2.jsxs)(Pt, { condition: o5, wrapper: (0, import_jsx_runtime2.jsx)("div", { style: jt, ref: u2 }), children: [r6, a5 && (0, import_jsx_runtime2.jsx)(F, {})] }) }) }) });
};
St.propTypes = { children: import_prop_types.default.element.isRequired, isInteractive: import_prop_types.default.bool, renderWrapper: import_prop_types.default.bool, theme: import_prop_types.default.object, animate: import_prop_types.default.bool, motionConfig: import_prop_types.default.oneOfType([import_prop_types.default.string, Er.motionConfig]) };
var Bt = function() {
};
var Gt = { position: "relative" };
var Lt = function(e11) {
  var t8 = e11.children, i6 = e11.theme, o5 = e11.isInteractive, l4 = void 0 === o5 || o5, d3 = e11.renderWrapper, s3 = void 0 === d3 || d3, u2 = e11.animate, c9 = e11.motionConfig, f2 = (0, import_react16.useRef)(null), m4 = V(f2), y4 = m4.actions, v5 = m4.state, _2 = (0, import_react16.useCallback)(function(e12, r6) {
    return y4.showTooltipFromEvent(e12, r6);
  }, [y4.showTooltipFromEvent]), w4 = (0, import_react16.useMemo)(function() {
    return { showTooltip: l4 ? _2 : Bt, hideTooltip: l4 ? y4.hideTooltip : Bt };
  }, [y4.hideTooltip, l4, _2]);
  return (0, import_jsx_runtime2.jsx)(Wt, { theme: i6, children: (0, import_jsx_runtime2.jsx)(Ar, { animate: u2, config: c9, children: (0, import_jsx_runtime2.jsx)(j.Provider, { value: y4, children: (0, import_jsx_runtime2.jsx)(O.Provider, { value: v5, children: (0, import_jsx_runtime2.jsxs)(Pt, { condition: s3, wrapper: (0, import_jsx_runtime2.jsx)("div", { style: Gt, ref: f2 }), children: [t8(w4), l4 && (0, import_jsx_runtime2.jsx)(F, {})] }) }) }) }) });
};
Lt.propTypes = { children: import_prop_types.default.func.isRequired, isInteractive: import_prop_types.default.bool, renderWrapper: import_prop_types.default.bool, theme: import_prop_types.default.object.isRequired, animate: import_prop_types.default.bool.isRequired, motionConfig: import_prop_types.default.oneOfType([import_prop_types.default.string, Er.motionConfig]) };
var It = function(e11) {
  var r6 = e11.children, t8 = kt(), n7 = t8[0], i6 = t8[1], o5 = i6.width > 0 && i6.height > 0;
  return (0, import_jsx_runtime2.jsx)("div", { ref: n7, style: { width: "100%", height: "100%" }, children: o5 && r6({ width: i6.width, height: i6.height }) });
};
It.propTypes = { children: import_prop_types.default.func.isRequired };
var Yt = ["id", "colors"];
var Dt = function(e11) {
  var r6 = e11.id, t8 = e11.colors, n7 = Br(e11, Yt);
  return (0, import_jsx_runtime2.jsx)("linearGradient", jr({ id: r6, x1: 0, x2: 0, y1: 0, y2: 1 }, n7, { children: t8.map(function(e12) {
    var r7 = e12.offset, t9 = e12.color, n8 = e12.opacity;
    return (0, import_jsx_runtime2.jsx)("stop", { offset: r7 + "%", stopColor: t9, stopOpacity: void 0 !== n8 ? n8 : 1 }, r7);
  }) }));
};
Dt.propTypes = { id: import_prop_types.default.string.isRequired, colors: import_prop_types.default.arrayOf(import_prop_types.default.shape({ offset: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, opacity: import_prop_types.default.number })).isRequired, gradientTransform: import_prop_types.default.string };
var Et = { linearGradient: Dt };
var Ut = { color: "#000000", background: "#ffffff", size: 4, padding: 4, stagger: false };
var Ft = (0, import_react16.memo)(function(e11) {
  var r6 = e11.id, t8 = e11.background, n7 = void 0 === t8 ? Ut.background : t8, i6 = e11.color, o5 = void 0 === i6 ? Ut.color : i6, l4 = e11.size, a5 = void 0 === l4 ? Ut.size : l4, d3 = e11.padding, s3 = void 0 === d3 ? Ut.padding : d3, u2 = e11.stagger, c9 = void 0 === u2 ? Ut.stagger : u2, f2 = a5 + s3, p5 = a5 / 2, h2 = s3 / 2;
  return true === c9 && (f2 = 2 * a5 + 2 * s3), (0, import_jsx_runtime2.jsxs)("pattern", { id: r6, width: f2, height: f2, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime2.jsx)("rect", { width: f2, height: f2, fill: n7 }), (0, import_jsx_runtime2.jsx)("circle", { cx: h2 + p5, cy: h2 + p5, r: p5, fill: o5 }), c9 && (0, import_jsx_runtime2.jsx)("circle", { cx: 1.5 * s3 + a5 + p5, cy: 1.5 * s3 + a5 + p5, r: p5, fill: o5 })] });
});
Ft.displayName = "PatternDots", Ft.propTypes = { id: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, background: import_prop_types.default.string.isRequired, size: import_prop_types.default.number.isRequired, padding: import_prop_types.default.number.isRequired, stagger: import_prop_types.default.bool.isRequired };
var Nt = 2 * Math.PI;
var Ht = function(e11) {
  return e11 * Math.PI / 180;
};
var Kt = function(e11) {
  return 180 * e11 / Math.PI;
};
var Jt = function(e11, r6) {
  return { x: Math.cos(e11) * r6, y: Math.sin(e11) * r6 };
};
var Qt = function(e11) {
  var r6 = e11 % 360;
  return r6 < 0 && (r6 += 360), r6;
};
var rn = { svg: { align: { left: "start", center: "middle", right: "end", start: "start", middle: "middle", end: "end" }, baseline: { top: "text-before-edge", center: "central", bottom: "alphabetic" } }, canvas: { align: { left: "left", center: "center", right: "right", start: "left", middle: "center", end: "right" }, baseline: { top: "top", center: "middle", bottom: "bottom" } } };
var nn = { spacing: 5, rotation: 0, background: "#000000", color: "#ffffff", lineWidth: 2 };
var on = (0, import_react16.memo)(function(e11) {
  var r6 = e11.id, t8 = e11.spacing, n7 = void 0 === t8 ? nn.spacing : t8, i6 = e11.rotation, o5 = void 0 === i6 ? nn.rotation : i6, l4 = e11.background, a5 = void 0 === l4 ? nn.background : l4, d3 = e11.color, s3 = void 0 === d3 ? nn.color : d3, u2 = e11.lineWidth, c9 = void 0 === u2 ? nn.lineWidth : u2, f2 = Math.round(o5) % 360, p5 = Math.abs(n7);
  f2 > 180 ? f2 -= 360 : f2 > 90 ? f2 -= 180 : f2 < -180 ? f2 += 360 : f2 < -90 && (f2 += 180);
  var h2, g5 = p5, b5 = p5;
  return 0 === f2 ? h2 = "\n                M 0 0 L " + g5 + " 0\n                M 0 " + b5 + " L " + g5 + " " + b5 + "\n            " : 90 === f2 ? h2 = "\n                M 0 0 L 0 " + b5 + "\n                M " + g5 + " 0 L " + g5 + " " + b5 + "\n            " : (g5 = Math.abs(p5 / Math.sin(Ht(f2))), b5 = p5 / Math.sin(Ht(90 - f2)), h2 = f2 > 0 ? "\n                    M 0 " + -b5 + " L " + 2 * g5 + " " + b5 + "\n                    M " + -g5 + " " + -b5 + " L " + g5 + " " + b5 + "\n                    M " + -g5 + " 0 L " + g5 + " " + 2 * b5 + "\n                " : "\n                    M " + -g5 + " " + b5 + " L " + g5 + " " + -b5 + "\n                    M " + -g5 + " " + 2 * b5 + " L " + 2 * g5 + " " + -b5 + "\n                    M 0 " + 2 * b5 + " L " + 2 * g5 + " 0\n                "), (0, import_jsx_runtime2.jsxs)("pattern", { id: r6, width: g5, height: b5, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime2.jsx)("rect", { width: g5, height: b5, fill: a5, stroke: "rgba(255, 0, 0, 0.1)", strokeWidth: 0 }), (0, import_jsx_runtime2.jsx)("path", { d: h2, strokeWidth: c9, stroke: s3, strokeLinecap: "square" })] });
});
on.displayName = "PatternLines", on.propTypes = { id: import_prop_types.default.string.isRequired, spacing: import_prop_types.default.number.isRequired, rotation: import_prop_types.default.number.isRequired, background: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, lineWidth: import_prop_types.default.number.isRequired };
var an = { color: "#000000", background: "#ffffff", size: 4, padding: 4, stagger: false };
var dn = (0, import_react16.memo)(function(e11) {
  var r6 = e11.id, t8 = e11.color, n7 = void 0 === t8 ? an.color : t8, i6 = e11.background, o5 = void 0 === i6 ? an.background : i6, l4 = e11.size, a5 = void 0 === l4 ? an.size : l4, d3 = e11.padding, s3 = void 0 === d3 ? an.padding : d3, u2 = e11.stagger, c9 = void 0 === u2 ? an.stagger : u2, f2 = a5 + s3, p5 = s3 / 2;
  return true === c9 && (f2 = 2 * a5 + 2 * s3), (0, import_jsx_runtime2.jsxs)("pattern", { id: r6, width: f2, height: f2, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime2.jsx)("rect", { width: f2, height: f2, fill: o5 }), (0, import_jsx_runtime2.jsx)("rect", { x: p5, y: p5, width: a5, height: a5, fill: n7 }), c9 && (0, import_jsx_runtime2.jsx)("rect", { x: 1.5 * s3 + a5, y: 1.5 * s3 + a5, width: a5, height: a5, fill: n7 })] });
});
dn.displayName = "PatternSquares", dn.propTypes = { id: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, background: import_prop_types.default.string.isRequired, size: import_prop_types.default.number.isRequired, padding: import_prop_types.default.number.isRequired, stagger: import_prop_types.default.bool.isRequired };
var un = { patternDots: Ft, patternLines: on, patternSquares: dn };
var cn = ["type"];
var fn = jr({}, Et, un);
var pn = function(e11) {
  var r6 = e11.defs;
  return !r6 || r6.length < 1 ? null : (0, import_jsx_runtime2.jsx)("defs", { "aria-hidden": true, children: r6.map(function(e12) {
    var r7 = e12.type, t8 = Br(e12, cn);
    return fn[r7] ? (0, import_react16.createElement)(fn[r7], jr({ key: t8.id }, t8)) : null;
  }) });
};
pn.propTypes = { defs: import_prop_types.default.arrayOf(import_prop_types.default.shape({ type: import_prop_types.default.oneOf(Object.keys(fn)).isRequired, id: import_prop_types.default.string.isRequired })) };
var hn = (0, import_react16.memo)(pn);
var gn = function(e11) {
  var r6 = e11.width, t8 = e11.height, n7 = e11.margin, i6 = e11.defs, o5 = e11.children, l4 = e11.role, a5 = e11.ariaLabel, d3 = e11.ariaLabelledBy, s3 = e11.ariaDescribedBy, u2 = e11.isFocusable, c9 = zt();
  return (0, import_jsx_runtime2.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", width: r6, height: t8, role: l4, "aria-label": a5, "aria-labelledby": d3, "aria-describedby": s3, focusable: u2, tabIndex: u2 ? 0 : void 0, children: [(0, import_jsx_runtime2.jsx)(hn, { defs: i6 }), (0, import_jsx_runtime2.jsx)("rect", { width: r6, height: t8, fill: c9.background }), (0, import_jsx_runtime2.jsx)("g", { transform: "translate(" + n7.left + "," + n7.top + ")", children: o5 })] });
};
gn.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, margin: import_prop_types.default.shape({ top: import_prop_types.default.number.isRequired, left: import_prop_types.default.number.isRequired }).isRequired, defs: import_prop_types.default.array, children: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.node), import_prop_types.default.node]).isRequired, role: import_prop_types.default.string, isFocusable: import_prop_types.default.bool, ariaLabel: import_prop_types.default.string, ariaLabelledBy: import_prop_types.default.string, ariaDescribedBy: import_prop_types.default.string };
var bn = function(e11) {
  var r6 = e11.size, t8 = e11.color, n7 = e11.borderWidth, i6 = e11.borderColor;
  return (0, import_jsx_runtime2.jsx)("circle", { r: r6 / 2, fill: t8, stroke: i6, strokeWidth: n7, style: { pointerEvents: "none" } });
};
bn.propTypes = { size: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, borderWidth: import_prop_types.default.number.isRequired, borderColor: import_prop_types.default.string.isRequired };
var mn = (0, import_react16.memo)(bn);
var yn = function(e11) {
  var r6 = e11.x, t8 = e11.y, n7 = e11.symbol, i6 = void 0 === n7 ? mn : n7, o5 = e11.size, l4 = e11.datum, a5 = e11.color, d3 = e11.borderWidth, u2 = e11.borderColor, c9 = e11.label, f2 = e11.labelTextAnchor, p5 = void 0 === f2 ? "middle" : f2, h2 = e11.labelYOffset, g5 = void 0 === h2 ? -12 : h2, b5 = zt(), m4 = Ur(), y4 = m4.animate, v5 = m4.config, _2 = useSpring({ transform: "translate(" + r6 + ", " + t8 + ")", config: v5, immediate: !y4 });
  return (0, import_jsx_runtime2.jsxs)(animated.g, { transform: _2.transform, style: { pointerEvents: "none" }, children: [(0, import_react16.createElement)(i6, { size: o5, color: a5, datum: l4, borderWidth: d3, borderColor: u2 }), c9 && (0, import_jsx_runtime2.jsx)("text", { textAnchor: p5, y: g5, style: Mt(b5.dots.text), children: c9 })] });
};
yn.propTypes = { x: import_prop_types.default.number.isRequired, y: import_prop_types.default.number.isRequired, datum: import_prop_types.default.object.isRequired, size: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, borderWidth: import_prop_types.default.number.isRequired, borderColor: import_prop_types.default.string.isRequired, symbol: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]), label: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number]), labelTextAnchor: import_prop_types.default.oneOf(["start", "middle", "end"]), labelYOffset: import_prop_types.default.number };
var vn = (0, import_react16.memo)(yn);
var _n = function(e11) {
  var r6 = e11.width, t8 = e11.height, n7 = e11.axis, i6 = e11.scale, o5 = e11.value, l4 = e11.lineStyle, a5 = e11.textStyle, d3 = e11.legend, s3 = e11.legendNode, u2 = e11.legendPosition, c9 = void 0 === u2 ? "top-right" : u2, f2 = e11.legendOffsetX, p5 = void 0 === f2 ? 14 : f2, h2 = e11.legendOffsetY, g5 = void 0 === h2 ? 14 : h2, b5 = e11.legendOrientation, m4 = void 0 === b5 ? "horizontal" : b5, y4 = zt(), v5 = 0, _2 = 0, w4 = 0, k4 = 0;
  if ("y" === n7 ? (w4 = i6(o5), _2 = r6) : (v5 = i6(o5), k4 = t8), d3 && !s3) {
    var R3 = function(e12) {
      var r7 = e12.axis, t9 = e12.width, n8 = e12.height, i7 = e12.position, o6 = e12.offsetX, l5 = e12.offsetY, a6 = e12.orientation, d4 = 0, s4 = 0, u3 = "vertical" === a6 ? -90 : 0, c10 = "start";
      if ("x" === r7) switch (i7) {
        case "top-left":
          d4 = -o6, s4 = l5, c10 = "end";
          break;
        case "top":
          s4 = -l5, c10 = "horizontal" === a6 ? "middle" : "start";
          break;
        case "top-right":
          d4 = o6, s4 = l5, c10 = "horizontal" === a6 ? "start" : "end";
          break;
        case "right":
          d4 = o6, s4 = n8 / 2, c10 = "horizontal" === a6 ? "start" : "middle";
          break;
        case "bottom-right":
          d4 = o6, s4 = n8 - l5, c10 = "start";
          break;
        case "bottom":
          s4 = n8 + l5, c10 = "horizontal" === a6 ? "middle" : "end";
          break;
        case "bottom-left":
          s4 = n8 - l5, d4 = -o6, c10 = "horizontal" === a6 ? "end" : "start";
          break;
        case "left":
          d4 = -o6, s4 = n8 / 2, c10 = "horizontal" === a6 ? "end" : "middle";
      }
      else switch (i7) {
        case "top-left":
          d4 = o6, s4 = -l5, c10 = "start";
          break;
        case "top":
          d4 = t9 / 2, s4 = -l5, c10 = "horizontal" === a6 ? "middle" : "start";
          break;
        case "top-right":
          d4 = t9 - o6, s4 = -l5, c10 = "horizontal" === a6 ? "end" : "start";
          break;
        case "right":
          d4 = t9 + o6, c10 = "horizontal" === a6 ? "start" : "middle";
          break;
        case "bottom-right":
          d4 = t9 - o6, s4 = l5, c10 = "end";
          break;
        case "bottom":
          d4 = t9 / 2, s4 = l5, c10 = "horizontal" === a6 ? "middle" : "end";
          break;
        case "bottom-left":
          d4 = o6, s4 = l5, c10 = "horizontal" === a6 ? "start" : "end";
          break;
        case "left":
          d4 = -o6, c10 = "horizontal" === a6 ? "end" : "middle";
      }
      return { x: d4, y: s4, rotation: u3, textAnchor: c10 };
    }({ axis: n7, width: r6, height: t8, position: c9, offsetX: p5, offsetY: g5, orientation: m4 });
    s3 = (0, import_jsx_runtime2.jsx)("text", { transform: "translate(" + R3.x + ", " + R3.y + ") rotate(" + R3.rotation + ")", textAnchor: R3.textAnchor, dominantBaseline: "central", style: a5, children: d3 });
  }
  return (0, import_jsx_runtime2.jsxs)("g", { transform: "translate(" + v5 + ", " + w4 + ")", children: [(0, import_jsx_runtime2.jsx)("line", { x1: 0, x2: _2, y1: 0, y2: k4, stroke: y4.markers.lineColor, strokeWidth: y4.markers.lineStrokeWidth, style: l4 }), s3] });
};
_n.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, axis: import_prop_types.default.oneOf(["x", "y"]).isRequired, scale: import_prop_types.default.func.isRequired, value: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]).isRequired, lineStyle: import_prop_types.default.object, textStyle: import_prop_types.default.object, legend: import_prop_types.default.string, legendPosition: import_prop_types.default.oneOf(["top-left", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left"]), legendOffsetX: import_prop_types.default.number.isRequired, legendOffsetY: import_prop_types.default.number.isRequired, legendOrientation: import_prop_types.default.oneOf(["horizontal", "vertical"]).isRequired };
var wn = (0, import_react16.memo)(_n);
var kn = function(e11) {
  var r6 = e11.markers, t8 = e11.width, n7 = e11.height, i6 = e11.xScale, o5 = e11.yScale;
  return r6 && 0 !== r6.length ? r6.map(function(e12, r7) {
    return (0, import_jsx_runtime2.jsx)(wn, jr({}, e12, { width: t8, height: n7, scale: "y" === e12.axis ? o5 : i6 }), r7);
  }) : null;
};
kn.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, xScale: import_prop_types.default.func.isRequired, yScale: import_prop_types.default.func.isRequired, markers: import_prop_types.default.arrayOf(import_prop_types.default.shape({ axis: import_prop_types.default.oneOf(["x", "y"]).isRequired, value: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]).isRequired, lineStyle: import_prop_types.default.object, textStyle: import_prop_types.default.object })) };
var Rn = (0, import_react16.memo)(kn);
var Cn = function(e11) {
  return (0, import_isFunction.default)(e11) ? e11 : function(r6) {
    return (0, import_get.default)(r6, e11);
  };
};
var Wn = function(e11) {
  return (0, import_react16.useMemo)(function() {
    return Cn(e11);
  }, [e11]);
};
var jn = function(e11, r6, t8, n7, i6, o5) {
  return e11 <= i6 && i6 <= e11 + t8 && r6 <= o5 && o5 <= r6 + n7;
};
var Sn = function(e11, r6) {
  var t8, n7 = "touches" in r6 ? r6.touches[0] : r6, i6 = n7.clientX, o5 = n7.clientY, l4 = e11.getBoundingClientRect(), a5 = (t8 = void 0 !== e11.getBBox ? e11.getBBox() : { width: e11.offsetWidth || 0, height: e11.offsetHeight || 0 }).width === l4.width ? 1 : t8.width / l4.width;
  return [(i6 - l4.left) * a5, (o5 - l4.top) * a5];
};
var Bn = Object.keys(Et);
var Gn = Object.keys(un);

// node_modules/@nivo/axes/dist/nivo-axes.es.js
var t4 = __toESM(require_react());
var import_react17 = __toESM(require_react());

// node_modules/@nivo/axes/node_modules/d3-time/src/interval.js
var t02 = /* @__PURE__ */ new Date();
var t12 = /* @__PURE__ */ new Date();
function newInterval2(floori, offseti, count3, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = function(date) {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start2, stop2, step) {
    var range = [], previous;
    start2 = interval.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop2) || !(step > 0)) return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop2);
    return range;
  };
  interval.filter = function(test) {
    return newInterval2(function(date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {
          }
        }
        else while (--step >= 0) {
          while (offseti(date, 1), !test(date)) {
          }
        }
      }
    });
  };
  if (count3) {
    interval.count = function(start2, end) {
      t02.setTime(+start2), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count3(t02, t12));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d3) {
        return field(d3) % step === 0;
      } : function(d3) {
        return interval.count(0, d3) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/@nivo/axes/node_modules/d3-time/src/millisecond.js
var millisecond2 = newInterval2(function() {
}, function(date, step) {
  date.setTime(+date + step);
}, function(start2, end) {
  return end - start2;
});
millisecond2.every = function(k4) {
  k4 = Math.floor(k4);
  if (!isFinite(k4) || !(k4 > 0)) return null;
  if (!(k4 > 1)) return millisecond2;
  return newInterval2(function(date) {
    date.setTime(Math.floor(date / k4) * k4);
  }, function(date, step) {
    date.setTime(+date + step * k4);
  }, function(start2, end) {
    return (end - start2) / k4;
  });
};
var millisecond_default2 = millisecond2;
var milliseconds2 = millisecond2.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/duration.js
var durationSecond2 = 1e3;
var durationMinute2 = durationSecond2 * 60;
var durationHour2 = durationMinute2 * 60;
var durationDay2 = durationHour2 * 24;
var durationWeek2 = durationDay2 * 7;
var durationMonth2 = durationDay2 * 30;
var durationYear2 = durationDay2 * 365;

// node_modules/@nivo/axes/node_modules/d3-time/src/second.js
var second2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond2);
}, function(start2, end) {
  return (end - start2) / durationSecond2;
}, function(date) {
  return date.getUTCSeconds();
});
var second_default2 = second2;
var seconds2 = second2.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/minute.js
var minute2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond2);
}, function(date, step) {
  date.setTime(+date + step * durationMinute2);
}, function(start2, end) {
  return (end - start2) / durationMinute2;
}, function(date) {
  return date.getMinutes();
});
var minute_default2 = minute2;
var minutes2 = minute2.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/hour.js
var hour2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond2 - date.getMinutes() * durationMinute2);
}, function(date, step) {
  date.setTime(+date + step * durationHour2);
}, function(start2, end) {
  return (end - start2) / durationHour2;
}, function(date) {
  return date.getHours();
});
var hour_default2 = hour2;
var hours2 = hour2.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/day.js
var day2 = newInterval2(
  (date) => date.setHours(0, 0, 0, 0),
  (date, step) => date.setDate(date.getDate() + step),
  (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute2) / durationDay2,
  (date) => date.getDate() - 1
);
var day_default2 = day2;
var days2 = day2.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/week.js
function weekday2(i6) {
  return newInterval2(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i6) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start2, end) {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute2) / durationWeek2;
  });
}
var sunday2 = weekday2(0);
var monday2 = weekday2(1);
var tuesday2 = weekday2(2);
var wednesday2 = weekday2(3);
var thursday2 = weekday2(4);
var friday2 = weekday2(5);
var saturday2 = weekday2(6);
var sundays2 = sunday2.range;
var mondays2 = monday2.range;
var tuesdays2 = tuesday2.range;
var wednesdays2 = wednesday2.range;
var thursdays2 = thursday2.range;
var fridays2 = friday2.range;
var saturdays2 = saturday2.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/month.js
var month2 = newInterval2(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start2, end) {
  return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var month_default2 = month2;
var months2 = month2.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/year.js
var year2 = newInterval2(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start2, end) {
  return end.getFullYear() - start2.getFullYear();
}, function(date) {
  return date.getFullYear();
});
year2.every = function(k4) {
  return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval2(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k4) * k4);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k4);
  });
};
var year_default2 = year2;
var years2 = year2.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcMinute.js
var utcMinute2 = newInterval2(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute2);
}, function(start2, end) {
  return (end - start2) / durationMinute2;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinute_default2 = utcMinute2;
var utcMinutes2 = utcMinute2.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcHour.js
var utcHour2 = newInterval2(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour2);
}, function(start2, end) {
  return (end - start2) / durationHour2;
}, function(date) {
  return date.getUTCHours();
});
var utcHour_default2 = utcHour2;
var utcHours2 = utcHour2.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcDay.js
var utcDay2 = newInterval2(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start2, end) {
  return (end - start2) / durationDay2;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDay_default2 = utcDay2;
var utcDays2 = utcDay2.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcWeek.js
function utcWeekday2(i6) {
  return newInterval2(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i6) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start2, end) {
    return (end - start2) / durationWeek2;
  });
}
var utcSunday2 = utcWeekday2(0);
var utcMonday2 = utcWeekday2(1);
var utcTuesday2 = utcWeekday2(2);
var utcWednesday2 = utcWeekday2(3);
var utcThursday2 = utcWeekday2(4);
var utcFriday2 = utcWeekday2(5);
var utcSaturday2 = utcWeekday2(6);
var utcSundays2 = utcSunday2.range;
var utcMondays2 = utcMonday2.range;
var utcTuesdays2 = utcTuesday2.range;
var utcWednesdays2 = utcWednesday2.range;
var utcThursdays2 = utcThursday2.range;
var utcFridays2 = utcFriday2.range;
var utcSaturdays2 = utcSaturday2.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcMonth.js
var utcMonth2 = newInterval2(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start2, end) {
  return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonth_default2 = utcMonth2;
var utcMonths2 = utcMonth2.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcYear.js
var utcYear2 = newInterval2(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start2, end) {
  return end.getUTCFullYear() - start2.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});
utcYear2.every = function(k4) {
  return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval2(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k4) * k4);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k4);
  });
};
var utcYear_default2 = utcYear2;
var utcYears2 = utcYear2.range;

// node_modules/@nivo/axes/node_modules/d3-array/src/ascending.js
function ascending_default3(a5, b5) {
  return a5 < b5 ? -1 : a5 > b5 ? 1 : a5 >= b5 ? 0 : NaN;
}

// node_modules/@nivo/axes/node_modules/d3-array/src/bisector.js
function bisector_default2(f2) {
  let delta = f2;
  let compare = f2;
  if (f2.length === 1) {
    delta = (d3, x3) => f2(d3) - x3;
    compare = ascendingComparator2(f2);
  }
  function left(a5, x3, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a5.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a5[mid], x3) < 0) lo = mid + 1;
      else hi = mid;
    }
    return lo;
  }
  function right(a5, x3, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a5.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a5[mid], x3) > 0) hi = mid;
      else lo = mid + 1;
    }
    return lo;
  }
  function center(a5, x3, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a5.length;
    const i6 = left(a5, x3, lo, hi - 1);
    return i6 > lo && delta(a5[i6 - 1], x3) > -delta(a5[i6], x3) ? i6 - 1 : i6;
  }
  return { left, center, right };
}
function ascendingComparator2(f2) {
  return (d3, x3) => ascending_default3(f2(d3), x3);
}

// node_modules/@nivo/axes/node_modules/d3-array/src/number.js
function number_default2(x3) {
  return x3 === null ? NaN : +x3;
}

// node_modules/@nivo/axes/node_modules/d3-array/src/bisect.js
var ascendingBisect2 = bisector_default2(ascending_default3);
var bisectRight2 = ascendingBisect2.right;
var bisectLeft2 = ascendingBisect2.left;
var bisectCenter2 = bisector_default2(number_default2).center;

// node_modules/@nivo/axes/node_modules/d3-array/src/array.js
var array2 = Array.prototype;
var slice2 = array2.slice;
var map4 = array2.map;

// node_modules/@nivo/axes/node_modules/d3-array/src/ticks.js
var e102 = Math.sqrt(50);
var e52 = Math.sqrt(10);
var e22 = Math.sqrt(2);
function tickStep2(start2, stop2, count3) {
  var step0 = Math.abs(stop2 - start2) / Math.max(0, count3), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e102) step1 *= 10;
  else if (error >= e52) step1 *= 5;
  else if (error >= e22) step1 *= 2;
  return stop2 < start2 ? -step1 : step1;
}

// node_modules/@nivo/axes/node_modules/d3-array/src/shuffle.js
var shuffle_default2 = shuffler2(Math.random);
function shuffler2(random) {
  return function shuffle(array3, i0 = 0, i1 = array3.length) {
    let m4 = i1 - (i0 = +i0);
    while (m4) {
      const i6 = random() * m4-- | 0, t8 = array3[m4 + i0];
      array3[m4 + i0] = array3[i6 + i0];
      array3[i6 + i0] = t8;
    }
    return array3;
  };
}

// node_modules/@nivo/axes/node_modules/d3-time/src/ticks.js
function ticker2(year4, month4, week, day4, hour4, minute4) {
  const tickIntervals = [
    [second_default2, 1, durationSecond2],
    [second_default2, 5, 5 * durationSecond2],
    [second_default2, 15, 15 * durationSecond2],
    [second_default2, 30, 30 * durationSecond2],
    [minute4, 1, durationMinute2],
    [minute4, 5, 5 * durationMinute2],
    [minute4, 15, 15 * durationMinute2],
    [minute4, 30, 30 * durationMinute2],
    [hour4, 1, durationHour2],
    [hour4, 3, 3 * durationHour2],
    [hour4, 6, 6 * durationHour2],
    [hour4, 12, 12 * durationHour2],
    [day4, 1, durationDay2],
    [day4, 2, 2 * durationDay2],
    [week, 1, durationWeek2],
    [month4, 1, durationMonth2],
    [month4, 3, 3 * durationMonth2],
    [year4, 1, durationYear2]
  ];
  function ticks(start2, stop2, count3) {
    const reverse3 = stop2 < start2;
    if (reverse3) [start2, stop2] = [stop2, start2];
    const interval = count3 && typeof count3.range === "function" ? count3 : tickInterval(start2, stop2, count3);
    const ticks2 = interval ? interval.range(start2, +stop2 + 1) : [];
    return reverse3 ? ticks2.reverse() : ticks2;
  }
  function tickInterval(start2, stop2, count3) {
    const target = Math.abs(stop2 - start2) / count3;
    const i6 = bisector_default2(([, , step2]) => step2).right(tickIntervals, target);
    if (i6 === tickIntervals.length) return year4.every(tickStep2(start2 / durationYear2, stop2 / durationYear2, count3));
    if (i6 === 0) return millisecond_default2.every(Math.max(tickStep2(start2, stop2, count3), 1));
    const [t8, step] = tickIntervals[target / tickIntervals[i6 - 1][2] < tickIntervals[i6][2] / target ? i6 - 1 : i6];
    return t8.every(step);
  }
  return [ticks, tickInterval];
}
var [utcTicks2, utcTickInterval2] = ticker2(utcYear_default2, utcMonth_default2, utcSunday2, utcDay_default2, utcHour_default2, utcMinute_default2);
var [timeTicks2, timeTickInterval2] = ticker2(year_default2, month_default2, sunday2, day_default2, hour_default2, minute_default2);

// node_modules/@nivo/axes/node_modules/d3-time-format/src/locale.js
function localDate2(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date = new Date(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
    date.setFullYear(d3.y);
    return date;
  }
  return new Date(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
}
function utcDate2(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date = new Date(Date.UTC(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
    date.setUTCFullYear(d3.y);
    return date;
  }
  return new Date(Date.UTC(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
}
function newDate2(y4, m4, d3) {
  return { y: y4, m: m4, d: d3, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale2(locale6) {
  var locale_dateTime = locale6.dateTime, locale_date = locale6.date, locale_time = locale6.time, locale_periods = locale6.periods, locale_weekdays = locale6.days, locale_shortWeekdays = locale6.shortDays, locale_months = locale6.months, locale_shortMonths = locale6.shortMonths;
  var periodRe = formatRe2(locale_periods), periodLookup = formatLookup2(locale_periods), weekdayRe = formatRe2(locale_weekdays), weekdayLookup = formatLookup2(locale_weekdays), shortWeekdayRe = formatRe2(locale_shortWeekdays), shortWeekdayLookup = formatLookup2(locale_shortWeekdays), monthRe = formatRe2(locale_months), monthLookup = formatLookup2(locale_months), shortMonthRe = formatRe2(locale_shortMonths), shortMonthLookup = formatLookup2(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth2,
    "e": formatDayOfMonth2,
    "f": formatMicroseconds2,
    "g": formatYearISO2,
    "G": formatFullYearISO2,
    "H": formatHour242,
    "I": formatHour122,
    "j": formatDayOfYear2,
    "L": formatMilliseconds2,
    "m": formatMonthNumber2,
    "M": formatMinutes2,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp2,
    "s": formatUnixTimestampSeconds2,
    "S": formatSeconds2,
    "u": formatWeekdayNumberMonday2,
    "U": formatWeekNumberSunday2,
    "V": formatWeekNumberISO2,
    "w": formatWeekdayNumberSunday2,
    "W": formatWeekNumberMonday2,
    "x": null,
    "X": null,
    "y": formatYear2,
    "Y": formatFullYear2,
    "Z": formatZone2,
    "%": formatLiteralPercent2
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth2,
    "e": formatUTCDayOfMonth2,
    "f": formatUTCMicroseconds2,
    "g": formatUTCYearISO2,
    "G": formatUTCFullYearISO2,
    "H": formatUTCHour242,
    "I": formatUTCHour122,
    "j": formatUTCDayOfYear2,
    "L": formatUTCMilliseconds2,
    "m": formatUTCMonthNumber2,
    "M": formatUTCMinutes2,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp2,
    "s": formatUnixTimestampSeconds2,
    "S": formatUTCSeconds2,
    "u": formatUTCWeekdayNumberMonday2,
    "U": formatUTCWeekNumberSunday2,
    "V": formatUTCWeekNumberISO2,
    "w": formatUTCWeekdayNumberSunday2,
    "W": formatUTCWeekNumberMonday2,
    "x": null,
    "X": null,
    "y": formatUTCYear2,
    "Y": formatUTCFullYear2,
    "Z": formatUTCZone2,
    "%": formatLiteralPercent2
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth2,
    "e": parseDayOfMonth2,
    "f": parseMicroseconds2,
    "g": parseYear2,
    "G": parseFullYear2,
    "H": parseHour242,
    "I": parseHour242,
    "j": parseDayOfYear2,
    "L": parseMilliseconds2,
    "m": parseMonthNumber2,
    "M": parseMinutes2,
    "p": parsePeriod,
    "q": parseQuarter2,
    "Q": parseUnixTimestamp2,
    "s": parseUnixTimestampSeconds2,
    "S": parseSeconds2,
    "u": parseWeekdayNumberMonday2,
    "U": parseWeekNumberSunday2,
    "V": parseWeekNumberISO2,
    "w": parseWeekdayNumberSunday2,
    "W": parseWeekNumberMonday2,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear2,
    "Y": parseFullYear2,
    "Z": parseZone2,
    "%": parseLiteralPercent2
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i6 = -1, j5 = 0, n7 = specifier.length, c9, pad4, format3;
      if (!(date instanceof Date)) date = /* @__PURE__ */ new Date(+date);
      while (++i6 < n7) {
        if (specifier.charCodeAt(i6) === 37) {
          string.push(specifier.slice(j5, i6));
          if ((pad4 = pads2[c9 = specifier.charAt(++i6)]) != null) c9 = specifier.charAt(++i6);
          else pad4 = c9 === "e" ? " " : "0";
          if (format3 = formats2[c9]) c9 = format3(date, pad4);
          string.push(c9);
          j5 = i6 + 1;
        }
      }
      string.push(specifier.slice(j5, i6));
      return string.join("");
    };
  }
  function newParse(specifier, Z2) {
    return function(string) {
      var d3 = newDate2(1900, void 0, 1), i6 = parseSpecifier(d3, specifier, string += "", 0), week, day4;
      if (i6 != string.length) return null;
      if ("Q" in d3) return new Date(d3.Q);
      if ("s" in d3) return new Date(d3.s * 1e3 + ("L" in d3 ? d3.L : 0));
      if (Z2 && !("Z" in d3)) d3.Z = 0;
      if ("p" in d3) d3.H = d3.H % 12 + d3.p * 12;
      if (d3.m === void 0) d3.m = "q" in d3 ? d3.q : 0;
      if ("V" in d3) {
        if (d3.V < 1 || d3.V > 53) return null;
        if (!("w" in d3)) d3.w = 1;
        if ("Z" in d3) {
          week = utcDate2(newDate2(d3.y, 0, 1)), day4 = week.getUTCDay();
          week = day4 > 4 || day4 === 0 ? utcMonday2.ceil(week) : utcMonday2(week);
          week = utcDay_default2.offset(week, (d3.V - 1) * 7);
          d3.y = week.getUTCFullYear();
          d3.m = week.getUTCMonth();
          d3.d = week.getUTCDate() + (d3.w + 6) % 7;
        } else {
          week = localDate2(newDate2(d3.y, 0, 1)), day4 = week.getDay();
          week = day4 > 4 || day4 === 0 ? monday2.ceil(week) : monday2(week);
          week = day_default2.offset(week, (d3.V - 1) * 7);
          d3.y = week.getFullYear();
          d3.m = week.getMonth();
          d3.d = week.getDate() + (d3.w + 6) % 7;
        }
      } else if ("W" in d3 || "U" in d3) {
        if (!("w" in d3)) d3.w = "u" in d3 ? d3.u % 7 : "W" in d3 ? 1 : 0;
        day4 = "Z" in d3 ? utcDate2(newDate2(d3.y, 0, 1)).getUTCDay() : localDate2(newDate2(d3.y, 0, 1)).getDay();
        d3.m = 0;
        d3.d = "W" in d3 ? (d3.w + 6) % 7 + d3.W * 7 - (day4 + 5) % 7 : d3.w + d3.U * 7 - (day4 + 6) % 7;
      }
      if ("Z" in d3) {
        d3.H += d3.Z / 100 | 0;
        d3.M += d3.Z % 100;
        return utcDate2(d3);
      }
      return localDate2(d3);
    };
  }
  function parseSpecifier(d3, specifier, string, j5) {
    var i6 = 0, n7 = specifier.length, m4 = string.length, c9, parse;
    while (i6 < n7) {
      if (j5 >= m4) return -1;
      c9 = specifier.charCodeAt(i6++);
      if (c9 === 37) {
        c9 = specifier.charAt(i6++);
        parse = parses[c9 in pads2 ? specifier.charAt(i6++) : c9];
        if (!parse || (j5 = parse(d3, string, j5)) < 0) return -1;
      } else if (c9 != string.charCodeAt(j5++)) {
        return -1;
      }
    }
    return j5;
  }
  function parsePeriod(d3, string, i6) {
    var n7 = periodRe.exec(string.slice(i6));
    return n7 ? (d3.p = periodLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseShortWeekday(d3, string, i6) {
    var n7 = shortWeekdayRe.exec(string.slice(i6));
    return n7 ? (d3.w = shortWeekdayLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseWeekday(d3, string, i6) {
    var n7 = weekdayRe.exec(string.slice(i6));
    return n7 ? (d3.w = weekdayLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseShortMonth(d3, string, i6) {
    var n7 = shortMonthRe.exec(string.slice(i6));
    return n7 ? (d3.m = shortMonthLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseMonth(d3, string, i6) {
    var n7 = monthRe.exec(string.slice(i6));
    return n7 ? (d3.m = monthLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseLocaleDateTime(d3, string, i6) {
    return parseSpecifier(d3, locale_dateTime, string, i6);
  }
  function parseLocaleDate(d3, string, i6) {
    return parseSpecifier(d3, locale_date, string, i6);
  }
  function parseLocaleTime(d3, string, i6) {
    return parseSpecifier(d3, locale_time, string, i6);
  }
  function formatShortWeekday(d3) {
    return locale_shortWeekdays[d3.getDay()];
  }
  function formatWeekday(d3) {
    return locale_weekdays[d3.getDay()];
  }
  function formatShortMonth(d3) {
    return locale_shortMonths[d3.getMonth()];
  }
  function formatMonth(d3) {
    return locale_months[d3.getMonth()];
  }
  function formatPeriod(d3) {
    return locale_periods[+(d3.getHours() >= 12)];
  }
  function formatQuarter(d3) {
    return 1 + ~~(d3.getMonth() / 3);
  }
  function formatUTCShortWeekday(d3) {
    return locale_shortWeekdays[d3.getUTCDay()];
  }
  function formatUTCWeekday(d3) {
    return locale_weekdays[d3.getUTCDay()];
  }
  function formatUTCShortMonth(d3) {
    return locale_shortMonths[d3.getUTCMonth()];
  }
  function formatUTCMonth(d3) {
    return locale_months[d3.getUTCMonth()];
  }
  function formatUTCPeriod(d3) {
    return locale_periods[+(d3.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d3) {
    return 1 + ~~(d3.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f2 = newFormat(specifier += "", formats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    parse: function(specifier) {
      var p5 = newParse(specifier += "", false);
      p5.toString = function() {
        return specifier;
      };
      return p5;
    },
    utcFormat: function(specifier) {
      var f2 = newFormat(specifier += "", utcFormats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    utcParse: function(specifier) {
      var p5 = newParse(specifier += "", true);
      p5.toString = function() {
        return specifier;
      };
      return p5;
    }
  };
}
var pads2 = { "-": "", "_": " ", "0": "0" };
var numberRe2 = /^\s*\d+/;
var percentRe2 = /^%/;
var requoteRe2 = /[\\^$*+?|[\]().{}]/g;
function pad2(value, fill, width) {
  var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote2(s3) {
  return s3.replace(requoteRe2, "\\$&");
}
function formatRe2(names) {
  return new RegExp("^(?:" + names.map(requote2).join("|") + ")", "i");
}
function formatLookup2(names) {
  return new Map(names.map((name, i6) => [name.toLowerCase(), i6]));
}
function parseWeekdayNumberSunday2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 1));
  return n7 ? (d3.w = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekdayNumberMonday2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 1));
  return n7 ? (d3.u = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekNumberSunday2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.U = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekNumberISO2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.V = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekNumberMonday2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.W = +n7[0], i6 + n7[0].length) : -1;
}
function parseFullYear2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 4));
  return n7 ? (d3.y = +n7[0], i6 + n7[0].length) : -1;
}
function parseYear2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.y = +n7[0] + (+n7[0] > 68 ? 1900 : 2e3), i6 + n7[0].length) : -1;
}
function parseZone2(d3, string, i6) {
  var n7 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i6, i6 + 6));
  return n7 ? (d3.Z = n7[1] ? 0 : -(n7[2] + (n7[3] || "00")), i6 + n7[0].length) : -1;
}
function parseQuarter2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 1));
  return n7 ? (d3.q = n7[0] * 3 - 3, i6 + n7[0].length) : -1;
}
function parseMonthNumber2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.m = n7[0] - 1, i6 + n7[0].length) : -1;
}
function parseDayOfMonth2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.d = +n7[0], i6 + n7[0].length) : -1;
}
function parseDayOfYear2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 3));
  return n7 ? (d3.m = 0, d3.d = +n7[0], i6 + n7[0].length) : -1;
}
function parseHour242(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.H = +n7[0], i6 + n7[0].length) : -1;
}
function parseMinutes2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.M = +n7[0], i6 + n7[0].length) : -1;
}
function parseSeconds2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.S = +n7[0], i6 + n7[0].length) : -1;
}
function parseMilliseconds2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 3));
  return n7 ? (d3.L = +n7[0], i6 + n7[0].length) : -1;
}
function parseMicroseconds2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6, i6 + 6));
  return n7 ? (d3.L = Math.floor(n7[0] / 1e3), i6 + n7[0].length) : -1;
}
function parseLiteralPercent2(d3, string, i6) {
  var n7 = percentRe2.exec(string.slice(i6, i6 + 1));
  return n7 ? i6 + n7[0].length : -1;
}
function parseUnixTimestamp2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6));
  return n7 ? (d3.Q = +n7[0], i6 + n7[0].length) : -1;
}
function parseUnixTimestampSeconds2(d3, string, i6) {
  var n7 = numberRe2.exec(string.slice(i6));
  return n7 ? (d3.s = +n7[0], i6 + n7[0].length) : -1;
}
function formatDayOfMonth2(d3, p5) {
  return pad2(d3.getDate(), p5, 2);
}
function formatHour242(d3, p5) {
  return pad2(d3.getHours(), p5, 2);
}
function formatHour122(d3, p5) {
  return pad2(d3.getHours() % 12 || 12, p5, 2);
}
function formatDayOfYear2(d3, p5) {
  return pad2(1 + day_default2.count(year_default2(d3), d3), p5, 3);
}
function formatMilliseconds2(d3, p5) {
  return pad2(d3.getMilliseconds(), p5, 3);
}
function formatMicroseconds2(d3, p5) {
  return formatMilliseconds2(d3, p5) + "000";
}
function formatMonthNumber2(d3, p5) {
  return pad2(d3.getMonth() + 1, p5, 2);
}
function formatMinutes2(d3, p5) {
  return pad2(d3.getMinutes(), p5, 2);
}
function formatSeconds2(d3, p5) {
  return pad2(d3.getSeconds(), p5, 2);
}
function formatWeekdayNumberMonday2(d3) {
  var day4 = d3.getDay();
  return day4 === 0 ? 7 : day4;
}
function formatWeekNumberSunday2(d3, p5) {
  return pad2(sunday2.count(year_default2(d3) - 1, d3), p5, 2);
}
function dISO2(d3) {
  var day4 = d3.getDay();
  return day4 >= 4 || day4 === 0 ? thursday2(d3) : thursday2.ceil(d3);
}
function formatWeekNumberISO2(d3, p5) {
  d3 = dISO2(d3);
  return pad2(thursday2.count(year_default2(d3), d3) + (year_default2(d3).getDay() === 4), p5, 2);
}
function formatWeekdayNumberSunday2(d3) {
  return d3.getDay();
}
function formatWeekNumberMonday2(d3, p5) {
  return pad2(monday2.count(year_default2(d3) - 1, d3), p5, 2);
}
function formatYear2(d3, p5) {
  return pad2(d3.getFullYear() % 100, p5, 2);
}
function formatYearISO2(d3, p5) {
  d3 = dISO2(d3);
  return pad2(d3.getFullYear() % 100, p5, 2);
}
function formatFullYear2(d3, p5) {
  return pad2(d3.getFullYear() % 1e4, p5, 4);
}
function formatFullYearISO2(d3, p5) {
  var day4 = d3.getDay();
  d3 = day4 >= 4 || day4 === 0 ? thursday2(d3) : thursday2.ceil(d3);
  return pad2(d3.getFullYear() % 1e4, p5, 4);
}
function formatZone2(d3) {
  var z6 = d3.getTimezoneOffset();
  return (z6 > 0 ? "-" : (z6 *= -1, "+")) + pad2(z6 / 60 | 0, "0", 2) + pad2(z6 % 60, "0", 2);
}
function formatUTCDayOfMonth2(d3, p5) {
  return pad2(d3.getUTCDate(), p5, 2);
}
function formatUTCHour242(d3, p5) {
  return pad2(d3.getUTCHours(), p5, 2);
}
function formatUTCHour122(d3, p5) {
  return pad2(d3.getUTCHours() % 12 || 12, p5, 2);
}
function formatUTCDayOfYear2(d3, p5) {
  return pad2(1 + utcDay_default2.count(utcYear_default2(d3), d3), p5, 3);
}
function formatUTCMilliseconds2(d3, p5) {
  return pad2(d3.getUTCMilliseconds(), p5, 3);
}
function formatUTCMicroseconds2(d3, p5) {
  return formatUTCMilliseconds2(d3, p5) + "000";
}
function formatUTCMonthNumber2(d3, p5) {
  return pad2(d3.getUTCMonth() + 1, p5, 2);
}
function formatUTCMinutes2(d3, p5) {
  return pad2(d3.getUTCMinutes(), p5, 2);
}
function formatUTCSeconds2(d3, p5) {
  return pad2(d3.getUTCSeconds(), p5, 2);
}
function formatUTCWeekdayNumberMonday2(d3) {
  var dow = d3.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday2(d3, p5) {
  return pad2(utcSunday2.count(utcYear_default2(d3) - 1, d3), p5, 2);
}
function UTCdISO2(d3) {
  var day4 = d3.getUTCDay();
  return day4 >= 4 || day4 === 0 ? utcThursday2(d3) : utcThursday2.ceil(d3);
}
function formatUTCWeekNumberISO2(d3, p5) {
  d3 = UTCdISO2(d3);
  return pad2(utcThursday2.count(utcYear_default2(d3), d3) + (utcYear_default2(d3).getUTCDay() === 4), p5, 2);
}
function formatUTCWeekdayNumberSunday2(d3) {
  return d3.getUTCDay();
}
function formatUTCWeekNumberMonday2(d3, p5) {
  return pad2(utcMonday2.count(utcYear_default2(d3) - 1, d3), p5, 2);
}
function formatUTCYear2(d3, p5) {
  return pad2(d3.getUTCFullYear() % 100, p5, 2);
}
function formatUTCYearISO2(d3, p5) {
  d3 = UTCdISO2(d3);
  return pad2(d3.getUTCFullYear() % 100, p5, 2);
}
function formatUTCFullYear2(d3, p5) {
  return pad2(d3.getUTCFullYear() % 1e4, p5, 4);
}
function formatUTCFullYearISO2(d3, p5) {
  var day4 = d3.getUTCDay();
  d3 = day4 >= 4 || day4 === 0 ? utcThursday2(d3) : utcThursday2.ceil(d3);
  return pad2(d3.getUTCFullYear() % 1e4, p5, 4);
}
function formatUTCZone2() {
  return "+0000";
}
function formatLiteralPercent2() {
  return "%";
}
function formatUnixTimestamp2(d3) {
  return +d3;
}
function formatUnixTimestampSeconds2(d3) {
  return Math.floor(+d3 / 1e3);
}

// node_modules/@nivo/axes/node_modules/d3-time-format/src/defaultLocale.js
var locale3;
var timeFormat2;
var timeParse2;
var utcFormat2;
var utcParse2;
defaultLocale3({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale3(definition) {
  locale3 = formatLocale2(definition);
  timeFormat2 = locale3.format;
  timeParse2 = locale3.parse;
  utcFormat2 = locale3.utcFormat;
  utcParse2 = locale3.utcParse;
  return locale3;
}

// node_modules/@nivo/axes/node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier2 = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative2(date) {
  return date.toISOString();
}
var formatIso2 = Date.prototype.toISOString ? formatIsoNative2 : utcFormat2(isoSpecifier2);

// node_modules/@nivo/axes/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative2(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso2 = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative2 : utcParse2(isoSpecifier2);

// node_modules/@nivo/axes/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default2(x3) {
  return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
}
function formatDecimalParts2(x3, p5) {
  if ((i6 = (x3 = p5 ? x3.toExponential(p5 - 1) : x3.toExponential()).indexOf("e")) < 0) return null;
  var i6, coefficient = x3.slice(0, i6);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x3.slice(i6 + 1)
  ];
}

// node_modules/@nivo/axes/node_modules/d3-format/src/exponent.js
function exponent_default2(x3) {
  return x3 = formatDecimalParts2(Math.abs(x3)), x3 ? x3[1] : NaN;
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatGroup.js
function formatGroup_default2(grouping, thousands) {
  return function(value, width) {
    var i6 = value.length, t8 = [], j5 = 0, g5 = grouping[0], length = 0;
    while (i6 > 0 && g5 > 0) {
      if (length + g5 + 1 > width) g5 = Math.max(1, width - length);
      t8.push(value.substring(i6 -= g5, i6 + g5));
      if ((length += g5 + 1) > width) break;
      g5 = grouping[j5 = (j5 + 1) % grouping.length];
    }
    return t8.reverse().join(thousands);
  };
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default2(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i6) {
      return numerals[+i6];
    });
  };
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatSpecifier.js
var re2 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier2(specifier) {
  if (!(match = re2.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier2({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier2.prototype = FormatSpecifier2.prototype;
function FormatSpecifier2(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier2.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/@nivo/axes/node_modules/d3-format/src/formatTrim.js
function formatTrim_default2(s3) {
  out: for (var n7 = s3.length, i6 = 1, i0 = -1, i1; i6 < n7; ++i6) {
    switch (s3[i6]) {
      case ".":
        i0 = i1 = i6;
        break;
      case "0":
        if (i0 === 0) i0 = i6;
        i1 = i6;
        break;
      default:
        if (!+s3[i6]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }
  return i0 > 0 ? s3.slice(0, i0) + s3.slice(i1 + 1) : s3;
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent2;
function formatPrefixAuto_default2(x3, p5) {
  var d3 = formatDecimalParts2(x3, p5);
  if (!d3) return x3 + "";
  var coefficient = d3[0], exponent = d3[1], i6 = exponent - (prefixExponent2 = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n7 = coefficient.length;
  return i6 === n7 ? coefficient : i6 > n7 ? coefficient + new Array(i6 - n7 + 1).join("0") : i6 > 0 ? coefficient.slice(0, i6) + "." + coefficient.slice(i6) : "0." + new Array(1 - i6).join("0") + formatDecimalParts2(x3, Math.max(0, p5 + i6 - 1))[0];
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatRounded.js
function formatRounded_default2(x3, p5) {
  var d3 = formatDecimalParts2(x3, p5);
  if (!d3) return x3 + "";
  var coefficient = d3[0], exponent = d3[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatTypes.js
var formatTypes_default2 = {
  "%": function(x3, p5) {
    return (x3 * 100).toFixed(p5);
  },
  "b": function(x3) {
    return Math.round(x3).toString(2);
  },
  "c": function(x3) {
    return x3 + "";
  },
  "d": formatDecimal_default2,
  "e": function(x3, p5) {
    return x3.toExponential(p5);
  },
  "f": function(x3, p5) {
    return x3.toFixed(p5);
  },
  "g": function(x3, p5) {
    return x3.toPrecision(p5);
  },
  "o": function(x3) {
    return Math.round(x3).toString(8);
  },
  "p": function(x3, p5) {
    return formatRounded_default2(x3 * 100, p5);
  },
  "r": formatRounded_default2,
  "s": formatPrefixAuto_default2,
  "X": function(x3) {
    return Math.round(x3).toString(16).toUpperCase();
  },
  "x": function(x3) {
    return Math.round(x3).toString(16);
  }
};

// node_modules/@nivo/axes/node_modules/d3-format/src/identity.js
function identity_default4(x3) {
  return x3;
}

// node_modules/@nivo/axes/node_modules/d3-format/src/locale.js
var map6 = Array.prototype.map;
var prefixes3 = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default2(locale6) {
  var group3 = locale6.grouping === void 0 || locale6.thousands === void 0 ? identity_default4 : formatGroup_default2(map6.call(locale6.grouping, Number), locale6.thousands + ""), currencyPrefix = locale6.currency === void 0 ? "" : locale6.currency[0] + "", currencySuffix = locale6.currency === void 0 ? "" : locale6.currency[1] + "", decimal = locale6.decimal === void 0 ? "." : locale6.decimal + "", numerals = locale6.numerals === void 0 ? identity_default4 : formatNumerals_default2(map6.call(locale6.numerals, String)), percent = locale6.percent === void 0 ? "%" : locale6.percent + "", minus = locale6.minus === void 0 ? "-" : locale6.minus + "", nan = locale6.nan === void 0 ? "NaN" : locale6.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier2(specifier);
    var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n") comma = true, type = "g";
    else if (!formatTypes_default2[type]) precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "=";
    var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default2[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i6, n7, c9;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim) value = formatTrim_default2(value);
        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;
        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes3[8 + prefixExponent2 / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
        if (maybeSuffix) {
          i6 = -1, n7 = value.length;
          while (++i6 < n7) {
            if (c9 = value.charCodeAt(i6), 48 > c9 || c9 > 57) {
              valueSuffix = (c9 === 46 ? decimal + value.slice(i6 + 1) : value.slice(i6)) + valueSuffix;
              value = value.slice(0, i6);
              break;
            }
          }
        }
      }
      if (comma && !zero) value = group3(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero) value = group3(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix3(specifier, value) {
    var f2 = newFormat((specifier = formatSpecifier2(specifier), specifier.type = "f", specifier)), e11 = Math.max(-8, Math.min(8, Math.floor(exponent_default2(value) / 3))) * 3, k4 = Math.pow(10, -e11), prefix2 = prefixes3[8 + e11 / 3];
    return function(value2) {
      return f2(k4 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix3
  };
}

// node_modules/@nivo/axes/node_modules/d3-format/src/defaultLocale.js
var locale4;
var format2;
var formatPrefix2;
defaultLocale4({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});
function defaultLocale4(definition) {
  locale4 = locale_default2(definition);
  format2 = locale4.format;
  formatPrefix2 = locale4.formatPrefix;
  return locale4;
}

// node_modules/@nivo/scales/dist/nivo-scales.es.js
var import_uniq = __toESM(require_uniq());
var import_uniqBy = __toESM(require_uniqBy());
var import_sortBy = __toESM(require_sortBy());
var import_last2 = __toESM(require_last());
var import_isDate = __toESM(require_isDate());

// node_modules/@nivo/scales/node_modules/d3-time/src/interval.js
var t03 = /* @__PURE__ */ new Date();
var t13 = /* @__PURE__ */ new Date();
function newInterval3(floori, offseti, count3, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = function(date) {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start2, stop2, step) {
    var range = [], previous;
    start2 = interval.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop2) || !(step > 0)) return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop2);
    return range;
  };
  interval.filter = function(test) {
    return newInterval3(function(date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {
          }
        }
        else while (--step >= 0) {
          while (offseti(date, 1), !test(date)) {
          }
        }
      }
    });
  };
  if (count3) {
    interval.count = function(start2, end) {
      t03.setTime(+start2), t13.setTime(+end);
      floori(t03), floori(t13);
      return Math.floor(count3(t03, t13));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d3) {
        return field(d3) % step === 0;
      } : function(d3) {
        return interval.count(0, d3) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/@nivo/scales/node_modules/d3-time/src/millisecond.js
var millisecond3 = newInterval3(function() {
}, function(date, step) {
  date.setTime(+date + step);
}, function(start2, end) {
  return end - start2;
});
millisecond3.every = function(k4) {
  k4 = Math.floor(k4);
  if (!isFinite(k4) || !(k4 > 0)) return null;
  if (!(k4 > 1)) return millisecond3;
  return newInterval3(function(date) {
    date.setTime(Math.floor(date / k4) * k4);
  }, function(date, step) {
    date.setTime(+date + step * k4);
  }, function(start2, end) {
    return (end - start2) / k4;
  });
};
var millisecond_default3 = millisecond3;
var milliseconds3 = millisecond3.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/duration.js
var durationSecond3 = 1e3;
var durationMinute3 = 6e4;
var durationHour3 = 36e5;
var durationDay3 = 864e5;
var durationWeek3 = 6048e5;

// node_modules/@nivo/scales/node_modules/d3-time/src/second.js
var second3 = newInterval3(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond3);
}, function(start2, end) {
  return (end - start2) / durationSecond3;
}, function(date) {
  return date.getUTCSeconds();
});
var second_default3 = second3;
var seconds3 = second3.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/minute.js
var minute3 = newInterval3(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond3);
}, function(date, step) {
  date.setTime(+date + step * durationMinute3);
}, function(start2, end) {
  return (end - start2) / durationMinute3;
}, function(date) {
  return date.getMinutes();
});
var minute_default3 = minute3;
var minutes3 = minute3.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/hour.js
var hour3 = newInterval3(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond3 - date.getMinutes() * durationMinute3);
}, function(date, step) {
  date.setTime(+date + step * durationHour3);
}, function(start2, end) {
  return (end - start2) / durationHour3;
}, function(date) {
  return date.getHours();
});
var hour_default3 = hour3;
var hours3 = hour3.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/day.js
var day3 = newInterval3(function(date) {
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setDate(date.getDate() + step);
}, function(start2, end) {
  return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute3) / durationDay3;
}, function(date) {
  return date.getDate() - 1;
});
var day_default3 = day3;
var days3 = day3.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/week.js
function weekday3(i6) {
  return newInterval3(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i6) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start2, end) {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute3) / durationWeek3;
  });
}
var sunday3 = weekday3(0);
var monday3 = weekday3(1);
var tuesday3 = weekday3(2);
var wednesday3 = weekday3(3);
var thursday3 = weekday3(4);
var friday3 = weekday3(5);
var saturday3 = weekday3(6);
var sundays3 = sunday3.range;
var mondays3 = monday3.range;
var tuesdays3 = tuesday3.range;
var wednesdays3 = wednesday3.range;
var thursdays3 = thursday3.range;
var fridays3 = friday3.range;
var saturdays3 = saturday3.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/month.js
var month3 = newInterval3(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start2, end) {
  return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var month_default3 = month3;
var months3 = month3.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/year.js
var year3 = newInterval3(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start2, end) {
  return end.getFullYear() - start2.getFullYear();
}, function(date) {
  return date.getFullYear();
});
year3.every = function(k4) {
  return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval3(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k4) * k4);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k4);
  });
};
var year_default3 = year3;
var years3 = year3.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcMinute.js
var utcMinute3 = newInterval3(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute3);
}, function(start2, end) {
  return (end - start2) / durationMinute3;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinute_default3 = utcMinute3;
var utcMinutes3 = utcMinute3.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcHour.js
var utcHour3 = newInterval3(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour3);
}, function(start2, end) {
  return (end - start2) / durationHour3;
}, function(date) {
  return date.getUTCHours();
});
var utcHour_default3 = utcHour3;
var utcHours3 = utcHour3.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcDay.js
var utcDay3 = newInterval3(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start2, end) {
  return (end - start2) / durationDay3;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDay_default3 = utcDay3;
var utcDays3 = utcDay3.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcWeek.js
function utcWeekday3(i6) {
  return newInterval3(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i6) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start2, end) {
    return (end - start2) / durationWeek3;
  });
}
var utcSunday3 = utcWeekday3(0);
var utcMonday3 = utcWeekday3(1);
var utcTuesday3 = utcWeekday3(2);
var utcWednesday3 = utcWeekday3(3);
var utcThursday3 = utcWeekday3(4);
var utcFriday3 = utcWeekday3(5);
var utcSaturday3 = utcWeekday3(6);
var utcSundays3 = utcSunday3.range;
var utcMondays3 = utcMonday3.range;
var utcTuesdays3 = utcTuesday3.range;
var utcWednesdays3 = utcWednesday3.range;
var utcThursdays3 = utcThursday3.range;
var utcFridays3 = utcFriday3.range;
var utcSaturdays3 = utcSaturday3.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcMonth.js
var utcMonth3 = newInterval3(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start2, end) {
  return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonth_default3 = utcMonth3;
var utcMonths3 = utcMonth3.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcYear.js
var utcYear3 = newInterval3(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start2, end) {
  return end.getUTCFullYear() - start2.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});
utcYear3.every = function(k4) {
  return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval3(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k4) * k4);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k4);
  });
};
var utcYear_default3 = utcYear3;
var utcYears3 = utcYear3.range;

// node_modules/@nivo/scales/node_modules/d3-time-format/src/locale.js
function localDate3(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date = new Date(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
    date.setFullYear(d3.y);
    return date;
  }
  return new Date(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
}
function utcDate3(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date = new Date(Date.UTC(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
    date.setUTCFullYear(d3.y);
    return date;
  }
  return new Date(Date.UTC(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
}
function newDate3(y4, m4, d3) {
  return { y: y4, m: m4, d: d3, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale3(locale6) {
  var locale_dateTime = locale6.dateTime, locale_date = locale6.date, locale_time = locale6.time, locale_periods = locale6.periods, locale_weekdays = locale6.days, locale_shortWeekdays = locale6.shortDays, locale_months = locale6.months, locale_shortMonths = locale6.shortMonths;
  var periodRe = formatRe3(locale_periods), periodLookup = formatLookup3(locale_periods), weekdayRe = formatRe3(locale_weekdays), weekdayLookup = formatLookup3(locale_weekdays), shortWeekdayRe = formatRe3(locale_shortWeekdays), shortWeekdayLookup = formatLookup3(locale_shortWeekdays), monthRe = formatRe3(locale_months), monthLookup = formatLookup3(locale_months), shortMonthRe = formatRe3(locale_shortMonths), shortMonthLookup = formatLookup3(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth3,
    "e": formatDayOfMonth3,
    "f": formatMicroseconds3,
    "g": formatYearISO3,
    "G": formatFullYearISO3,
    "H": formatHour243,
    "I": formatHour123,
    "j": formatDayOfYear3,
    "L": formatMilliseconds3,
    "m": formatMonthNumber3,
    "M": formatMinutes3,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp3,
    "s": formatUnixTimestampSeconds3,
    "S": formatSeconds3,
    "u": formatWeekdayNumberMonday3,
    "U": formatWeekNumberSunday3,
    "V": formatWeekNumberISO3,
    "w": formatWeekdayNumberSunday3,
    "W": formatWeekNumberMonday3,
    "x": null,
    "X": null,
    "y": formatYear3,
    "Y": formatFullYear3,
    "Z": formatZone3,
    "%": formatLiteralPercent3
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth3,
    "e": formatUTCDayOfMonth3,
    "f": formatUTCMicroseconds3,
    "g": formatUTCYearISO3,
    "G": formatUTCFullYearISO3,
    "H": formatUTCHour243,
    "I": formatUTCHour123,
    "j": formatUTCDayOfYear3,
    "L": formatUTCMilliseconds3,
    "m": formatUTCMonthNumber3,
    "M": formatUTCMinutes3,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp3,
    "s": formatUnixTimestampSeconds3,
    "S": formatUTCSeconds3,
    "u": formatUTCWeekdayNumberMonday3,
    "U": formatUTCWeekNumberSunday3,
    "V": formatUTCWeekNumberISO3,
    "w": formatUTCWeekdayNumberSunday3,
    "W": formatUTCWeekNumberMonday3,
    "x": null,
    "X": null,
    "y": formatUTCYear3,
    "Y": formatUTCFullYear3,
    "Z": formatUTCZone3,
    "%": formatLiteralPercent3
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth3,
    "e": parseDayOfMonth3,
    "f": parseMicroseconds3,
    "g": parseYear3,
    "G": parseFullYear3,
    "H": parseHour243,
    "I": parseHour243,
    "j": parseDayOfYear3,
    "L": parseMilliseconds3,
    "m": parseMonthNumber3,
    "M": parseMinutes3,
    "p": parsePeriod,
    "q": parseQuarter3,
    "Q": parseUnixTimestamp3,
    "s": parseUnixTimestampSeconds3,
    "S": parseSeconds3,
    "u": parseWeekdayNumberMonday3,
    "U": parseWeekNumberSunday3,
    "V": parseWeekNumberISO3,
    "w": parseWeekdayNumberSunday3,
    "W": parseWeekNumberMonday3,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear3,
    "Y": parseFullYear3,
    "Z": parseZone3,
    "%": parseLiteralPercent3
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i6 = -1, j5 = 0, n7 = specifier.length, c9, pad4, format3;
      if (!(date instanceof Date)) date = /* @__PURE__ */ new Date(+date);
      while (++i6 < n7) {
        if (specifier.charCodeAt(i6) === 37) {
          string.push(specifier.slice(j5, i6));
          if ((pad4 = pads3[c9 = specifier.charAt(++i6)]) != null) c9 = specifier.charAt(++i6);
          else pad4 = c9 === "e" ? " " : "0";
          if (format3 = formats2[c9]) c9 = format3(date, pad4);
          string.push(c9);
          j5 = i6 + 1;
        }
      }
      string.push(specifier.slice(j5, i6));
      return string.join("");
    };
  }
  function newParse(specifier, Z2) {
    return function(string) {
      var d3 = newDate3(1900, void 0, 1), i6 = parseSpecifier(d3, specifier, string += "", 0), week, day4;
      if (i6 != string.length) return null;
      if ("Q" in d3) return new Date(d3.Q);
      if ("s" in d3) return new Date(d3.s * 1e3 + ("L" in d3 ? d3.L : 0));
      if (Z2 && !("Z" in d3)) d3.Z = 0;
      if ("p" in d3) d3.H = d3.H % 12 + d3.p * 12;
      if (d3.m === void 0) d3.m = "q" in d3 ? d3.q : 0;
      if ("V" in d3) {
        if (d3.V < 1 || d3.V > 53) return null;
        if (!("w" in d3)) d3.w = 1;
        if ("Z" in d3) {
          week = utcDate3(newDate3(d3.y, 0, 1)), day4 = week.getUTCDay();
          week = day4 > 4 || day4 === 0 ? utcMonday3.ceil(week) : utcMonday3(week);
          week = utcDay_default3.offset(week, (d3.V - 1) * 7);
          d3.y = week.getUTCFullYear();
          d3.m = week.getUTCMonth();
          d3.d = week.getUTCDate() + (d3.w + 6) % 7;
        } else {
          week = localDate3(newDate3(d3.y, 0, 1)), day4 = week.getDay();
          week = day4 > 4 || day4 === 0 ? monday3.ceil(week) : monday3(week);
          week = day_default3.offset(week, (d3.V - 1) * 7);
          d3.y = week.getFullYear();
          d3.m = week.getMonth();
          d3.d = week.getDate() + (d3.w + 6) % 7;
        }
      } else if ("W" in d3 || "U" in d3) {
        if (!("w" in d3)) d3.w = "u" in d3 ? d3.u % 7 : "W" in d3 ? 1 : 0;
        day4 = "Z" in d3 ? utcDate3(newDate3(d3.y, 0, 1)).getUTCDay() : localDate3(newDate3(d3.y, 0, 1)).getDay();
        d3.m = 0;
        d3.d = "W" in d3 ? (d3.w + 6) % 7 + d3.W * 7 - (day4 + 5) % 7 : d3.w + d3.U * 7 - (day4 + 6) % 7;
      }
      if ("Z" in d3) {
        d3.H += d3.Z / 100 | 0;
        d3.M += d3.Z % 100;
        return utcDate3(d3);
      }
      return localDate3(d3);
    };
  }
  function parseSpecifier(d3, specifier, string, j5) {
    var i6 = 0, n7 = specifier.length, m4 = string.length, c9, parse;
    while (i6 < n7) {
      if (j5 >= m4) return -1;
      c9 = specifier.charCodeAt(i6++);
      if (c9 === 37) {
        c9 = specifier.charAt(i6++);
        parse = parses[c9 in pads3 ? specifier.charAt(i6++) : c9];
        if (!parse || (j5 = parse(d3, string, j5)) < 0) return -1;
      } else if (c9 != string.charCodeAt(j5++)) {
        return -1;
      }
    }
    return j5;
  }
  function parsePeriod(d3, string, i6) {
    var n7 = periodRe.exec(string.slice(i6));
    return n7 ? (d3.p = periodLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseShortWeekday(d3, string, i6) {
    var n7 = shortWeekdayRe.exec(string.slice(i6));
    return n7 ? (d3.w = shortWeekdayLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseWeekday(d3, string, i6) {
    var n7 = weekdayRe.exec(string.slice(i6));
    return n7 ? (d3.w = weekdayLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseShortMonth(d3, string, i6) {
    var n7 = shortMonthRe.exec(string.slice(i6));
    return n7 ? (d3.m = shortMonthLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseMonth(d3, string, i6) {
    var n7 = monthRe.exec(string.slice(i6));
    return n7 ? (d3.m = monthLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseLocaleDateTime(d3, string, i6) {
    return parseSpecifier(d3, locale_dateTime, string, i6);
  }
  function parseLocaleDate(d3, string, i6) {
    return parseSpecifier(d3, locale_date, string, i6);
  }
  function parseLocaleTime(d3, string, i6) {
    return parseSpecifier(d3, locale_time, string, i6);
  }
  function formatShortWeekday(d3) {
    return locale_shortWeekdays[d3.getDay()];
  }
  function formatWeekday(d3) {
    return locale_weekdays[d3.getDay()];
  }
  function formatShortMonth(d3) {
    return locale_shortMonths[d3.getMonth()];
  }
  function formatMonth(d3) {
    return locale_months[d3.getMonth()];
  }
  function formatPeriod(d3) {
    return locale_periods[+(d3.getHours() >= 12)];
  }
  function formatQuarter(d3) {
    return 1 + ~~(d3.getMonth() / 3);
  }
  function formatUTCShortWeekday(d3) {
    return locale_shortWeekdays[d3.getUTCDay()];
  }
  function formatUTCWeekday(d3) {
    return locale_weekdays[d3.getUTCDay()];
  }
  function formatUTCShortMonth(d3) {
    return locale_shortMonths[d3.getUTCMonth()];
  }
  function formatUTCMonth(d3) {
    return locale_months[d3.getUTCMonth()];
  }
  function formatUTCPeriod(d3) {
    return locale_periods[+(d3.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d3) {
    return 1 + ~~(d3.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f2 = newFormat(specifier += "", formats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    parse: function(specifier) {
      var p5 = newParse(specifier += "", false);
      p5.toString = function() {
        return specifier;
      };
      return p5;
    },
    utcFormat: function(specifier) {
      var f2 = newFormat(specifier += "", utcFormats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    utcParse: function(specifier) {
      var p5 = newParse(specifier += "", true);
      p5.toString = function() {
        return specifier;
      };
      return p5;
    }
  };
}
var pads3 = { "-": "", "_": " ", "0": "0" };
var numberRe3 = /^\s*\d+/;
var percentRe3 = /^%/;
var requoteRe3 = /[\\^$*+?|[\]().{}]/g;
function pad3(value, fill, width) {
  var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote3(s3) {
  return s3.replace(requoteRe3, "\\$&");
}
function formatRe3(names) {
  return new RegExp("^(?:" + names.map(requote3).join("|") + ")", "i");
}
function formatLookup3(names) {
  return new Map(names.map((name, i6) => [name.toLowerCase(), i6]));
}
function parseWeekdayNumberSunday3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 1));
  return n7 ? (d3.w = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekdayNumberMonday3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 1));
  return n7 ? (d3.u = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekNumberSunday3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.U = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekNumberISO3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.V = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekNumberMonday3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.W = +n7[0], i6 + n7[0].length) : -1;
}
function parseFullYear3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 4));
  return n7 ? (d3.y = +n7[0], i6 + n7[0].length) : -1;
}
function parseYear3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.y = +n7[0] + (+n7[0] > 68 ? 1900 : 2e3), i6 + n7[0].length) : -1;
}
function parseZone3(d3, string, i6) {
  var n7 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i6, i6 + 6));
  return n7 ? (d3.Z = n7[1] ? 0 : -(n7[2] + (n7[3] || "00")), i6 + n7[0].length) : -1;
}
function parseQuarter3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 1));
  return n7 ? (d3.q = n7[0] * 3 - 3, i6 + n7[0].length) : -1;
}
function parseMonthNumber3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.m = n7[0] - 1, i6 + n7[0].length) : -1;
}
function parseDayOfMonth3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.d = +n7[0], i6 + n7[0].length) : -1;
}
function parseDayOfYear3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 3));
  return n7 ? (d3.m = 0, d3.d = +n7[0], i6 + n7[0].length) : -1;
}
function parseHour243(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.H = +n7[0], i6 + n7[0].length) : -1;
}
function parseMinutes3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.M = +n7[0], i6 + n7[0].length) : -1;
}
function parseSeconds3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.S = +n7[0], i6 + n7[0].length) : -1;
}
function parseMilliseconds3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 3));
  return n7 ? (d3.L = +n7[0], i6 + n7[0].length) : -1;
}
function parseMicroseconds3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6, i6 + 6));
  return n7 ? (d3.L = Math.floor(n7[0] / 1e3), i6 + n7[0].length) : -1;
}
function parseLiteralPercent3(d3, string, i6) {
  var n7 = percentRe3.exec(string.slice(i6, i6 + 1));
  return n7 ? i6 + n7[0].length : -1;
}
function parseUnixTimestamp3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6));
  return n7 ? (d3.Q = +n7[0], i6 + n7[0].length) : -1;
}
function parseUnixTimestampSeconds3(d3, string, i6) {
  var n7 = numberRe3.exec(string.slice(i6));
  return n7 ? (d3.s = +n7[0], i6 + n7[0].length) : -1;
}
function formatDayOfMonth3(d3, p5) {
  return pad3(d3.getDate(), p5, 2);
}
function formatHour243(d3, p5) {
  return pad3(d3.getHours(), p5, 2);
}
function formatHour123(d3, p5) {
  return pad3(d3.getHours() % 12 || 12, p5, 2);
}
function formatDayOfYear3(d3, p5) {
  return pad3(1 + day_default3.count(year_default3(d3), d3), p5, 3);
}
function formatMilliseconds3(d3, p5) {
  return pad3(d3.getMilliseconds(), p5, 3);
}
function formatMicroseconds3(d3, p5) {
  return formatMilliseconds3(d3, p5) + "000";
}
function formatMonthNumber3(d3, p5) {
  return pad3(d3.getMonth() + 1, p5, 2);
}
function formatMinutes3(d3, p5) {
  return pad3(d3.getMinutes(), p5, 2);
}
function formatSeconds3(d3, p5) {
  return pad3(d3.getSeconds(), p5, 2);
}
function formatWeekdayNumberMonday3(d3) {
  var day4 = d3.getDay();
  return day4 === 0 ? 7 : day4;
}
function formatWeekNumberSunday3(d3, p5) {
  return pad3(sunday3.count(year_default3(d3) - 1, d3), p5, 2);
}
function dISO3(d3) {
  var day4 = d3.getDay();
  return day4 >= 4 || day4 === 0 ? thursday3(d3) : thursday3.ceil(d3);
}
function formatWeekNumberISO3(d3, p5) {
  d3 = dISO3(d3);
  return pad3(thursday3.count(year_default3(d3), d3) + (year_default3(d3).getDay() === 4), p5, 2);
}
function formatWeekdayNumberSunday3(d3) {
  return d3.getDay();
}
function formatWeekNumberMonday3(d3, p5) {
  return pad3(monday3.count(year_default3(d3) - 1, d3), p5, 2);
}
function formatYear3(d3, p5) {
  return pad3(d3.getFullYear() % 100, p5, 2);
}
function formatYearISO3(d3, p5) {
  d3 = dISO3(d3);
  return pad3(d3.getFullYear() % 100, p5, 2);
}
function formatFullYear3(d3, p5) {
  return pad3(d3.getFullYear() % 1e4, p5, 4);
}
function formatFullYearISO3(d3, p5) {
  var day4 = d3.getDay();
  d3 = day4 >= 4 || day4 === 0 ? thursday3(d3) : thursday3.ceil(d3);
  return pad3(d3.getFullYear() % 1e4, p5, 4);
}
function formatZone3(d3) {
  var z6 = d3.getTimezoneOffset();
  return (z6 > 0 ? "-" : (z6 *= -1, "+")) + pad3(z6 / 60 | 0, "0", 2) + pad3(z6 % 60, "0", 2);
}
function formatUTCDayOfMonth3(d3, p5) {
  return pad3(d3.getUTCDate(), p5, 2);
}
function formatUTCHour243(d3, p5) {
  return pad3(d3.getUTCHours(), p5, 2);
}
function formatUTCHour123(d3, p5) {
  return pad3(d3.getUTCHours() % 12 || 12, p5, 2);
}
function formatUTCDayOfYear3(d3, p5) {
  return pad3(1 + utcDay_default3.count(utcYear_default3(d3), d3), p5, 3);
}
function formatUTCMilliseconds3(d3, p5) {
  return pad3(d3.getUTCMilliseconds(), p5, 3);
}
function formatUTCMicroseconds3(d3, p5) {
  return formatUTCMilliseconds3(d3, p5) + "000";
}
function formatUTCMonthNumber3(d3, p5) {
  return pad3(d3.getUTCMonth() + 1, p5, 2);
}
function formatUTCMinutes3(d3, p5) {
  return pad3(d3.getUTCMinutes(), p5, 2);
}
function formatUTCSeconds3(d3, p5) {
  return pad3(d3.getUTCSeconds(), p5, 2);
}
function formatUTCWeekdayNumberMonday3(d3) {
  var dow = d3.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday3(d3, p5) {
  return pad3(utcSunday3.count(utcYear_default3(d3) - 1, d3), p5, 2);
}
function UTCdISO3(d3) {
  var day4 = d3.getUTCDay();
  return day4 >= 4 || day4 === 0 ? utcThursday3(d3) : utcThursday3.ceil(d3);
}
function formatUTCWeekNumberISO3(d3, p5) {
  d3 = UTCdISO3(d3);
  return pad3(utcThursday3.count(utcYear_default3(d3), d3) + (utcYear_default3(d3).getUTCDay() === 4), p5, 2);
}
function formatUTCWeekdayNumberSunday3(d3) {
  return d3.getUTCDay();
}
function formatUTCWeekNumberMonday3(d3, p5) {
  return pad3(utcMonday3.count(utcYear_default3(d3) - 1, d3), p5, 2);
}
function formatUTCYear3(d3, p5) {
  return pad3(d3.getUTCFullYear() % 100, p5, 2);
}
function formatUTCYearISO3(d3, p5) {
  d3 = UTCdISO3(d3);
  return pad3(d3.getUTCFullYear() % 100, p5, 2);
}
function formatUTCFullYear3(d3, p5) {
  return pad3(d3.getUTCFullYear() % 1e4, p5, 4);
}
function formatUTCFullYearISO3(d3, p5) {
  var day4 = d3.getUTCDay();
  d3 = day4 >= 4 || day4 === 0 ? utcThursday3(d3) : utcThursday3.ceil(d3);
  return pad3(d3.getUTCFullYear() % 1e4, p5, 4);
}
function formatUTCZone3() {
  return "+0000";
}
function formatLiteralPercent3() {
  return "%";
}
function formatUnixTimestamp3(d3) {
  return +d3;
}
function formatUnixTimestampSeconds3(d3) {
  return Math.floor(+d3 / 1e3);
}

// node_modules/@nivo/scales/node_modules/d3-time-format/src/defaultLocale.js
var locale5;
var timeFormat3;
var timeParse3;
var utcFormat3;
var utcParse3;
defaultLocale5({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale5(definition) {
  locale5 = formatLocale3(definition);
  timeFormat3 = locale5.format;
  timeParse3 = locale5.parse;
  utcFormat3 = locale5.utcFormat;
  utcParse3 = locale5.utcParse;
  return locale5;
}

// node_modules/@nivo/scales/node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier3 = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative3(date) {
  return date.toISOString();
}
var formatIso3 = Date.prototype.toISOString ? formatIsoNative3 : utcFormat3(isoSpecifier3);

// node_modules/@nivo/scales/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative3(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso3 = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative3 : utcParse3(isoSpecifier3);

// node_modules/@nivo/scales/dist/nivo-scales.es.js
var J = [function(n7) {
  return n7.setMilliseconds(0);
}, function(n7) {
  return n7.setSeconds(0);
}, function(n7) {
  return n7.setMinutes(0);
}, function(n7) {
  return n7.setHours(0);
}, function(n7) {
  return n7.setDate(1);
}, function(n7) {
  return n7.setMonth(0);
}];
var K = { millisecond: [], second: J.slice(0, 1), minute: J.slice(0, 2), hour: J.slice(0, 3), day: J.slice(0, 4), month: J.slice(0, 5), year: J.slice(0, 6) };
var nn2 = function(n7) {
  var t8 = n7;
  return t8.type = "band", t8;
};
var pn2 = function(n7) {
  var t8 = n7.bandwidth();
  if (0 === t8) return n7;
  var r6 = t8 / 2;
  return n7.round() && (r6 = Math.round(r6)), function(t9) {
    var e11;
    return (null != (e11 = n7(t9)) ? e11 : 0) + r6;
  };
};
var hn2 = { millisecond: [millisecond_default3, millisecond_default3], second: [second_default3, second_default3], minute: [minute_default3, utcMinute_default3], hour: [hour_default3, utcHour_default3], day: [newInterval3(function(n7) {
  return n7.setHours(0, 0, 0, 0);
}, function(n7, t8) {
  return n7.setDate(n7.getDate() + t8);
}, function(n7, t8) {
  return (t8.getTime() - n7.getTime()) / 864e5;
}, function(n7) {
  return Math.floor(n7.getTime() / 864e5);
}), newInterval3(function(n7) {
  return n7.setUTCHours(0, 0, 0, 0);
}, function(n7, t8) {
  return n7.setUTCDate(n7.getUTCDate() + t8);
}, function(n7, t8) {
  return (t8.getTime() - n7.getTime()) / 864e5;
}, function(n7) {
  return Math.floor(n7.getTime() / 864e5);
})], week: [sunday3, utcSunday3], sunday: [sunday3, utcSunday3], monday: [monday3, utcMonday3], tuesday: [tuesday3, utcTuesday3], wednesday: [wednesday3, utcWednesday3], thursday: [thursday3, utcThursday3], friday: [friday3, utcFriday3], saturday: [saturday3, utcSaturday3], month: [month_default3, utcMonth_default3], year: [year_default3, utcYear_default3] };
var gn2 = Object.keys(hn2);
var xn = new RegExp("^every\\s*(\\d+)?\\s*(" + gn2.join("|") + ")s?$", "i");
var kn2 = function(n7, t8) {
  if (Array.isArray(t8)) return t8;
  if ("string" == typeof t8 && "useUTC" in n7) {
    var r6 = t8.match(xn);
    if (r6) {
      var e11 = r6[1], a5 = r6[2], i6 = hn2[a5][n7.useUTC ? 1 : 0];
      if ("day" === a5) {
        var o5, u2, c9 = n7.domain(), s3 = c9[0], d3 = c9[1], f2 = new Date(d3);
        return f2.setDate(f2.getDate() + 1), null != (o5 = null == (u2 = i6.every(Number(null != e11 ? e11 : 1))) ? void 0 : u2.range(s3, f2)) ? o5 : [];
      }
      if (void 0 === e11) return n7.ticks(i6);
      var l4 = i6.every(Number(e11));
      if (l4) return n7.ticks(l4);
    }
    throw new Error("Invalid tickValues: " + t8);
  }
  if ("ticks" in n7) {
    if (void 0 === t8) return n7.ticks();
    if ("number" == typeof (m4 = t8) && isFinite(m4) && Math.floor(m4) === m4) return n7.ticks(t8);
  }
  var m4;
  return n7.domain();
};

// node_modules/@nivo/axes/dist/nivo-axes.es.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
function p2() {
  return p2 = Object.assign ? Object.assign.bind() : function(t8) {
    for (var e11 = 1; e11 < arguments.length; e11++) {
      var i6 = arguments[e11];
      for (var n7 in i6) Object.prototype.hasOwnProperty.call(i6, n7) && (t8[n7] = i6[n7]);
    }
    return t8;
  }, p2.apply(this, arguments);
}
var b2 = function(t8) {
  var e11, i6 = t8.axis, n7 = t8.scale, r6 = t8.ticksPosition, o5 = t8.tickValues, l4 = t8.tickSize, s3 = t8.tickPadding, c9 = t8.tickRotation, f2 = t8.truncateTickAt, u2 = t8.engine, d3 = void 0 === u2 ? "svg" : u2, x3 = kn2(n7, o5), m4 = rn[d3], k4 = "bandwidth" in n7 ? pn2(n7) : n7, g5 = { lineX: 0, lineY: 0 }, v5 = { textX: 0, textY: 0 }, b5 = "object" == typeof document && "rtl" === document.dir, P4 = m4.align.center, T4 = m4.baseline.center;
  "x" === i6 ? (e11 = function(t9) {
    var e12;
    return { x: null != (e12 = k4(t9)) ? e12 : 0, y: 0 };
  }, g5.lineY = l4 * ("after" === r6 ? 1 : -1), v5.textY = (l4 + s3) * ("after" === r6 ? 1 : -1), T4 = "after" === r6 ? m4.baseline.top : m4.baseline.bottom, 0 === c9 ? P4 = m4.align.center : "after" === r6 && c9 < 0 || "before" === r6 && c9 > 0 ? (P4 = m4.align[b5 ? "left" : "right"], T4 = m4.baseline.center) : ("after" === r6 && c9 > 0 || "before" === r6 && c9 < 0) && (P4 = m4.align[b5 ? "right" : "left"], T4 = m4.baseline.center)) : (e11 = function(t9) {
    var e12;
    return { x: 0, y: null != (e12 = k4(t9)) ? e12 : 0 };
  }, g5.lineX = l4 * ("after" === r6 ? 1 : -1), v5.textX = (l4 + s3) * ("after" === r6 ? 1 : -1), P4 = "after" === r6 ? m4.align.left : m4.align.right);
  return { ticks: x3.map(function(t9) {
    var i7 = "string" == typeof t9 ? function(t10) {
      var e12 = String(t10).length;
      return f2 && f2 > 0 && e12 > f2 ? "" + String(t10).slice(0, f2).concat("...") : "" + t10;
    }(t9) : t9;
    return p2({ key: t9 instanceof Date ? "" + t9.valueOf() : "" + t9, value: i7 }, e11(t9), g5, v5);
  }), textAlign: P4, textBaseline: T4 };
};
var P2 = function(t8, e11) {
  if (void 0 === t8 || "function" == typeof t8) return t8;
  if ("time" === e11.type) {
    var i6 = timeFormat2(t8);
    return function(t9) {
      return i6(t9 instanceof Date ? t9 : new Date(t9));
    };
  }
  return format2(t8);
};
var T2 = function(t8) {
  var e11, i6 = t8.width, n7 = t8.height, r6 = t8.scale, a5 = t8.axis, o5 = t8.values, l4 = (e11 = o5, Array.isArray(e11) ? o5 : void 0) || kn2(r6, o5), s3 = "bandwidth" in r6 ? pn2(r6) : r6, c9 = "x" === a5 ? l4.map(function(t9) {
    var e12, i7;
    return { key: t9 instanceof Date ? "" + t9.valueOf() : "" + t9, x1: null != (e12 = s3(t9)) ? e12 : 0, x2: null != (i7 = s3(t9)) ? i7 : 0, y1: 0, y2: n7 };
  }) : l4.map(function(t9) {
    var e12, n8;
    return { key: t9 instanceof Date ? "" + t9.valueOf() : "" + t9, x1: 0, x2: i6, y1: null != (e12 = s3(t9)) ? e12 : 0, y2: null != (n8 = s3(t9)) ? n8 : 0 };
  });
  return c9;
};
var A2 = (0, import_react17.memo)(function(t8) {
  var e11, n7 = t8.value, r6 = t8.format, a5 = t8.lineX, s3 = t8.lineY, c9 = t8.onClick, u2 = t8.textBaseline, d3 = t8.textAnchor, x3 = t8.animatedProps, m4 = zt(), y4 = m4.axis.ticks.line, h2 = m4.axis.ticks.text, v5 = null != (e11 = null == r6 ? void 0 : r6(n7)) ? e11 : n7, b5 = (0, import_react17.useMemo)(function() {
    var t9 = { opacity: x3.opacity };
    return c9 ? { style: p2({}, t9, { cursor: "pointer" }), onClick: function(t10) {
      return c9(t10, v5);
    } } : { style: t9 };
  }, [x3.opacity, c9, v5]);
  return (0, import_jsx_runtime3.jsxs)(animated.g, p2({ transform: x3.transform }, b5, { children: [(0, import_jsx_runtime3.jsx)("line", { x1: 0, x2: a5, y1: 0, y2: s3, style: y4 }), h2.outlineWidth > 0 && (0, import_jsx_runtime3.jsx)(animated.text, { dominantBaseline: u2, textAnchor: d3, transform: x3.textTransform, style: h2, strokeWidth: 2 * h2.outlineWidth, stroke: h2.outlineColor, strokeLinejoin: "round", children: "" + v5 }), (0, import_jsx_runtime3.jsx)(animated.text, { dominantBaseline: u2, textAnchor: d3, transform: x3.textTransform, style: Mt(h2), children: "" + v5 })] }));
});
var S = function(e11) {
  var r6 = e11.axis, a5 = e11.scale, l4 = e11.x, c9 = void 0 === l4 ? 0 : l4, x3 = e11.y, m4 = void 0 === x3 ? 0 : x3, y4 = e11.length, h2 = e11.ticksPosition, T4 = e11.tickValues, S3 = e11.tickSize, W5 = void 0 === S3 ? 5 : S3, w4 = e11.tickPadding, B3 = void 0 === w4 ? 5 : w4, X2 = e11.tickRotation, Y3 = void 0 === X2 ? 0 : X2, C6 = e11.format, O5 = e11.renderTick, j5 = void 0 === O5 ? A2 : O5, z6 = e11.truncateTickAt, V3 = e11.legend, D3 = e11.legendPosition, R3 = void 0 === D3 ? "end" : D3, E4 = e11.legendOffset, q3 = void 0 === E4 ? 0 : E4, F2 = e11.onClick, L2 = e11.ariaHidden, N3 = zt(), H2 = N3.axis.legend.text, I2 = (0, import_react17.useMemo)(function() {
    return P2(C6, a5);
  }, [C6, a5]), J4 = b2({ axis: r6, scale: a5, ticksPosition: h2, tickValues: T4, tickSize: W5, tickPadding: B3, tickRotation: Y3, truncateTickAt: z6 }), G2 = J4.ticks, K3 = J4.textAlign, M3 = J4.textBaseline, Q2 = null;
  if (void 0 !== V3) {
    var U2, Z2 = 0, $2 = 0, _2 = 0;
    "y" === r6 ? (_2 = -90, Z2 = q3, "start" === R3 ? (U2 = "start", $2 = y4) : "middle" === R3 ? (U2 = "middle", $2 = y4 / 2) : "end" === R3 && (U2 = "end")) : ($2 = q3, "start" === R3 ? U2 = "start" : "middle" === R3 ? (U2 = "middle", Z2 = y4 / 2) : "end" === R3 && (U2 = "end", Z2 = y4)), Q2 = (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [H2.outlineWidth > 0 && (0, import_jsx_runtime3.jsx)("text", { transform: "translate(" + Z2 + ", " + $2 + ") rotate(" + _2 + ")", textAnchor: U2, style: p2({ dominantBaseline: "central" }, H2), strokeWidth: 2 * H2.outlineWidth, stroke: H2.outlineColor, strokeLinejoin: "round", children: V3 }), (0, import_jsx_runtime3.jsx)("text", { transform: "translate(" + Z2 + ", " + $2 + ") rotate(" + _2 + ")", textAnchor: U2, style: p2({ dominantBaseline: "central" }, H2), children: V3 })] });
  }
  var tt2 = Ur(), et2 = tt2.animate, it2 = tt2.config, nt2 = useSpring({ transform: "translate(" + c9 + "," + m4 + ")", lineX2: "x" === r6 ? y4 : 0, lineY2: "x" === r6 ? 0 : y4, config: it2, immediate: !et2 }), rt2 = (0, import_react17.useCallback)(function(t8) {
    return { opacity: 1, transform: "translate(" + t8.x + "," + t8.y + ")", textTransform: "translate(" + t8.textX + "," + t8.textY + ") rotate(" + Y3 + ")" };
  }, [Y3]), at2 = (0, import_react17.useCallback)(function(t8) {
    return { opacity: 0, transform: "translate(" + t8.x + "," + t8.y + ")", textTransform: "translate(" + t8.textX + "," + t8.textY + ") rotate(" + Y3 + ")" };
  }, [Y3]), ot2 = useTransition(G2, { keys: function(t8) {
    return t8.key;
  }, initial: rt2, from: at2, enter: rt2, update: rt2, leave: { opacity: 0 }, config: it2, immediate: !et2 });
  return (0, import_jsx_runtime3.jsxs)(animated.g, { transform: nt2.transform, "aria-hidden": L2, children: [ot2(function(e12, i6, n7, r7) {
    return t4.createElement(j5, p2({ tickIndex: r7, format: I2, rotate: Y3, textBaseline: M3, textAnchor: K3, truncateTickAt: z6, animatedProps: e12 }, i6, F2 ? { onClick: F2 } : {}));
  }), (0, import_jsx_runtime3.jsx)(animated.line, { style: N3.axis.domain.line, x1: 0, x2: nt2.lineX2, y1: 0, y2: nt2.lineY2 }), Q2] });
};
var W2 = (0, import_react17.memo)(S);
var w2 = ["top", "right", "bottom", "left"];
var B = (0, import_react17.memo)(function(t8) {
  var e11 = t8.xScale, i6 = t8.yScale, n7 = t8.width, r6 = t8.height, a5 = { top: t8.top, right: t8.right, bottom: t8.bottom, left: t8.left };
  return (0, import_jsx_runtime3.jsx)(import_jsx_runtime3.Fragment, { children: w2.map(function(t9) {
    var o5 = a5[t9];
    if (!o5) return null;
    var l4 = "top" === t9 || "bottom" === t9;
    return (0, import_jsx_runtime3.jsx)(W2, p2({}, o5, { axis: l4 ? "x" : "y", x: "right" === t9 ? n7 : 0, y: "bottom" === t9 ? r6 : 0, scale: l4 ? e11 : i6, length: l4 ? n7 : r6, ticksPosition: "top" === t9 || "left" === t9 ? "before" : "after", truncateTickAt: o5.truncateTickAt }), t9);
  }) });
});
var X = (0, import_react17.memo)(function(t8) {
  var e11 = t8.animatedProps, i6 = zt();
  return (0, import_jsx_runtime3.jsx)(animated.line, p2({}, e11, i6.grid.line));
});
var Y = (0, import_react17.memo)(function(t8) {
  var e11 = t8.lines, i6 = Ur(), n7 = i6.animate, a5 = i6.config, o5 = useTransition(e11, { keys: function(t9) {
    return t9.key;
  }, initial: function(t9) {
    return { opacity: 1, x1: t9.x1, x2: t9.x2, y1: t9.y1, y2: t9.y2 };
  }, from: function(t9) {
    return { opacity: 0, x1: t9.x1, x2: t9.x2, y1: t9.y1, y2: t9.y2 };
  }, enter: function(t9) {
    return { opacity: 1, x1: t9.x1, x2: t9.x2, y1: t9.y1, y2: t9.y2 };
  }, update: function(t9) {
    return { opacity: 1, x1: t9.x1, x2: t9.x2, y1: t9.y1, y2: t9.y2 };
  }, leave: { opacity: 0 }, config: a5, immediate: !n7 });
  return (0, import_jsx_runtime3.jsx)("g", { children: o5(function(t9, e12) {
    return (0, import_react17.createElement)(X, p2({}, e12, { key: e12.key, animatedProps: t9 }));
  }) });
});
var C3 = (0, import_react17.memo)(function(t8) {
  var e11 = t8.width, n7 = t8.height, r6 = t8.xScale, a5 = t8.yScale, o5 = t8.xValues, l4 = t8.yValues, s3 = (0, import_react17.useMemo)(function() {
    return !!r6 && T2({ width: e11, height: n7, scale: r6, axis: "x", values: o5 });
  }, [r6, o5, e11, n7]), c9 = (0, import_react17.useMemo)(function() {
    return !!a5 && T2({ width: e11, height: n7, scale: a5, axis: "y", values: l4 });
  }, [n7, e11, a5, l4]);
  return (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [s3 && (0, import_jsx_runtime3.jsx)(Y, { lines: s3 }), c9 && (0, import_jsx_runtime3.jsx)(Y, { lines: c9 })] });
});
var O3 = function(t8, e11) {
  var i6, n7 = e11.axis, r6 = e11.scale, a5 = e11.x, o5 = void 0 === a5 ? 0 : a5, l4 = e11.y, s3 = void 0 === l4 ? 0 : l4, f2 = e11.length, u2 = e11.ticksPosition, d3 = e11.tickValues, x3 = e11.tickSize, m4 = void 0 === x3 ? 5 : x3, y4 = e11.tickPadding, h2 = void 0 === y4 ? 5 : y4, k4 = e11.tickRotation, g5 = void 0 === k4 ? 0 : k4, v5 = e11.format, p5 = e11.legend, P4 = e11.legendPosition, T4 = void 0 === P4 ? "end" : P4, A4 = e11.legendOffset, S3 = void 0 === A4 ? 0 : A4, W5 = e11.theme, w4 = b2({ axis: n7, scale: r6, ticksPosition: u2, tickValues: d3, tickSize: m4, tickPadding: h2, tickRotation: g5, engine: "canvas" }), B3 = w4.ticks, X2 = w4.textAlign, Y3 = w4.textBaseline;
  t8.save(), t8.translate(o5, s3), t8.textAlign = X2, t8.textBaseline = Y3;
  var C6 = W5.axis.ticks.text;
  t8.font = (C6.fontWeight ? C6.fontWeight + " " : "") + C6.fontSize + "px " + C6.fontFamily, (null != (i6 = W5.axis.domain.line.strokeWidth) ? i6 : 0) > 0 && (t8.lineWidth = Number(W5.axis.domain.line.strokeWidth), t8.lineCap = "square", W5.axis.domain.line.stroke && (t8.strokeStyle = W5.axis.domain.line.stroke), t8.beginPath(), t8.moveTo(0, 0), t8.lineTo("x" === n7 ? f2 : 0, "x" === n7 ? 0 : f2), t8.stroke());
  var O5 = "function" == typeof v5 ? v5 : function(t9) {
    return "" + t9;
  };
  if (B3.forEach(function(e12) {
    var i7;
    (null != (i7 = W5.axis.ticks.line.strokeWidth) ? i7 : 0) > 0 && (t8.lineWidth = Number(W5.axis.ticks.line.strokeWidth), t8.lineCap = "square", W5.axis.ticks.line.stroke && (t8.strokeStyle = W5.axis.ticks.line.stroke), t8.beginPath(), t8.moveTo(e12.x, e12.y), t8.lineTo(e12.x + e12.lineX, e12.y + e12.lineY), t8.stroke());
    var n8 = O5(e12.value);
    t8.save(), t8.translate(e12.x + e12.textX, e12.y + e12.textY), t8.rotate(Ht(g5)), C6.outlineWidth > 0 && (t8.strokeStyle = C6.outlineColor, t8.lineWidth = 2 * C6.outlineWidth, t8.lineJoin = "round", t8.strokeText("" + n8, 0, 0)), W5.axis.ticks.text.fill && (t8.fillStyle = C6.fill), t8.fillText("" + n8, 0, 0), t8.restore();
  }), void 0 !== p5) {
    var j5 = 0, z6 = 0, V3 = 0, D3 = "center";
    "y" === n7 ? (V3 = -90, j5 = S3, "start" === T4 ? (D3 = "start", z6 = f2) : "middle" === T4 ? (D3 = "center", z6 = f2 / 2) : "end" === T4 && (D3 = "end")) : (z6 = S3, "start" === T4 ? D3 = "start" : "middle" === T4 ? (D3 = "center", j5 = f2 / 2) : "end" === T4 && (D3 = "end", j5 = f2)), t8.translate(j5, z6), t8.rotate(Ht(V3)), t8.font = (W5.axis.legend.text.fontWeight ? W5.axis.legend.text.fontWeight + " " : "") + W5.axis.legend.text.fontSize + "px " + W5.axis.legend.text.fontFamily, W5.axis.legend.text.fill && (t8.fillStyle = W5.axis.legend.text.fill), t8.textAlign = D3, t8.textBaseline = "middle", t8.fillText(p5, 0, 0);
  }
  t8.restore();
};
var j2 = function(t8, e11) {
  var i6 = e11.xScale, n7 = e11.yScale, r6 = e11.width, a5 = e11.height, o5 = e11.top, l4 = e11.right, s3 = e11.bottom, c9 = e11.left, f2 = e11.theme, u2 = { top: o5, right: l4, bottom: s3, left: c9 };
  w2.forEach(function(e12) {
    var o6 = u2[e12];
    if (!o6) return null;
    var l5 = "top" === e12 || "bottom" === e12, s4 = "top" === e12 || "left" === e12 ? "before" : "after", c10 = l5 ? i6 : n7, d3 = P2(o6.format, c10);
    O3(t8, p2({}, o6, { axis: l5 ? "x" : "y", x: "right" === e12 ? r6 : 0, y: "bottom" === e12 ? a5 : 0, scale: c10, format: d3, length: l5 ? r6 : a5, ticksPosition: s4, theme: f2 }));
  });
};
var z3 = function(t8, e11) {
  var i6 = e11.width, n7 = e11.height, r6 = e11.scale, a5 = e11.axis, o5 = e11.values;
  T2({ width: i6, height: n7, scale: r6, axis: a5, values: o5 }).forEach(function(e12) {
    t8.beginPath(), t8.moveTo(e12.x1, e12.y1), t8.lineTo(e12.x2, e12.y2), t8.stroke();
  });
};

// node_modules/@nivo/legends/dist/nivo-legends.es.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());

// node_modules/@nivo/colors/dist/nivo-colors.es.js
var import_react18 = __toESM(require_react());
var import_get2 = __toESM(require_get());
var import_isPlainObject2 = __toESM(require_isPlainObject());
var import_prop_types2 = __toESM(require_prop_types());
function qe() {
  return qe = Object.assign ? Object.assign.bind() : function(e11) {
    for (var r6 = 1; r6 < arguments.length; r6++) {
      var n7 = arguments[r6];
      for (var t8 in n7) Object.prototype.hasOwnProperty.call(n7, t8) && (e11[t8] = n7[t8]);
    }
    return e11;
  }, qe.apply(this, arguments);
}
function Ce(e11, r6) {
  (null == r6 || r6 > e11.length) && (r6 = e11.length);
  for (var n7 = 0, t8 = new Array(r6); n7 < r6; n7++) t8[n7] = e11[n7];
  return t8;
}
function Ge(e11, r6) {
  var n7 = "undefined" != typeof Symbol && e11[Symbol.iterator] || e11["@@iterator"];
  if (n7) return (n7 = n7.call(e11)).next.bind(n7);
  if (Array.isArray(e11) || (n7 = function(e12, r7) {
    if (e12) {
      if ("string" == typeof e12) return Ce(e12, r7);
      var n8 = Object.prototype.toString.call(e12).slice(8, -1);
      return "Object" === n8 && e12.constructor && (n8 = e12.constructor.name), "Map" === n8 || "Set" === n8 ? Array.from(e12) : "Arguments" === n8 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n8) ? Ce(e12, r7) : void 0;
    }
  }(e11)) || r6 && e11 && "number" == typeof e11.length) {
    n7 && (e11 = n7);
    var t8 = 0;
    return function() {
      return t8 >= e11.length ? { done: true } : { done: false, value: e11[t8++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var Re = { nivo: ["#e8c1a0", "#f47560", "#f1e15b", "#e8a838", "#61cdbb", "#97e3d5"], category10: category10_default, accent: Accent_default, dark2: Dark2_default, paired: Paired_default, pastel1: Pastel1_default, pastel2: Pastel2_default, set1: Set1_default, set2: Set2_default, set3: Set3_default, tableau10: Tableau10_default };
var Ve = Object.keys(Re);
var Pe = { brown_blueGreen: scheme, purpleRed_green: scheme2, pink_yellowGreen: scheme3, purple_orange: scheme4, red_blue: scheme5, red_grey: scheme6, red_yellow_blue: scheme7, red_yellow_green: scheme8, spectral: scheme9 };
var Te = Object.keys(Pe);
var Ue = { brown_blueGreen: BrBG_default, purpleRed_green: PRGn_default, pink_yellowGreen: PiYG_default, purple_orange: PuOr_default, red_blue: RdBu_default, red_grey: RdGy_default, red_yellow_blue: RdYlBu_default, red_yellow_green: RdYlGn_default, spectral: Spectral_default };
var De = { blues: scheme22, greens: scheme23, greys: scheme24, oranges: scheme27, purples: scheme25, reds: scheme26, blue_green: scheme10, blue_purple: scheme11, green_blue: scheme12, orange_red: scheme13, purple_blue_green: scheme14, purple_blue: scheme15, purple_red: scheme16, red_purple: scheme17, yellow_green_blue: scheme18, yellow_green: scheme19, yellow_orange_brown: scheme20, yellow_orange_red: scheme21 };
var Me = Object.keys(De);
var $e = { blues: Blues_default, greens: Greens_default, greys: Greys_default, oranges: Oranges_default, purples: Purples_default, reds: Reds_default, turbo: turbo_default, viridis: viridis_default, inferno, magma, plasma, cividis: cividis_default, warm, cool, cubehelixDefault: cubehelix_default, blue_green: BuGn_default, blue_purple: BuPu_default, green_blue: GnBu_default, orange_red: OrRd_default, purple_blue_green: PuBuGn_default, purple_blue: PuBu_default, purple_red: PuRd_default, red_purple: RdPu_default, yellow_green_blue: YlGnBu_default, yellow_green: YlGn_default, yellow_orange_brown: YlOrBr_default, yellow_orange_red: YlOrRd_default };
var Be = qe({}, Re, Pe, De);
var Fe = Object.keys(Be);
var Le = { rainbow: rainbow_default, sinebow: sinebow_default };
var Ne = qe({}, Ue, $e, Le);
var Qe2 = Object.keys(Ne);
var We = function(e11, r6) {
  if ("function" == typeof e11) return e11;
  if ((0, import_isPlainObject2.default)(e11)) {
    if (function(e12) {
      return void 0 !== e12.theme;
    }(e11)) {
      if (void 0 === r6) throw new Error("Unable to use color from theme as no theme was provided");
      var n7 = (0, import_get2.default)(r6, e11.theme);
      if (void 0 === n7) throw new Error("Color from theme is undefined at path: '" + e11.theme + "'");
      return function() {
        return n7;
      };
    }
    if (function(e12) {
      return void 0 !== e12.from;
    }(e11)) {
      var t8 = function(r7) {
        return (0, import_get2.default)(r7, e11.from);
      };
      if (Array.isArray(e11.modifiers)) {
        for (var o5, i6 = [], u2 = function() {
          var e12 = o5.value, r7 = e12[0], n8 = e12[1];
          if ("brighter" === r7) i6.push(function(e13) {
            return e13.brighter(n8);
          });
          else if ("darker" === r7) i6.push(function(e13) {
            return e13.darker(n8);
          });
          else {
            if ("opacity" !== r7) throw new Error("Invalid color modifier: '" + r7 + "', must be one of: 'brighter', 'darker', 'opacity'");
            i6.push(function(e13) {
              return e13.opacity = n8, e13;
            });
          }
        }, a5 = Ge(e11.modifiers); !(o5 = a5()).done; ) u2();
        return 0 === i6.length ? t8 : function(e12) {
          return i6.reduce(function(e13, r7) {
            return r7(e13);
          }, rgb(t8(e12))).toString();
        };
      }
      return t8;
    }
    throw new Error("Invalid color spec, you should either specify 'theme' or 'from' when using a config object");
  }
  return function() {
    return e11;
  };
};
var Xe = function(e11, r6) {
  return (0, import_react18.useMemo)(function() {
    return We(e11, r6);
  }, [e11, r6]);
};
var Ye = import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.func, import_prop_types2.default.shape({ theme: import_prop_types2.default.string.isRequired }), import_prop_types2.default.shape({ from: import_prop_types2.default.string.isRequired, modifiers: import_prop_types2.default.arrayOf(import_prop_types2.default.array) })]);
var Ze2 = { scheme: "turbo" };
var er = function(e11, r6) {
  var n7 = e11.minValue, t8 = e11.maxValue, o5 = void 0 !== n7 ? n7 : r6.min, i6 = void 0 !== t8 ? t8 : r6.max, u2 = sequential().domain([o5, i6]).clamp(true);
  if ("colors" in e11) u2.range(e11.colors);
  else if ("interpolator" in e11) u2.interpolator(e11.interpolator);
  else {
    var a5, l4 = null != (a5 = e11.scheme) ? a5 : Ze2.scheme;
    u2.interpolator(Ne[l4]);
  }
  return u2;
};
var nr = { scheme: "red_yellow_blue", divergeAt: 0.5 };
var tr = function(e11, r6) {
  var n7, t8 = e11.minValue, o5 = e11.maxValue, i6 = void 0 !== t8 ? t8 : r6.min, u2 = void 0 !== o5 ? o5 : r6.max, a5 = [i6, i6 + (u2 - i6) / 2, u2], l4 = 0.5 - (null != (n7 = e11.divergeAt) ? n7 : nr.divergeAt), c9 = diverging().domain(a5).clamp(true), s3 = function(e12) {
    return String(e12);
  };
  if ("colors" in e11) s3 = diverging().domain(a5.map(function(e12) {
    return e12 - l4 * (u2 - i6);
  })).range(e11.colors).interpolator();
  else if ("interpolator" in e11) s3 = e11.interpolator;
  else {
    var f2, p5 = null != (f2 = e11.scheme) ? f2 : nr.scheme;
    s3 = Ne[p5];
  }
  return c9.interpolator(function(e12) {
    return s3(e12 + l4);
  });
};
var ir = { scheme: "turbo", steps: 7 };
var ur = function(e11, r6) {
  var n7 = quantize().domain(e11.domain || [r6.min, r6.max]).nice();
  if ("colors" in e11) n7.range(e11.colors);
  else {
    var t8 = e11.scheme || ir.scheme, o5 = void 0 === e11.steps ? ir.steps : e11.steps, i6 = Ne[t8], u2 = Array.from({ length: o5 }).map(function(e12, r7) {
      return i6(r7 * (1 / (o5 - 1)));
    });
    n7.range(u2);
  }
  return n7;
};
var lr = function(e11, r6) {
  if (function(e12) {
    return "sequential" === e12.type;
  }(e11)) return er(e11, r6);
  if (function(e12) {
    return "diverging" === e12.type;
  }(e11)) return tr(e11, r6);
  if (function(e12) {
    return "quantize" === e12.type;
  }(e11)) return ur(e11, r6);
  throw new Error("Invalid continuous color scale config");
};
var sr = function(e11, r6) {
  void 0 === r6 && (r6 = 16);
  var n7 = e11.domain();
  if ("thresholds" in e11) {
    var t8 = [], o5 = linear().domain(n7).range([0, 1]);
    return e11.range().forEach(function(r7, n8) {
      var i7 = e11.invertExtent(r7), u2 = i7[0], a5 = i7[1];
      t8.push({ key: n8 + ".0", offset: o5(u2), stopColor: r7 }), t8.push({ key: n8 + ".1", offset: o5(a5), stopColor: r7 });
    }), t8;
  }
  var i6 = e11.copy();
  return 2 === n7.length ? i6.domain([0, 1]) : 3 === n7.length && i6.domain([0, 0.5, 1]), i6.ticks(r6).map(function(e12) {
    return { key: "" + e12, offset: e12, stopColor: "" + i6(e12) };
  });
};

// node_modules/@nivo/legends/dist/nivo-legends.es.js
var c8 = __toESM(require_react());
var import_react19 = __toESM(require_react());
function p3() {
  return p3 = Object.assign ? Object.assign.bind() : function(t8) {
    for (var e11 = 1; e11 < arguments.length; e11++) {
      var i6 = arguments[e11];
      for (var n7 in i6) Object.prototype.hasOwnProperty.call(i6, n7) && (t8[n7] = i6[n7]);
    }
    return t8;
  }, p3.apply(this, arguments);
}
var y3 = { length: 200, thickness: 16, direction: "row", tickPosition: "after", tickSize: 4, tickSpacing: 3, tickOverlap: false, tickFormat: function(t8) {
  return "" + t8;
}, titleAlign: "start", titleOffset: 4 };
var b3 = function(t8) {
  var e11 = t8.anchor, i6 = t8.translateX, n7 = t8.translateY, o5 = t8.containerWidth, r6 = t8.containerHeight, l4 = t8.width, a5 = t8.height, c9 = i6, d3 = n7;
  switch (e11) {
    case "top":
      c9 += (o5 - l4) / 2;
      break;
    case "top-right":
      c9 += o5 - l4;
      break;
    case "right":
      c9 += o5 - l4, d3 += (r6 - a5) / 2;
      break;
    case "bottom-right":
      c9 += o5 - l4, d3 += r6 - a5;
      break;
    case "bottom":
      c9 += (o5 - l4) / 2, d3 += r6 - a5;
      break;
    case "bottom-left":
      d3 += r6 - a5;
      break;
    case "left":
      d3 += (r6 - a5) / 2;
      break;
    case "center":
      c9 += (o5 - l4) / 2, d3 += (r6 - a5) / 2;
  }
  return { x: c9, y: d3 };
};
var A3 = function(t8) {
  var e11, o5 = t8.scale, r6 = t8.ticks, l4 = t8.length, c9 = void 0 === l4 ? y3.length : l4, d3 = t8.thickness, s3 = void 0 === d3 ? y3.thickness : d3, h2 = t8.direction, g5 = void 0 === h2 ? y3.direction : h2, f2 = t8.tickPosition, m4 = void 0 === f2 ? y3.tickPosition : f2, v5 = t8.tickSize, u2 = void 0 === v5 ? y3.tickSize : v5, p5 = t8.tickSpacing, k4 = void 0 === p5 ? y3.tickSpacing : p5, x3 = t8.tickOverlap, b5 = void 0 === x3 ? y3.tickOverlap : x3, S3 = t8.tickFormat, A4 = void 0 === S3 ? y3.tickFormat : S3, W5 = t8.title, z6 = t8.titleAlign, C6 = void 0 === z6 ? y3.titleAlign : z6, w4 = t8.titleOffset, X2 = void 0 === w4 ? y3.titleOffset : w4, Y3 = "column" === g5 ? [].concat(o5.domain()).reverse() : o5.domain(), O5 = linear().domain(Y3);
  2 === Y3.length ? O5.range([0, c9]) : 3 === Y3.length && O5.range([0, c9 / 2, c9]), e11 = "thresholds" in o5 ? [Y3[0]].concat(o5.thresholds(), [Y3[1]]) : Array.isArray(r6) ? r6 : o5.ticks(r6);
  var B3, H2, E4, j5, L2, M3, F2 = sr(o5, 32), T4 = xt(A4), P4 = [], V3 = 0, R3 = 0;
  if ("row" === g5) {
    var D3, q3, G2;
    B3 = c9, H2 = s3, R3 = 1;
    var I2;
    L2 = 0, E4 = "start" === C6 ? 0 : "middle" === C6 ? c9 / 2 : c9, "before" === m4 ? (D3 = -u2, q3 = b5 ? s3 : 0, G2 = -u2 - k4, I2 = "alphabetic", j5 = s3 + X2, M3 = "hanging") : (D3 = b5 ? 0 : s3, G2 = (q3 = s3 + u2) + k4, I2 = "hanging", j5 = -X2, M3 = "alphabetic"), e11.forEach(function(t9) {
      var e12 = O5(t9);
      P4.push({ x1: e12, y1: D3, x2: e12, y2: q3, text: T4(t9), textX: e12, textY: G2, textHorizontalAlign: "middle", textVerticalAlign: I2 });
    });
  } else {
    var N3, _2, J4, K3;
    B3 = s3, H2 = c9, V3 = 1;
    L2 = -90, j5 = "start" === C6 ? c9 : "middle" === C6 ? c9 / 2 : 0, "before" === m4 ? (_2 = b5 ? s3 : 0, J4 = (N3 = -u2) - k4, K3 = "end", E4 = s3 + X2, M3 = "hanging") : (N3 = b5 ? 0 : s3, J4 = (_2 = s3 + u2) + k4, K3 = "start", E4 = -X2, M3 = "alphabetic"), e11.forEach(function(t9) {
      var e12 = O5(t9);
      P4.push({ x1: N3, y1: e12, x2: _2, y2: e12, text: T4(t9), textX: J4, textY: e12, textHorizontalAlign: K3, textVerticalAlign: "central" });
    });
  }
  return { width: B3, height: H2, gradientX1: 0, gradientY1: V3, gradientX2: R3, gradientY2: 0, colorStops: F2, ticks: P4, titleText: W5, titleX: E4, titleY: j5, titleRotation: L2, titleHorizontalAlign: C6, titleVerticalAlign: M3 };
};
var W3 = function(i6) {
  var n7 = i6.scale, r6 = i6.ticks, l4 = i6.length, a5 = void 0 === l4 ? y3.length : l4, c9 = i6.thickness, s3 = void 0 === c9 ? y3.thickness : c9, h2 = i6.direction, g5 = void 0 === h2 ? y3.direction : h2, f2 = i6.tickPosition, m4 = void 0 === f2 ? y3.tickPosition : f2, v5 = i6.tickSize, u2 = void 0 === v5 ? y3.tickSize : v5, k4 = i6.tickSpacing, x3 = void 0 === k4 ? y3.tickSpacing : k4, b5 = i6.tickOverlap, S3 = void 0 === b5 ? y3.tickOverlap : b5, W5 = i6.tickFormat, z6 = void 0 === W5 ? y3.tickFormat : W5, C6 = i6.title, w4 = i6.titleAlign, X2 = void 0 === w4 ? y3.titleAlign : w4, Y3 = i6.titleOffset, O5 = A3({ scale: n7, ticks: r6, length: a5, thickness: s3, direction: g5, tickPosition: m4, tickSize: u2, tickSpacing: x3, tickOverlap: S3, tickFormat: z6, title: C6, titleAlign: X2, titleOffset: void 0 === Y3 ? y3.titleOffset : Y3 }), B3 = O5.width, H2 = O5.height, E4 = O5.gradientX1, j5 = O5.gradientY1, L2 = O5.gradientX2, M3 = O5.gradientY2, F2 = O5.ticks, T4 = O5.colorStops, P4 = O5.titleText, V3 = O5.titleX, R3 = O5.titleY, D3 = O5.titleRotation, q3 = O5.titleVerticalAlign, G2 = O5.titleHorizontalAlign, I2 = zt(), N3 = "ContinuousColorsLegendSvgGradient." + g5 + "." + T4.map(function(t8) {
    return t8.offset;
  }).join("_");
  return (0, import_jsx_runtime4.jsxs)("g", { children: [(0, import_jsx_runtime4.jsx)("defs", { children: (0, import_jsx_runtime4.jsx)("linearGradient", { id: N3, x1: E4, y1: j5, x2: L2, y2: M3, children: T4.map(function(e11) {
    return (0, import_jsx_runtime4.jsx)("stop", p3({}, e11));
  }) }) }), P4 && (0, import_jsx_runtime4.jsx)("text", { transform: "translate(" + V3 + ", " + R3 + ") rotate(" + D3 + ")", textAnchor: G2, dominantBaseline: q3, style: I2.legends.title.text, children: P4 }), (0, import_jsx_runtime4.jsx)("rect", { width: B3, height: H2, fill: "url(#" + N3 }), F2.map(function(i7, n8) {
    return (0, import_jsx_runtime4.jsxs)(import_react19.Fragment, { children: [(0, import_jsx_runtime4.jsx)("line", { x1: i7.x1, y1: i7.y1, x2: i7.x2, y2: i7.y2, style: I2.legends.ticks.line }), (0, import_jsx_runtime4.jsx)("text", { x: i7.textX, y: i7.textY, textAnchor: i7.textHorizontalAlign, dominantBaseline: i7.textVerticalAlign, style: I2.legends.ticks.text, children: i7.text })] }, n8);
  })] });
};
var z4 = ["containerWidth", "containerHeight", "anchor", "translateX", "translateY", "length", "thickness", "direction"];
var C4 = function(e11) {
  var i6, n7, o5 = e11.containerWidth, r6 = e11.containerHeight, l4 = e11.anchor, a5 = e11.translateX, c9 = void 0 === a5 ? 0 : a5, d3 = e11.translateY, s3 = void 0 === d3 ? 0 : d3, h2 = e11.length, g5 = void 0 === h2 ? y3.length : h2, f2 = e11.thickness, m4 = void 0 === f2 ? y3.thickness : f2, v5 = e11.direction, u2 = void 0 === v5 ? y3.direction : v5, k4 = function(t8, e12) {
    if (null == t8) return {};
    var i7, n8, o6 = {}, r7 = Object.keys(t8);
    for (n8 = 0; n8 < r7.length; n8++) i7 = r7[n8], e12.indexOf(i7) >= 0 || (o6[i7] = t8[i7]);
    return o6;
  }(e11, z4);
  "row" === u2 ? (i6 = g5, n7 = m4) : (i6 = m4, n7 = g5);
  var x3 = b3({ anchor: l4, translateX: c9, translateY: s3, containerWidth: o5, containerHeight: r6, width: i6, height: n7 }), S3 = x3.x, A4 = x3.y;
  return (0, import_jsx_runtime4.jsx)("g", { transform: "translate(" + S3 + ", " + A4 + ")", children: (0, import_jsx_runtime4.jsx)(W3, p3({ length: g5, thickness: m4, direction: u2 }, k4)) });
};
var E2 = function(t8, e11) {
  var i6 = e11.containerWidth, n7 = e11.containerHeight, o5 = e11.anchor, r6 = e11.translateX, a5 = void 0 === r6 ? 0 : r6, c9 = e11.translateY, d3 = void 0 === c9 ? 0 : c9, s3 = e11.scale, h2 = e11.length, g5 = void 0 === h2 ? y3.length : h2, f2 = e11.thickness, m4 = void 0 === f2 ? y3.thickness : f2, v5 = e11.direction, u2 = void 0 === v5 ? y3.direction : v5, p5 = e11.ticks, k4 = e11.tickPosition, x3 = void 0 === k4 ? y3.tickPosition : k4, S3 = e11.tickSize, W5 = void 0 === S3 ? y3.tickSize : S3, z6 = e11.tickSpacing, C6 = void 0 === z6 ? y3.tickSpacing : z6, w4 = e11.tickOverlap, X2 = void 0 === w4 ? y3.tickOverlap : w4, Y3 = e11.tickFormat, O5 = void 0 === Y3 ? y3.tickFormat : Y3, B3 = e11.title, H2 = e11.titleAlign, E4 = void 0 === H2 ? y3.titleAlign : H2, j5 = e11.titleOffset, L2 = void 0 === j5 ? y3.titleOffset : j5, M3 = e11.theme, F2 = A3({ scale: s3, ticks: p5, length: g5, thickness: m4, direction: u2, tickPosition: x3, tickSize: W5, tickSpacing: C6, tickOverlap: X2, tickFormat: O5, title: B3, titleAlign: E4, titleOffset: L2 }), T4 = F2.width, P4 = F2.height, V3 = F2.gradientX1, R3 = F2.gradientY1, D3 = F2.gradientX2, q3 = F2.gradientY2, G2 = F2.colorStops, I2 = F2.ticks, N3 = F2.titleText, _2 = F2.titleX, J4 = F2.titleY, K3 = F2.titleRotation, Q2 = F2.titleVerticalAlign, U2 = F2.titleHorizontalAlign, Z2 = b3({ anchor: o5, translateX: a5, translateY: d3, containerWidth: i6, containerHeight: n7, width: T4, height: P4 }), $2 = Z2.x, tt2 = Z2.y, et2 = { font: t8.font, textAlign: t8.textAlign, textBaseline: t8.textBaseline };
  t8.save(), t8.translate($2, tt2);
  var it2 = t8.createLinearGradient(V3 * T4, R3 * P4, D3 * T4, q3 * P4);
  G2.forEach(function(t9) {
    it2.addColorStop(t9.offset, t9.stopColor);
  }), t8.fillStyle = it2, t8.fillRect(0, 0, T4, P4), t8.font = (M3.legends.ticks.text.fontWeight ? M3.legends.ticks.text.fontWeight + " " : "") + M3.legends.ticks.text.fontSize + "px " + M3.legends.ticks.text.fontFamily, I2.forEach(function(e12) {
    var i7;
    (null != (i7 = M3.legends.ticks.line.strokeWidth) ? i7 : 0) > 0 && (t8.lineWidth = Number(M3.axis.ticks.line.strokeWidth), M3.axis.ticks.line.stroke && (t8.strokeStyle = M3.axis.ticks.line.stroke), t8.lineCap = "square", t8.beginPath(), t8.moveTo(e12.x1, e12.y1), t8.lineTo(e12.x2, e12.y2), t8.stroke()), M3.legends.ticks.text.fill && (t8.fillStyle = M3.legends.ticks.text.fill), t8.textAlign = "middle" === e12.textHorizontalAlign ? "center" : e12.textHorizontalAlign, t8.textBaseline = "central" === e12.textVerticalAlign ? "middle" : e12.textVerticalAlign, t8.fillText(e12.text, e12.textX, e12.textY);
  }), N3 && (t8.save(), t8.translate(_2, J4), t8.rotate(Ht(K3)), t8.font = (M3.legends.title.text.fontWeight ? M3.legends.title.text.fontWeight + " " : "") + M3.legends.title.text.fontSize + "px " + M3.legends.title.text.fontFamily, M3.legends.title.text.fill && (t8.fillStyle = M3.legends.title.text.fill), t8.textAlign = "middle" === U2 ? "center" : U2, t8.textBaseline = Q2, t8.fillText(N3, 0, 0), t8.restore()), t8.restore(), t8.font = et2.font, t8.textAlign = et2.textAlign, t8.textBaseline = et2.textBaseline;
};

// node_modules/@nivo/annotations/dist/nivo-annotations.es.js
var import_react20 = __toESM(require_react());
var import_filter3 = __toESM(require_filter());
var import_isNumber = __toESM(require_isNumber());
var import_omit = __toESM(require_omit());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
function g4() {
  return g4 = Object.assign ? Object.assign.bind() : function(t8) {
    for (var n7 = 1; n7 < arguments.length; n7++) {
      var i6 = arguments[n7];
      for (var o5 in i6) Object.prototype.hasOwnProperty.call(i6, o5) && (t8[o5] = i6[o5]);
    }
    return t8;
  }, g4.apply(this, arguments);
}
var k3 = { dotSize: 4, noteWidth: 120, noteTextOffset: 8, animate: true };
var W4 = function(n7) {
  var i6 = typeof n7;
  return (0, import_react20.isValidElement)(n7) || "string" === i6 || "function" === i6 || "object" === i6;
};
var v4 = function(t8) {
  var n7 = typeof t8;
  return "string" === n7 || "function" === n7;
};
var b4 = function(t8) {
  return "circle" === t8.type;
};
var w3 = function(t8) {
  return "dot" === t8.type;
};
var z5 = function(t8) {
  return "rect" === t8.type;
};
var P3 = function(t8) {
  var n7 = t8.data, i6 = t8.annotations, e11 = t8.getPosition, r6 = t8.getDimensions;
  return i6.reduce(function(t9, i7) {
    var s3 = i7.offset || 0;
    return [].concat(t9, (0, import_filter3.default)(n7, i7.match).map(function(t10) {
      var n8 = e11(t10), o5 = r6(t10);
      return (b4(i7) || z5(i7)) && (o5.size = o5.size + 2 * s3, o5.width = o5.width + 2 * s3, o5.height = o5.height + 2 * s3), g4({}, (0, import_omit.default)(i7, ["match", "offset"]), n8, o5, { size: i7.size || o5.size, datum: t10 });
    }));
  }, []);
};
var C5 = function(t8, n7, i6, o5) {
  var e11 = Math.atan2(o5 - n7, i6 - t8);
  return Qt(Kt(e11));
};
var O4 = function(t8) {
  var n7, i6, o5 = t8.x, a5 = t8.y, r6 = t8.noteX, s3 = t8.noteY, h2 = t8.noteWidth, d3 = void 0 === h2 ? k3.noteWidth : h2, c9 = t8.noteTextOffset, f2 = void 0 === c9 ? k3.noteTextOffset : c9;
  if ((0, import_isNumber.default)(r6)) n7 = o5 + r6;
  else {
    if (void 0 === r6.abs) throw new Error("noteX should be either a number or an object containing an 'abs' property");
    n7 = r6.abs;
  }
  if ((0, import_isNumber.default)(s3)) i6 = a5 + s3;
  else {
    if (void 0 === s3.abs) throw new Error("noteY should be either a number or an object containing an 'abs' property");
    i6 = s3.abs;
  }
  var y4 = o5, x3 = a5, m4 = C5(o5, a5, n7, i6);
  if (b4(t8)) {
    var p5 = Jt(Ht(m4), t8.size / 2);
    y4 += p5.x, x3 += p5.y;
  }
  if (z5(t8)) {
    var g5 = Math.round((m4 + 90) / 45) % 8;
    0 === g5 && (x3 -= t8.height / 2), 1 === g5 && (y4 += t8.width / 2, x3 -= t8.height / 2), 2 === g5 && (y4 += t8.width / 2), 3 === g5 && (y4 += t8.width / 2, x3 += t8.height / 2), 4 === g5 && (x3 += t8.height / 2), 5 === g5 && (y4 -= t8.width / 2, x3 += t8.height / 2), 6 === g5 && (y4 -= t8.width / 2), 7 === g5 && (y4 -= t8.width / 2, x3 -= t8.height / 2);
  }
  var W5 = n7, v5 = n7;
  return (m4 + 90) % 360 > 180 ? (W5 -= d3, v5 -= d3) : v5 += d3, { points: [[y4, x3], [n7, i6], [v5, i6]], text: [W5, i6 - f2], angle: m4 + 90 };
};
var S2 = function(t8) {
  var i6 = t8.data, o5 = t8.annotations, e11 = t8.getPosition, a5 = t8.getDimensions;
  return (0, import_react20.useMemo)(function() {
    return P3({ data: i6, annotations: o5, getPosition: e11, getDimensions: a5 });
  }, [i6, o5, e11, a5]);
};
var j3 = function(t8) {
  var i6 = t8.annotations;
  return (0, import_react20.useMemo)(function() {
    return i6.map(function(t9) {
      return g4({}, t9, { computed: O4(g4({}, t9)) });
    });
  }, [i6]);
};
var M2 = function(t8) {
  return (0, import_react20.useMemo)(function() {
    return O4(t8);
  }, [t8]);
};
var T3 = function(t8) {
  var n7 = t8.datum, o5 = t8.x, e11 = t8.y, r6 = t8.note, s3 = zt(), l4 = Ur(), u2 = l4.animate, c9 = l4.config, k4 = useSpring({ x: o5, y: e11, config: c9, immediate: !u2 });
  return "function" == typeof r6 ? (0, import_react20.createElement)(r6, { x: o5, y: e11, datum: n7 }) : (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [s3.annotations.text.outlineWidth > 0 && (0, import_jsx_runtime5.jsx)(animated.text, { x: k4.x, y: k4.y, style: g4({}, s3.annotations.text, { strokeLinejoin: "round", strokeWidth: 2 * s3.annotations.text.outlineWidth, stroke: s3.annotations.text.outlineColor }), children: r6 }), (0, import_jsx_runtime5.jsx)(animated.text, { x: k4.x, y: k4.y, style: (0, import_omit.default)(s3.annotations.text, ["outlineWidth", "outlineColor"]), children: r6 })] });
};
var E3 = function(t8) {
  var i6 = t8.points, o5 = t8.isOutline, e11 = void 0 !== o5 && o5, a5 = zt(), r6 = (0, import_react20.useMemo)(function() {
    var t9 = i6[0];
    return i6.slice(1).reduce(function(t10, n7) {
      return t10 + " L" + n7[0] + "," + n7[1];
    }, "M" + t9[0] + "," + t9[1]);
  }, [i6]), s3 = Fr(r6);
  if (e11 && a5.annotations.link.outlineWidth <= 0) return null;
  var l4 = g4({}, a5.annotations.link);
  return e11 && (l4.strokeLinecap = "square", l4.strokeWidth = a5.annotations.link.strokeWidth + 2 * a5.annotations.link.outlineWidth, l4.stroke = a5.annotations.link.outlineColor, l4.opacity = a5.annotations.link.outlineOpacity), (0, import_jsx_runtime5.jsx)(animated.path, { fill: "none", d: s3, style: l4 });
};
var I = function(t8) {
  var n7 = t8.x, i6 = t8.y, o5 = t8.size, e11 = zt(), a5 = Ur(), r6 = a5.animate, s3 = a5.config, l4 = useSpring({ x: n7, y: i6, radius: o5 / 2, config: s3, immediate: !r6 });
  return (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [e11.annotations.outline.outlineWidth > 0 && (0, import_jsx_runtime5.jsx)(animated.circle, { cx: l4.x, cy: l4.y, r: l4.radius, style: g4({}, e11.annotations.outline, { fill: "none", strokeWidth: e11.annotations.outline.strokeWidth + 2 * e11.annotations.outline.outlineWidth, stroke: e11.annotations.outline.outlineColor, opacity: e11.annotations.outline.outlineOpacity }) }), (0, import_jsx_runtime5.jsx)(animated.circle, { cx: l4.x, cy: l4.y, r: l4.radius, style: e11.annotations.outline })] });
};
var D = function(t8) {
  var n7 = t8.x, i6 = t8.y, o5 = t8.size, e11 = void 0 === o5 ? k3.dotSize : o5, a5 = zt(), r6 = Ur(), s3 = r6.animate, l4 = r6.config, u2 = useSpring({ x: n7, y: i6, radius: e11 / 2, config: l4, immediate: !s3 });
  return (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [a5.annotations.outline.outlineWidth > 0 && (0, import_jsx_runtime5.jsx)(animated.circle, { cx: u2.x, cy: u2.y, r: u2.radius, style: g4({}, a5.annotations.outline, { fill: "none", strokeWidth: 2 * a5.annotations.outline.outlineWidth, stroke: a5.annotations.outline.outlineColor, opacity: a5.annotations.outline.outlineOpacity }) }), (0, import_jsx_runtime5.jsx)(animated.circle, { cx: u2.x, cy: u2.y, r: u2.radius, style: a5.annotations.symbol })] });
};
var L = function(t8) {
  var n7 = t8.x, i6 = t8.y, o5 = t8.width, e11 = t8.height, a5 = t8.borderRadius, r6 = void 0 === a5 ? 6 : a5, s3 = zt(), l4 = Ur(), u2 = l4.animate, c9 = l4.config, k4 = useSpring({ x: n7 - o5 / 2, y: i6 - e11 / 2, width: o5, height: e11, config: c9, immediate: !u2 });
  return (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [s3.annotations.outline.outlineWidth > 0 && (0, import_jsx_runtime5.jsx)(animated.rect, { x: k4.x, y: k4.y, rx: r6, ry: r6, width: k4.width, height: k4.height, style: g4({}, s3.annotations.outline, { fill: "none", strokeWidth: s3.annotations.outline.strokeWidth + 2 * s3.annotations.outline.outlineWidth, stroke: s3.annotations.outline.outlineColor, opacity: s3.annotations.outline.outlineOpacity }) }), (0, import_jsx_runtime5.jsx)(animated.rect, { x: k4.x, y: k4.y, rx: r6, ry: r6, width: k4.width, height: k4.height, style: s3.annotations.outline })] });
};
var R = function(t8) {
  var n7 = t8.datum, i6 = t8.x, o5 = t8.y, e11 = t8.note, a5 = M2(t8);
  if (!W4(e11)) throw new Error("note should be a valid react element");
  return (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [(0, import_jsx_runtime5.jsx)(E3, { points: a5.points, isOutline: true }), b4(t8) && (0, import_jsx_runtime5.jsx)(I, { x: i6, y: o5, size: t8.size }), w3(t8) && (0, import_jsx_runtime5.jsx)(D, { x: i6, y: o5, size: t8.size }), z5(t8) && (0, import_jsx_runtime5.jsx)(L, { x: i6, y: o5, width: t8.width, height: t8.height, borderRadius: t8.borderRadius }), (0, import_jsx_runtime5.jsx)(E3, { points: a5.points }), (0, import_jsx_runtime5.jsx)(T3, { datum: n7, x: a5.text[0], y: a5.text[1], note: e11 })] });
};
var q2 = function(t8, n7) {
  n7.forEach(function(n8, i6) {
    var o5 = n8[0], e11 = n8[1];
    0 === i6 ? t8.moveTo(o5, e11) : t8.lineTo(o5, e11);
  });
};
var J2 = function(t8, n7) {
  var i6 = n7.annotations, o5 = n7.theme;
  0 !== i6.length && (t8.save(), i6.forEach(function(n8) {
    if (!v4(n8.note)) throw new Error("note is invalid for canvas implementation");
    o5.annotations.link.outlineWidth > 0 && (t8.lineCap = "square", t8.strokeStyle = o5.annotations.link.outlineColor, t8.lineWidth = o5.annotations.link.strokeWidth + 2 * o5.annotations.link.outlineWidth, t8.beginPath(), q2(t8, n8.computed.points), t8.stroke(), t8.lineCap = "butt"), b4(n8) && o5.annotations.outline.outlineWidth > 0 && (t8.strokeStyle = o5.annotations.outline.outlineColor, t8.lineWidth = o5.annotations.outline.strokeWidth + 2 * o5.annotations.outline.outlineWidth, t8.beginPath(), t8.arc(n8.x, n8.y, n8.size / 2, 0, 2 * Math.PI), t8.stroke()), w3(n8) && o5.annotations.symbol.outlineWidth > 0 && (t8.strokeStyle = o5.annotations.symbol.outlineColor, t8.lineWidth = 2 * o5.annotations.symbol.outlineWidth, t8.beginPath(), t8.arc(n8.x, n8.y, n8.size / 2, 0, 2 * Math.PI), t8.stroke()), z5(n8) && o5.annotations.outline.outlineWidth > 0 && (t8.strokeStyle = o5.annotations.outline.outlineColor, t8.lineWidth = o5.annotations.outline.strokeWidth + 2 * o5.annotations.outline.outlineWidth, t8.beginPath(), t8.rect(n8.x - n8.width / 2, n8.y - n8.height / 2, n8.width, n8.height), t8.stroke()), t8.strokeStyle = o5.annotations.link.stroke, t8.lineWidth = o5.annotations.link.strokeWidth, t8.beginPath(), q2(t8, n8.computed.points), t8.stroke(), b4(n8) && (t8.strokeStyle = o5.annotations.outline.stroke, t8.lineWidth = o5.annotations.outline.strokeWidth, t8.beginPath(), t8.arc(n8.x, n8.y, n8.size / 2, 0, 2 * Math.PI), t8.stroke()), w3(n8) && (t8.fillStyle = o5.annotations.symbol.fill, t8.beginPath(), t8.arc(n8.x, n8.y, n8.size / 2, 0, 2 * Math.PI), t8.fill()), z5(n8) && (t8.strokeStyle = o5.annotations.outline.stroke, t8.lineWidth = o5.annotations.outline.strokeWidth, t8.beginPath(), t8.rect(n8.x - n8.width / 2, n8.y - n8.height / 2, n8.width, n8.height), t8.stroke()), "function" == typeof n8.note ? n8.note(t8, { datum: n8.datum, x: n8.computed.text[0], y: n8.computed.text[1], theme: o5 }) : (t8.font = o5.annotations.text.fontSize + "px " + o5.annotations.text.fontFamily, t8.textAlign = "left", t8.textBaseline = "alphabetic", t8.fillStyle = o5.annotations.text.fill, t8.strokeStyle = o5.annotations.text.outlineColor, t8.lineWidth = 2 * o5.annotations.text.outlineWidth, o5.annotations.text.outlineWidth > 0 && (t8.lineJoin = "round", t8.strokeText(n8.note, n8.computed.text[0], n8.computed.text[1]), t8.lineJoin = "miter"), t8.fillText(n8.note, n8.computed.text[0], n8.computed.text[1]));
  }), t8.restore());
};

// node_modules/@nivo/heatmap/dist/nivo-heatmap.es.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
function Y2() {
  return Y2 = Object.assign ? Object.assign.bind() : function(e11) {
    for (var t8 = 1; t8 < arguments.length; t8++) {
      var i6 = arguments[t8];
      for (var o5 in i6) Object.prototype.hasOwnProperty.call(i6, o5) && (e11[o5] = i6[o5]);
    }
    return e11;
  }, Y2.apply(this, arguments);
}
function G(e11, t8) {
  if (null == e11) return {};
  var i6, o5, n7 = {}, r6 = Object.keys(e11);
  for (o5 = 0; o5 < r6.length; o5++) i6 = r6[o5], t8.indexOf(i6) >= 0 || (n7[i6] = e11[i6]);
  return n7;
}
var j4 = { layers: ["grid", "axes", "cells", "legends", "annotations"], forceSquare: false, xInnerPadding: 0, xOuterPadding: 0, yInnerPadding: 0, yOuterPadding: 0, sizeVariation: false, opacity: 1, activeOpacity: 1, inactiveOpacity: 0.15, borderWidth: 0, borderColor: { from: "color", modifiers: [["darker", 0.8]] }, enableGridX: false, enableGridY: false, enableLabels: true, label: "formattedValue", labelTextColor: { from: "color", modifiers: [["darker", 2]] }, colors: { type: "sequential", scheme: "brown_blueGreen" }, emptyColor: "#000000", legends: [], annotations: [], isInteractive: true, hoverTarget: "rowColumn", tooltip: (0, import_react21.memo)(function(e11) {
  var t8 = e11.cell;
  return null === t8.formattedValue ? null : (0, import_jsx_runtime6.jsx)(w, { id: t8.serieId + " - " + t8.data.x, value: t8.formattedValue, enableChip: true, color: t8.color });
}), animate: true, motionConfig: "gentle" };
var H = Y2({}, j4, { axisTop: {}, axisRight: null, axisBottom: null, axisLeft: {}, borderRadius: 0, cellComponent: "rect" });
var D2 = Y2({}, j4, { axisTop: {}, axisRight: null, axisBottom: null, axisLeft: {}, renderCell: "rect", pixelRatio: "undefined" != typeof window && window.devicePixelRatio || 1 });
var _ = function(e11) {
  var t8 = e11.width, i6 = e11.height, o5 = e11.rows, n7 = e11.columns, r6 = t8, a5 = i6, l4 = 0, d3 = 0;
  if (e11.forceSquare) {
    var c9 = Math.max(t8 / n7, 0), u2 = Math.max(i6 / o5, 0), s3 = Math.min(c9, u2);
    l4 = (t8 - (r6 = s3 * n7)) / 2, d3 = (i6 - (a5 = s3 * o5)) / 2;
  }
  return { offsetX: l4, offsetY: d3, width: r6, height: a5 };
};
var J3 = function(e11) {
  var t8 = e11.data, i6 = e11.width, o5 = e11.height, n7 = e11.xInnerPadding, r6 = e11.xOuterPadding, a5 = e11.yInnerPadding, l4 = e11.yOuterPadding, d3 = e11.forceSquare, c9 = /* @__PURE__ */ new Set(), u2 = [], s3 = [], h2 = [];
  t8.forEach(function(e12) {
    u2.push(e12.id), e12.data.forEach(function(t9) {
      c9.add(t9.x);
      var i7 = null;
      void 0 !== t9.y && null !== t9.y && (s3.push(t9.y), i7 = t9.y), h2.push({ id: e12.id + "." + t9.x, serieId: e12.id, value: i7, data: t9 });
    });
  });
  var v5 = Array.from(c9), f2 = _({ width: i6, height: o5, columns: v5.length, rows: u2.length, forceSquare: d3 }), g5 = f2.width, b5 = f2.height, p5 = f2.offsetX, y4 = f2.offsetY, m4 = nn2(band().domain(v5).range([0, g5]).paddingOuter(r6).paddingInner(n7)), x3 = nn2(band().domain(u2).range([0, b5]).paddingOuter(l4).paddingInner(a5)), C6 = m4.bandwidth(), w4 = x3.bandwidth(), P4 = h2.map(function(e12) {
    return Y2({}, e12, { x: m4(e12.data.x) + C6 / 2, y: x3(e12.serieId) + w4 / 2, width: C6, height: w4 });
  });
  return { width: g5, height: b5, offsetX: p5, offsetY: y4, xScale: m4, yScale: x3, minValue: Math.min.apply(Math, s3), maxValue: Math.max.apply(Math, s3), cells: P4 };
};
var K2 = function(e11, t8, i6) {
  if (!e11) return function() {
    return 1;
  };
  var o5 = linear().domain(e11.values ? e11.values : [t8, i6]).range(e11.sizes);
  return function(e12) {
    return null === e12 ? 1 : o5(e12);
  };
};
var N2 = function(e11) {
  return { x: e11.x, y: e11.y };
};
var Q = function(e11) {
  return { size: Math.max(e11.width, e11.height), width: e11.width, height: e11.height };
};
var U = function(e11) {
  var i6 = e11.data, o5 = e11.width, n7 = e11.height, r6 = e11.xInnerPadding, a5 = e11.xOuterPadding, l4 = e11.yInnerPadding, d3 = e11.yOuterPadding, c9 = e11.forceSquare;
  return (0, import_react21.useMemo)(function() {
    return J3({ data: i6, width: o5, height: n7, xInnerPadding: r6, xOuterPadding: a5, yInnerPadding: l4, yOuterPadding: d3, forceSquare: c9 });
  }, [i6, o5, n7, r6, a5, l4, d3, c9]);
};
var Z = { cell: function(e11, t8) {
  return e11.id === t8.id;
}, row: function(e11, t8) {
  return e11.serieId === t8.serieId;
}, column: function(e11, t8) {
  return e11.data.x === t8.data.x;
}, rowColumn: function(e11, t8) {
  return e11.serieId === t8.serieId || e11.data.x === t8.data.x;
} };
var $ = function(e11) {
  var i6, n7, r6, a5 = e11.cells, l4 = e11.minValue, s3 = e11.maxValue, h2 = e11.sizeVariation, v5 = e11.colors, f2 = e11.emptyColor, g5 = e11.opacity, b5 = e11.activeOpacity, p5 = e11.inactiveOpacity, y4 = e11.borderColor, m4 = e11.label, x3 = e11.labelTextColor, C6 = e11.valueFormat, w4 = e11.activeIds, P4 = (0, import_react21.useMemo)(function() {
    return K2(i6, n7, r6);
  }, [i6 = h2, n7 = l4, r6 = s3]), S3 = (0, import_react21.useMemo)(function() {
    return "function" == typeof v5 ? null : lr(v5, { min: l4, max: s3 });
  }, [v5, l4, s3]), M3 = (0, import_react21.useCallback)(function(e12) {
    if (null !== e12.value) {
      if ("function" == typeof v5) return v5(e12);
      if (null !== S3) return S3(e12.value);
    }
    return f2;
  }, [v5, S3, f2]), T4 = zt(), W5 = Xe(y4, T4), L2 = Xe(x3, T4), k4 = Ot(C6), V3 = Wn(m4);
  return { cells: (0, import_react21.useMemo)(function() {
    return a5.map(function(e12) {
      var t8 = g5;
      w4.length > 0 && (t8 = w4.includes(e12.id) ? b5 : p5);
      var i7 = P4(e12.value), o5 = Y2({}, e12, { width: e12.width * i7, height: e12.height * i7, formattedValue: null !== e12.value ? k4(e12.value) : null, opacity: t8 });
      return o5.label = V3(o5), o5.color = M3(o5), o5.borderColor = W5(o5), o5.labelTextColor = L2(o5), o5;
    });
  }, [a5, P4, M3, W5, L2, k4, V3, w4, g5, b5, p5]), colorScale: S3 };
};
var ee = function(e11) {
  var o5 = e11.data, n7 = e11.valueFormat, r6 = e11.width, a5 = e11.height, l4 = e11.xOuterPadding, d3 = void 0 === l4 ? j4.xOuterPadding : l4, c9 = e11.xInnerPadding, u2 = void 0 === c9 ? j4.xInnerPadding : c9, s3 = e11.yOuterPadding, h2 = void 0 === s3 ? j4.yOuterPadding : s3, v5 = e11.yInnerPadding, f2 = void 0 === v5 ? j4.yInnerPadding : v5, g5 = e11.forceSquare, b5 = void 0 === g5 ? j4.forceSquare : g5, p5 = e11.sizeVariation, y4 = void 0 === p5 ? j4.sizeVariation : p5, m4 = e11.colors, x3 = void 0 === m4 ? j4.colors : m4, C6 = e11.emptyColor, w4 = void 0 === C6 ? j4.emptyColor : C6, P4 = e11.opacity, O5 = void 0 === P4 ? j4.opacity : P4, I2 = e11.activeOpacity, S3 = void 0 === I2 ? j4.activeOpacity : I2, M3 = e11.inactiveOpacity, T4 = void 0 === M3 ? j4.inactiveOpacity : M3, W5 = e11.borderColor, L2 = void 0 === W5 ? j4.borderColor : W5, k4 = e11.label, V3 = void 0 === k4 ? j4.label : k4, R3 = e11.labelTextColor, B3 = void 0 === R3 ? j4.labelTextColor : R3, q3 = e11.hoverTarget, E4 = void 0 === q3 ? j4.hoverTarget : q3, z6 = (0, import_react21.useState)(null), A4 = z6[0], F2 = z6[1], X2 = U({ data: o5, width: r6, height: a5, xOuterPadding: d3, xInnerPadding: u2, yOuterPadding: h2, yInnerPadding: f2, forceSquare: b5 }), Y3 = X2.width, G2 = X2.height, H2 = X2.offsetX, D3 = X2.offsetY, _2 = X2.cells, J4 = X2.xScale, K3 = X2.yScale, N3 = X2.minValue, Q2 = X2.maxValue, ee2 = (0, import_react21.useMemo)(function() {
    if (!A4) return [];
    var e12 = Z[E4];
    return _2.filter(function(t8) {
      return e12(t8, A4);
    }).map(function(e13) {
      return e13.id;
    });
  }, [_2, A4, E4]), te2 = $({ cells: _2, minValue: N3, maxValue: Q2, sizeVariation: y4, colors: x3, emptyColor: w4, opacity: O5, activeOpacity: S3, inactiveOpacity: T4, borderColor: L2, label: V3, labelTextColor: B3, valueFormat: n7, activeIds: ee2 });
  return { width: Y3, height: G2, offsetX: H2, offsetY: D3, cells: te2.cells, xScale: J4, yScale: K3, colorScale: te2.colorScale, activeCell: A4, setActiveCell: F2 };
};
var te = function(e11, t8) {
  return S2({ data: e11, annotations: t8, getPosition: N2, getDimensions: Q });
};
var ie = (0, import_react21.memo)(function(e11) {
  var i6 = e11.cell, o5 = e11.borderWidth, n7 = e11.borderRadius, r6 = e11.animatedProps, a5 = e11.onMouseEnter, l4 = e11.onMouseMove, c9 = e11.onMouseLeave, u2 = e11.onClick, s3 = e11.enableLabels, h2 = zt(), v5 = (0, import_react21.useMemo)(function() {
    return { onMouseEnter: a5 ? a5(i6) : void 0, onMouseMove: l4 ? l4(i6) : void 0, onMouseLeave: c9 ? c9(i6) : void 0, onClick: u2 ? u2(i6) : void 0 };
  }, [i6, a5, l4, c9, u2]);
  return (0, import_jsx_runtime6.jsxs)(animated.g, Y2({ "data-testid": "cell." + i6.id, style: { cursor: "pointer" }, opacity: r6.opacity }, v5, { transform: to2([r6.x, r6.y, r6.scale], function(e12, t8, i7) {
    return "translate(" + e12 + ", " + t8 + ") scale(" + i7 + ")";
  }), children: [(0, import_jsx_runtime6.jsx)(animated.rect, { transform: to2([r6.width, r6.height], function(e12, t8) {
    return "translate(" + -0.5 * e12 + ", " + -0.5 * t8 + ")";
  }), fill: r6.color, width: r6.width, height: r6.height, stroke: r6.borderColor, strokeWidth: o5, rx: n7, ry: n7 }, i6.id), s3 && (0, import_jsx_runtime6.jsx)(animated.text, { textAnchor: "middle", dominantBaseline: "central", fill: r6.labelTextColor, style: Y2({}, h2.labels.text, { fill: void 0, userSelect: "none" }), children: i6.label })] }));
});
var oe = (0, import_react21.memo)(function(e11) {
  var i6 = e11.cell, o5 = e11.borderWidth, n7 = e11.animatedProps, r6 = e11.onMouseEnter, a5 = e11.onMouseMove, l4 = e11.onMouseLeave, c9 = e11.onClick, u2 = e11.enableLabels, s3 = zt(), h2 = (0, import_react21.useMemo)(function() {
    return { onMouseEnter: r6 ? r6(i6) : void 0, onMouseMove: a5 ? a5(i6) : void 0, onMouseLeave: l4 ? l4(i6) : void 0, onClick: c9 ? c9(i6) : void 0 };
  }, [i6, r6, a5, l4, c9]);
  return (0, import_jsx_runtime6.jsxs)(animated.g, Y2({ "data-testid": "cell." + i6.id, style: { cursor: "pointer" }, opacity: n7.opacity }, h2, { transform: to2([n7.x, n7.y], function(e12, t8) {
    return "translate(" + e12 + ", " + t8 + ")";
  }), children: [(0, import_jsx_runtime6.jsx)(animated.circle, { r: to2([n7.width, n7.height], function(e12, t8) {
    return Math.min(e12, t8) / 2;
  }), fill: n7.color, fillOpacity: n7.opacity, strokeWidth: o5, stroke: n7.borderColor }), u2 && (0, import_jsx_runtime6.jsx)(animated.text, { dominantBaseline: "central", textAnchor: "middle", fill: n7.labelTextColor, style: Y2({}, s3.labels.text, { fill: void 0 }), children: i6.label })] }));
});
var ne = function(e11) {
  return { x: e11.x, y: e11.y, width: e11.width, height: e11.height, color: e11.color, opacity: 0, borderColor: e11.borderColor, labelTextColor: e11.labelTextColor, scale: 0 };
};
var re3 = function(e11) {
  return { x: e11.x, y: e11.y, width: e11.width, height: e11.height, color: e11.color, opacity: e11.opacity, borderColor: e11.borderColor, labelTextColor: e11.labelTextColor, scale: 1 };
};
var ae = function(e11) {
  return { x: e11.x, y: e11.y, width: e11.width, height: e11.height, color: e11.color, opacity: 0, borderColor: e11.borderColor, labelTextColor: e11.labelTextColor, scale: 0 };
};
var le = function(e11) {
  var i6, o5 = e11.cells, r6 = e11.cellComponent, a5 = e11.borderRadius, l4 = e11.borderWidth, d3 = e11.isInteractive, c9 = e11.setActiveCell, u2 = e11.onMouseEnter, h2 = e11.onMouseMove, v5 = e11.onMouseLeave, f2 = e11.onClick, g5 = e11.tooltip, b5 = e11.enableLabels, p5 = Ur(), y4 = p5.animate, m4 = p5.config, x3 = useTransition(o5, { keys: function(e12) {
    return e12.id;
  }, initial: re3, from: ne, enter: re3, update: re3, leave: ae, config: m4, immediate: !y4 }), C6 = k(), w4 = C6.showTooltipFromEvent, P4 = C6.hideTooltip, O5 = (0, import_react21.useMemo)(function() {
    if (d3) return function(e12) {
      return function(t8) {
        w4((0, import_react21.createElement)(g5, { cell: e12 }), t8), c9(e12), null == u2 || u2(e12, t8);
      };
    };
  }, [d3, w4, g5, c9, u2]), I2 = (0, import_react21.useMemo)(function() {
    if (d3) return function(e12) {
      return function(t8) {
        w4((0, import_react21.createElement)(g5, { cell: e12 }), t8), null == h2 || h2(e12, t8);
      };
    };
  }, [d3, w4, g5, h2]), S3 = (0, import_react21.useMemo)(function() {
    if (d3) return function(e12) {
      return function(t8) {
        P4(), c9(null), null == v5 || v5(e12, t8);
      };
    };
  }, [d3, P4, c9, v5]), M3 = (0, import_react21.useMemo)(function() {
    if (d3) return function(e12) {
      return function(t8) {
        null == f2 || f2(e12, t8);
      };
    };
  }, [d3, f2]);
  return i6 = "rect" === r6 ? ie : "circle" === r6 ? oe : r6, (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, { children: x3(function(e12, t8) {
    return (0, import_react21.createElement)(i6, { cell: t8, borderRadius: a5, borderWidth: l4, animatedProps: e12, enableLabels: b5, onMouseEnter: O5, onMouseMove: I2, onMouseLeave: S3, onClick: M3 });
  }) });
};
var de = function(e11) {
  var t8 = e11.cells, i6 = e11.annotations, o5 = te(t8, i6);
  return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, { children: o5.map(function(e12, t9) {
    return (0, import_jsx_runtime6.jsx)(R, Y2({}, e12), t9);
  }) });
};
var ce = ["isInteractive", "animate", "motionConfig", "theme", "renderWrapper"];
var ue = function(e11) {
  var i6 = e11.data, o5 = e11.layers, a5 = void 0 === o5 ? H.layers : o5, l4 = e11.valueFormat, d3 = e11.width, c9 = e11.height, u2 = e11.margin, s3 = e11.forceSquare, h2 = void 0 === s3 ? H.forceSquare : s3, g5 = e11.xInnerPadding, b5 = void 0 === g5 ? H.xInnerPadding : g5, p5 = e11.xOuterPadding, x3 = void 0 === p5 ? H.xOuterPadding : p5, C6 = e11.yInnerPadding, P4 = void 0 === C6 ? H.yInnerPadding : C6, O5 = e11.yOuterPadding, I2 = void 0 === O5 ? H.yOuterPadding : O5, S3 = e11.sizeVariation, M3 = void 0 === S3 ? H.sizeVariation : S3, T4 = e11.cellComponent, W5 = void 0 === T4 ? H.cellComponent : T4, L2 = e11.opacity, k4 = void 0 === L2 ? H.opacity : L2, R3 = e11.activeOpacity, B3 = void 0 === R3 ? H.activeOpacity : R3, q3 = e11.inactiveOpacity, E4 = void 0 === q3 ? H.inactiveOpacity : q3, z6 = e11.borderRadius, A4 = void 0 === z6 ? H.borderRadius : z6, F2 = e11.borderWidth, X2 = void 0 === F2 ? H.borderWidth : F2, G2 = e11.borderColor, j5 = void 0 === G2 ? H.borderColor : G2, D3 = e11.enableGridX, _2 = void 0 === D3 ? H.enableGridX : D3, J4 = e11.enableGridY, K3 = void 0 === J4 ? H.enableGridY : J4, N3 = e11.axisTop, Q2 = void 0 === N3 ? H.axisTop : N3, U2 = e11.axisRight, Z2 = void 0 === U2 ? H.axisRight : U2, $2 = e11.axisBottom, te2 = void 0 === $2 ? H.axisBottom : $2, ie2 = e11.axisLeft, oe2 = void 0 === ie2 ? H.axisLeft : ie2, ne2 = e11.enableLabels, re4 = void 0 === ne2 ? H.enableLabels : ne2, ae2 = e11.label, ce2 = void 0 === ae2 ? H.label : ae2, ue2 = e11.labelTextColor, se2 = void 0 === ue2 ? H.labelTextColor : ue2, he2 = e11.colors, ve2 = void 0 === he2 ? H.colors : he2, fe2 = e11.emptyColor, ge2 = void 0 === fe2 ? H.emptyColor : fe2, be2 = e11.legends, pe2 = void 0 === be2 ? H.legends : be2, ye2 = e11.annotations, me = void 0 === ye2 ? H.annotations : ye2, xe = e11.isInteractive, Ce2 = void 0 === xe ? H.isInteractive : xe, we2 = e11.onMouseEnter, Pe2 = e11.onMouseMove, Oe2 = e11.onMouseLeave, Ie = e11.onClick, Se = e11.hoverTarget, Me2 = void 0 === Se ? H.hoverTarget : Se, Te2 = e11.tooltip, We2 = void 0 === Te2 ? H.tooltip : Te2, Le2 = e11.role, ke2 = e11.ariaLabel, Ve2 = e11.ariaLabelledBy, Re2 = e11.ariaDescribedBy, Be2 = wt(d3, c9, u2), qe2 = Be2.margin, Ee = Be2.innerWidth, ze = Be2.innerHeight, Ae = Be2.outerWidth, Fe2 = Be2.outerHeight, Xe2 = ee({ data: i6, valueFormat: l4, width: Ee, height: ze, forceSquare: h2, xInnerPadding: b5, xOuterPadding: x3, yInnerPadding: P4, yOuterPadding: I2, sizeVariation: M3, colors: ve2, emptyColor: ge2, opacity: k4, activeOpacity: B3, inactiveOpacity: E4, borderColor: j5, label: ce2, labelTextColor: se2, hoverTarget: Me2 }), Ye2 = Xe2.width, Ge2 = Xe2.height, je2 = Xe2.offsetX, He = Xe2.offsetY, De2 = Xe2.xScale, _e = Xe2.yScale, Je = Xe2.cells, Ke = Xe2.colorScale, Ne2 = Xe2.activeCell, Qe3 = Xe2.setActiveCell, Ue2 = (0, import_react21.useMemo)(function() {
    return Y2({}, qe2, { top: qe2.top + He, left: qe2.left + je2 });
  }, [qe2, je2, He]), Ze3 = { grid: null, axes: null, cells: null, legends: null, annotations: null };
  a5.includes("grid") && (Ze3.grid = (0, import_jsx_runtime6.jsx)(C3, { width: Ye2, height: Ge2, xScale: _2 ? De2 : null, yScale: K3 ? _e : null }, "grid")), a5.includes("axes") && (Ze3.axes = (0, import_jsx_runtime6.jsx)(B, { xScale: De2, yScale: _e, width: Ye2, height: Ge2, top: Q2, right: Z2, bottom: te2, left: oe2 }, "axes")), a5.includes("cells") && (Ze3.cells = (0, import_jsx_runtime6.jsx)(import_react21.Fragment, { children: (0, import_jsx_runtime6.jsx)(le, { cells: Je, cellComponent: W5, borderRadius: A4, borderWidth: X2, isInteractive: Ce2, setActiveCell: Qe3, onMouseEnter: we2, onMouseMove: Pe2, onMouseLeave: Oe2, onClick: Ie, tooltip: We2, enableLabels: re4 }) }, "cells")), a5.includes("legends") && null !== Ke && (Ze3.legends = (0, import_jsx_runtime6.jsx)(import_react21.Fragment, { children: pe2.map(function(e12, t8) {
    return (0, import_react21.createElement)(C4, Y2({}, e12, { key: t8, containerWidth: Ye2, containerHeight: Ge2, scale: Ke }));
  }) }, "legends")), a5.includes("annotations") && me.length > 0 && (Ze3.annotations = (0, import_jsx_runtime6.jsx)(de, { cells: Je, annotations: me }, "annotations"));
  var $e2 = { cells: Je, activeCell: Ne2, setActiveCell: Qe3 };
  return (0, import_jsx_runtime6.jsx)(gn, { width: Ae, height: Fe2, margin: Object.assign({}, Ue2, { top: Ue2.top, left: Ue2.left }), role: Le2, ariaLabel: ke2, ariaLabelledBy: Ve2, ariaDescribedBy: Re2, children: a5.map(function(e12, t8) {
    var i7;
    return "function" == typeof e12 ? (0, import_jsx_runtime6.jsx)(import_react21.Fragment, { children: (0, import_react21.createElement)(e12, $e2) }, t8) : null != (i7 = null == Ze3 ? void 0 : Ze3[e12]) ? i7 : null;
  }) });
};
var se = function(e11) {
  var t8 = e11.isInteractive, i6 = void 0 === t8 ? H.isInteractive : t8, o5 = e11.animate, n7 = void 0 === o5 ? H.animate : o5, r6 = e11.motionConfig, a5 = void 0 === r6 ? H.motionConfig : r6, l4 = e11.theme, d3 = e11.renderWrapper, c9 = G(e11, ce);
  return (0, import_jsx_runtime6.jsx)(St, { animate: n7, isInteractive: i6, motionConfig: a5, renderWrapper: d3, theme: l4, children: (0, import_jsx_runtime6.jsx)(ue, Y2({ isInteractive: i6 }, c9)) });
};
var he = function(e11) {
  return (0, import_jsx_runtime6.jsx)(It, { children: function(t8) {
    var i6 = t8.width, o5 = t8.height;
    return (0, import_jsx_runtime6.jsx)(se, Y2({ width: i6, height: o5 }, e11));
  } });
};
var ve = function(e11, t8) {
  var i6 = t8.cell, o5 = i6.x, n7 = i6.y, r6 = i6.width, a5 = i6.height, l4 = i6.color, d3 = i6.borderColor, c9 = i6.opacity, u2 = i6.labelTextColor, s3 = i6.label, h2 = t8.borderWidth, v5 = t8.enableLabels, f2 = t8.theme;
  e11.save(), e11.globalAlpha = c9, e11.fillStyle = l4, h2 > 0 && (e11.strokeStyle = d3, e11.lineWidth = h2), e11.fillRect(o5 - r6 / 2, n7 - a5 / 2, r6, a5), h2 > 0 && e11.strokeRect(o5 - r6 / 2, n7 - a5 / 2, r6, a5), v5 && (e11.fillStyle = u2, e11.font = (f2.labels.text.fontWeight ? f2.labels.text.fontWeight + " " : "") + f2.labels.text.fontSize + "px " + f2.labels.text.fontFamily, e11.textAlign = "center", e11.textBaseline = "middle", e11.fillText(s3, o5, n7)), e11.restore();
};
var fe = function(e11, t8) {
  var i6 = t8.cell, o5 = i6.x, n7 = i6.y, r6 = i6.width, a5 = i6.height, l4 = i6.color, d3 = i6.borderColor, c9 = i6.opacity, u2 = i6.labelTextColor, s3 = i6.label, h2 = t8.borderWidth, v5 = t8.enableLabels, f2 = t8.theme;
  e11.save(), e11.globalAlpha = c9;
  var g5 = Math.min(r6, a5) / 2;
  e11.fillStyle = l4, h2 > 0 && (e11.strokeStyle = d3, e11.lineWidth = h2), e11.beginPath(), e11.arc(o5, n7, g5, 0, 2 * Math.PI), e11.fill(), h2 > 0 && e11.stroke(), v5 && (e11.fillStyle = u2, e11.font = (f2.labels.text.fontWeight ? f2.labels.text.fontWeight + " " : "") + f2.labels.text.fontSize + "px " + f2.labels.text.fontFamily, e11.textAlign = "center", e11.textBaseline = "middle", e11.fillText(s3, o5, n7)), e11.restore();
};
var ge = ["theme", "isInteractive", "animate", "motionConfig", "renderWrapper"];
var be = function(e11) {
  var i6, r6 = e11.data, c9 = e11.layers, u2 = void 0 === c9 ? D2.layers : c9, s3 = e11.valueFormat, h2 = e11.width, f2 = e11.height, g5 = e11.margin, y4 = e11.xInnerPadding, m4 = void 0 === y4 ? D2.xInnerPadding : y4, w4 = e11.xOuterPadding, O5 = void 0 === w4 ? D2.xOuterPadding : w4, I2 = e11.yInnerPadding, S3 = void 0 === I2 ? D2.yInnerPadding : I2, M3 = e11.yOuterPadding, L2 = void 0 === M3 ? D2.yOuterPadding : M3, R3 = e11.forceSquare, B3 = void 0 === R3 ? D2.forceSquare : R3, q3 = e11.sizeVariation, E4 = void 0 === q3 ? D2.sizeVariation : q3, z6 = e11.renderCell, A4 = void 0 === z6 ? D2.renderCell : z6, F2 = e11.opacity, X2 = void 0 === F2 ? D2.opacity : F2, G2 = e11.activeOpacity, j5 = void 0 === G2 ? D2.activeOpacity : G2, H2 = e11.inactiveOpacity, _2 = void 0 === H2 ? D2.inactiveOpacity : H2, J4 = e11.borderWidth, K3 = void 0 === J4 ? D2.borderWidth : J4, N3 = e11.borderColor, Q2 = void 0 === N3 ? D2.borderColor : N3, U2 = e11.enableGridX, Z2 = void 0 === U2 ? D2.enableGridX : U2, $2 = e11.enableGridY, ie2 = void 0 === $2 ? D2.enableGridY : $2, oe2 = e11.axisTop, ne2 = void 0 === oe2 ? D2.axisTop : oe2, re4 = e11.axisRight, ae2 = void 0 === re4 ? D2.axisRight : re4, le2 = e11.axisBottom, de2 = void 0 === le2 ? D2.axisBottom : le2, ce2 = e11.axisLeft, ue2 = void 0 === ce2 ? D2.axisLeft : ce2, se2 = e11.enableLabels, he2 = void 0 === se2 ? D2.enableLabels : se2, ge2 = e11.label, be2 = void 0 === ge2 ? D2.label : ge2, pe2 = e11.labelTextColor, ye2 = void 0 === pe2 ? D2.labelTextColor : pe2, me = e11.colors, xe = void 0 === me ? D2.colors : me, Ce2 = e11.emptyColor, we2 = void 0 === Ce2 ? D2.emptyColor : Ce2, Pe2 = e11.legends, Oe2 = void 0 === Pe2 ? D2.legends : Pe2, Ie = e11.annotations, Se = void 0 === Ie ? D2.annotations : Ie, Me2 = e11.isInteractive, Te2 = void 0 === Me2 ? D2.isInteractive : Me2, We2 = e11.onClick, Le2 = e11.hoverTarget, ke2 = void 0 === Le2 ? D2.hoverTarget : Le2, Ve2 = e11.tooltip, Re2 = void 0 === Ve2 ? D2.tooltip : Ve2, Be2 = e11.role, qe2 = e11.ariaLabel, Ee = e11.ariaLabelledBy, ze = e11.ariaDescribedBy, Ae = e11.pixelRatio, Fe2 = void 0 === Ae ? D2.pixelRatio : Ae, Xe2 = (0, import_react21.useRef)(null), Ye2 = wt(h2, f2, g5), Ge2 = Ye2.margin, je2 = Ye2.innerWidth, He = Ye2.innerHeight, De2 = Ye2.outerWidth, _e = Ye2.outerHeight, Je = ee({ data: r6, valueFormat: s3, width: je2, height: He, xInnerPadding: m4, xOuterPadding: O5, yInnerPadding: S3, yOuterPadding: L2, forceSquare: B3, sizeVariation: E4, colors: xe, emptyColor: we2, opacity: X2, activeOpacity: j5, inactiveOpacity: _2, borderColor: Q2, label: be2, labelTextColor: ye2, hoverTarget: ke2 }), Ke = Je.width, Ne2 = Je.height, Qe3 = Je.offsetX, Ue2 = Je.offsetY, Ze3 = Je.xScale, $e2 = Je.yScale, et2 = Je.cells, tt2 = Je.colorScale, it2 = Je.activeCell, ot2 = Je.setActiveCell, nt2 = (0, import_react21.useMemo)(function() {
    return Y2({}, Ge2, { top: Ge2.top + Ue2, left: Ge2.left + Qe3 });
  }, [Ge2, Qe3, Ue2]), rt2 = te(et2, Se), at2 = j3({ annotations: rt2 });
  i6 = "function" == typeof A4 ? A4 : "circle" === A4 ? fe : ve;
  var lt = zt(), dt2 = (0, import_react21.useMemo)(function() {
    return { cells: et2, activeCell: it2, setActiveCell: ot2 };
  }, [et2, it2, ot2]);
  (0, import_react21.useEffect)(function() {
    if (null !== Xe2.current) {
      var e12 = Xe2.current.getContext("2d");
      e12 && (Xe2.current.width = De2 * Fe2, Xe2.current.height = _e * Fe2, e12.scale(Fe2, Fe2), e12.fillStyle = lt.background, e12.fillRect(0, 0, De2, _e), e12.translate(nt2.left, nt2.top), u2.forEach(function(t8) {
        "grid" === t8 ? (e12.lineWidth = lt.grid.line.strokeWidth, e12.strokeStyle = lt.grid.line.stroke, Z2 && z3(e12, { width: Ke, height: Ne2, scale: Ze3, axis: "x" }), ie2 && z3(e12, { width: Ke, height: Ne2, scale: $e2, axis: "y" })) : "axes" === t8 ? j2(e12, { xScale: Ze3, yScale: $e2, width: Ke, height: Ne2, top: ne2, right: ae2, bottom: de2, left: ue2, theme: lt }) : "cells" === t8 ? (e12.textAlign = "center", e12.textBaseline = "middle", et2.forEach(function(t9) {
          i6(e12, { cell: t9, borderWidth: K3, enableLabels: he2, theme: lt });
        })) : "legends" === t8 && null !== tt2 ? Oe2.forEach(function(t9) {
          E2(e12, Y2({}, t9, { containerWidth: Ke, containerHeight: Ne2, scale: tt2, theme: lt }));
        }) : "annotations" === t8 ? J2(e12, { annotations: at2, theme: lt }) : "function" == typeof t8 && t8(e12, dt2);
      }));
    }
  }, [Xe2, Fe2, De2, _e, Ke, Ne2, nt2, u2, dt2, et2, i6, Z2, ie2, ne2, ae2, de2, ue2, Ze3, $e2, lt, K3, he2, tt2, Oe2, at2]);
  var ct2 = k(), ut2 = ct2.showTooltipFromEvent, st = ct2.hideTooltip, ht2 = (0, import_react21.useCallback)(function(e12) {
    if (null !== Xe2.current) {
      var t8 = Sn(Xe2.current, e12), i7 = t8[0], o5 = t8[1], r7 = et2.find(function(e13) {
        return jn(e13.x + nt2.left - e13.width / 2, e13.y + nt2.top - e13.height / 2, e13.width, e13.height, i7, o5);
      });
      void 0 !== r7 ? (ot2(r7), ut2((0, import_react21.createElement)(Re2, { cell: r7 }), e12)) : (ot2(null), st());
    }
  }, [Xe2, et2, nt2, ot2, ut2, st, Re2]), vt2 = (0, import_react21.useCallback)(function() {
    ot2(null), st();
  }, [ot2, st]), ft = (0, import_react21.useCallback)(function(e12) {
    null !== it2 && (null == We2 || We2(it2, e12));
  }, [it2, We2]);
  return (0, import_jsx_runtime6.jsx)("canvas", { ref: Xe2, width: De2 * Fe2, height: _e * Fe2, style: { width: De2, height: _e }, onMouseEnter: Te2 ? ht2 : void 0, onMouseMove: Te2 ? ht2 : void 0, onMouseLeave: Te2 ? vt2 : void 0, onClick: Te2 ? ft : void 0, role: Be2, "aria-label": qe2, "aria-labelledby": Ee, "aria-describedby": ze });
};
var pe = function(e11) {
  var t8 = e11.theme, i6 = e11.isInteractive, o5 = void 0 === i6 ? D2.isInteractive : i6, n7 = e11.animate, r6 = void 0 === n7 ? D2.animate : n7, a5 = e11.motionConfig, l4 = void 0 === a5 ? D2.motionConfig : a5, d3 = e11.renderWrapper, c9 = G(e11, ge);
  return (0, import_jsx_runtime6.jsx)(St, { isInteractive: o5, animate: r6, motionConfig: l4, theme: t8, renderWrapper: d3, children: (0, import_jsx_runtime6.jsx)(be, Y2({ isInteractive: o5 }, c9)) });
};
var ye = function(e11) {
  return (0, import_jsx_runtime6.jsx)(It, { children: function(t8) {
    var i6 = t8.width, o5 = t8.height;
    return (0, import_jsx_runtime6.jsx)(pe, Y2({ width: i6, height: o5 }, e11));
  } });
};
export {
  se as HeatMap,
  pe as HeatMapCanvas,
  he as ResponsiveHeatMap,
  ye as ResponsiveHeatMapCanvas,
  D2 as canvasDefaultProps,
  j4 as commonDefaultProps,
  J3 as computeCells,
  _ as computeLayout,
  K2 as computeSizeScale,
  Q as getCellAnnotationDimensions,
  N2 as getCellAnnotationPosition,
  H as svgDefaultProps,
  te as useCellAnnotations,
  U as useComputeCells,
  ee as useHeatMap
};
//# sourceMappingURL=@nivo_heatmap.js.map
